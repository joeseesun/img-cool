import { PlaitBoard, PlaitPluginElementContext, OnContextChanged } from '@plait/core';
import { ActiveGenerator, CommonElementFlavour } from '@plait/common';
import { PlaitTable, PlaitTableCell } from './interfaces/table';
import { DrawTextInfo, TextGenerator } from './generators/text.generator';
import { TableGenerator } from './generators/table.generator';
import { ArrowLineAutoCompleteGenerator } from './generators/arrow-line-auto-complete.generator';
export declare class TableComponent<T extends PlaitTable> extends CommonElementFlavour<T, PlaitBoard> implements OnContextChanged<T, PlaitBoard> {
    activeGenerator: ActiveGenerator<T>;
    tableGenerator: TableGenerator<T>;
    textGenerator: TextGenerator<T>;
    lineAutoCompleteGenerator: ArrowLineAutoCompleteGenerator<PlaitTable>;
    constructor();
    initializeGenerator(): void;
    initialize(): void;
    draw(): void;
    rotateVerticalText(): void;
    getDrawShapeTexts(cells: PlaitTableCell[]): DrawTextInfo[];
    initializeTextManage(): void;
    onContextChanged(value: PlaitPluginElementContext<T, PlaitBoard>, previous: PlaitPluginElementContext<T, PlaitBoard>): void;
    destroy(): void;
}
