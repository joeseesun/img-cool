import { PlaitBoard, PlaitPluginElementContext, OnContextChanged } from '@plait/core';
import { ArrowLineText, PlaitArrowLine, PlaitGeometry } from './interfaces';
import { LineActiveGenerator } from './generators/line-active.generator';
import { CommonElementFlavour, TextManage } from '@plait/common';
import { ArrowLineShapeGenerator } from './generators/arrow-line.generator';
interface BoundedElements {
    source?: PlaitGeometry;
    target?: PlaitGeometry;
}
export declare class ArrowLineComponent extends CommonElementFlavour<PlaitArrowLine, PlaitBoard> implements OnContextChanged<PlaitArrowLine, PlaitBoard> {
    shapeGenerator: ArrowLineShapeGenerator;
    activeGenerator: LineActiveGenerator;
    boundedElements: BoundedElements;
    constructor();
    initializeGenerator(): void;
    initialize(): void;
    getBoundedElements(): BoundedElements;
    onContextChanged(value: PlaitPluginElementContext<PlaitArrowLine, PlaitBoard>, previous: PlaitPluginElementContext<PlaitArrowLine, PlaitBoard>): void;
    initializeTextManages(): void;
    drawText(): void;
    createTextManage(text: ArrowLineText, index: number): TextManage;
    updateText(previousTexts: ArrowLineText[], currentTexts: ArrowLineText[]): void;
    updateTextRectangle(): void;
    destroy(): void;
}
export {};
