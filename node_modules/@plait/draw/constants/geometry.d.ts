import { GeometryShapes, GeometryCommonTextKeys, UMLSymbols } from '../interfaces';
import { Alignment } from '@plait/common';
export declare const ShapeDefaultSpace: {
    rectangleAndText: number;
};
export declare const DefaultDrawStyle: {
    strokeWidth: number;
    defaultRadius: number;
    strokeColor: string;
    fill: string;
};
export declare const DefaultDrawActiveStyle: {
    strokeWidth: number;
    selectionStrokeWidth: number;
};
export declare const DefaultBasicShapeProperty: {
    width: number;
    height: number;
    strokeColor: string;
    strokeWidth: number;
};
export declare const DefaultPentagonArrowProperty: {
    width: number;
    height: number;
};
export declare const DefaultTwoWayArrowProperty: {
    width: number;
    height: number;
};
export declare const DefaultArrowProperty: {
    width: number;
    height: number;
};
export declare const DefaultCloudProperty: {
    width: number;
    height: number;
};
export declare const DefaultTextProperty: {
    width: number;
    height: number;
    text: string;
};
export declare const GeometryThreshold: {
    defaultTextMaxWidth: number;
};
export declare const DefaultConnectorProperty: {
    width: number;
    height: number;
};
export declare const DefaultFlowchartProperty: {
    width: number;
    height: number;
};
export declare const DefaultDataBaseProperty: {
    width: number;
    height: number;
};
export declare const DefaultInternalStorageProperty: {
    width: number;
    height: number;
};
export declare const DefaultDecisionProperty: {
    width: number;
    height: number;
};
export declare const DefaultDataProperty: {
    width: number;
    height: number;
};
export declare const DefaultDocumentProperty: {
    width: number;
    height: number;
};
export declare const DefaultNoteProperty: {
    width: number;
    height: number;
};
export declare const DefaultMultiDocumentProperty: {
    width: number;
    height: number;
};
export declare const DefaultManualInputProperty: {
    width: number;
    height: number;
};
export declare const DefaultMergeProperty: {
    width: number;
    height: number;
};
export declare const DefaultActorProperty: {
    width: number;
    height: number;
};
export declare const DefaultContainerProperty: {
    width: number;
    height: number;
};
export declare const DefaultPackageProperty: {
    width: number;
    height: number;
    texts: {
        id: GeometryCommonTextKeys;
        text: string;
        align: Alignment;
    }[];
};
export declare const DefaultActivationProperty: {
    width: number;
    height: number;
};
export declare const DefaultObjectProperty: {
    width: number;
    height: number;
};
export declare const DefaultComponentBoxProperty: {
    width: number;
    height: number;
};
export declare const DefaultDeletionProperty: {
    width: number;
    height: number;
};
export declare const DefaultPortProperty: {
    width: number;
    height: number;
};
export declare const DefaultRequiredInterfaceProperty: {
    width: number;
    height: number;
};
export declare const DefaultAssemblyProperty: {
    width: number;
    height: number;
};
export declare const DefaultProvidedInterfaceProperty: {
    width: number;
    height: number;
};
export declare const DefaultCombinedFragmentProperty: {
    width: number;
    height: number;
    texts: {
        id: GeometryCommonTextKeys;
        text: string;
        align: Alignment;
    }[];
};
export declare const DefaultClassProperty: {
    width: number;
    height: number;
    texts: {
        text: string;
        align: Alignment;
    }[];
};
export declare const DefaultInterfaceProperty: {
    width: number;
    height: number;
    texts: {
        text: string;
        align: Alignment;
    }[];
};
export declare const DefaultBasicShapePropertyMap: Record<string, {
    width: number;
    height: number;
}>;
export declare const DefaultFlowchartPropertyMap: {
    connector: {
        width: number;
        height: number;
    };
    process: {
        width: number;
        height: number;
    };
    decision: {
        width: number;
        height: number;
    };
    data: {
        width: number;
        height: number;
    };
    terminal: {
        width: number;
        height: number;
    };
    manualInput: {
        width: number;
        height: number;
    };
    preparation: {
        width: number;
        height: number;
    };
    manualLoop: {
        width: number;
        height: number;
    };
    merge: {
        width: number;
        height: number;
    };
    delay: {
        width: number;
        height: number;
    };
    storedData: {
        width: number;
        height: number;
    };
    or: {
        width: number;
        height: number;
    };
    summingJunction: {
        width: number;
        height: number;
    };
    predefinedProcess: {
        width: number;
        height: number;
    };
    offPage: {
        width: number;
        height: number;
    };
    document: {
        width: number;
        height: number;
    };
    multiDocument: {
        width: number;
        height: number;
    };
    database: {
        width: number;
        height: number;
    };
    hardDisk: {
        width: number;
        height: number;
    };
    internalStorage: {
        width: number;
        height: number;
    };
    noteCurlyLeft: {
        width: number;
        height: number;
    };
    noteCurlyRight: {
        width: number;
        height: number;
    };
    noteSquare: {
        width: number;
        height: number;
    };
    display: {
        width: number;
        height: number;
    };
};
export declare const DefaultUMLPropertyMap: {
    actor: {
        width: number;
        height: number;
    };
    useCase: {
        width: number;
        height: number;
    };
    container: {
        width: number;
        height: number;
    };
    note: {
        width: number;
        height: number;
    };
    package: {
        width: number;
        height: number;
        texts: {
            id: GeometryCommonTextKeys;
            text: string;
            align: Alignment;
        }[];
    };
    combinedFragment: {
        width: number;
        height: number;
        texts: {
            id: GeometryCommonTextKeys;
            text: string;
            align: Alignment;
        }[];
    };
    class: {
        width: number;
        height: number;
        texts: {
            text: string;
            align: Alignment;
        }[];
    };
    interface: {
        width: number;
        height: number;
        texts: {
            text: string;
            align: Alignment;
        }[];
    };
    activation: {
        width: number;
        height: number;
    };
    object: {
        width: number;
        height: number;
    };
    deletion: {
        width: number;
        height: number;
    };
    activityClass: {
        width: number;
        height: number;
    };
    simpleClass: {
        width: number;
        height: number;
    };
    component: {
        width: number;
        height: number;
    };
    template: {
        width: number;
        height: number;
    };
    componentBox: {
        width: number;
        height: number;
    };
    port: {
        width: number;
        height: number;
    };
    branchMerge: {
        width: number;
        height: number;
    };
    assembly: {
        width: number;
        height: number;
    };
    providedInterface: {
        width: number;
        height: number;
    };
    requiredInterface: {
        width: number;
        height: number;
    };
};
export declare const MultipleTextGeometryTextKeys: {
    [key in GeometryShapes]?: string[];
};
export declare const LINE_HIT_GEOMETRY_BUFFER = 10;
export declare const LINE_SNAPPING_BUFFER = 6;
export declare const LINE_SNAPPING_CONNECTOR_BUFFER = 8;
export declare const GEOMETRY_WITHOUT_TEXT: GeometryShapes[];
export declare const GEOMETRY_WITH_MULTIPLE_TEXT: UMLSymbols[];
export declare const GEOMETRY_NOT_CLOSED: GeometryShapes[];
