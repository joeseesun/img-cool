import { PlaitBoard, Point } from '@plait/core';
import { PlaitSwimlane, PlaitTableCell, SwimlaneDrawSymbols, SwimlaneSymbols } from '../interfaces';
export declare function buildSwimlaneTable(element: PlaitSwimlane): {
    [x: string]: any;
    type: "swimlane";
    shape: SwimlaneSymbols;
    header?: boolean;
    id: string;
    points: Point[];
    rows: {
        id: string;
        height?: number;
    }[];
    columns: {
        id: string;
        width?: number;
    }[];
    cells: PlaitTableCell[];
    groupId?: string;
    children?: import("@plait/core").PlaitElement[];
    angle?: number;
};
export declare const getDefaultSwimlanePoints: (pointer: SwimlaneDrawSymbols, centerPoint: Point) => [Point, Point];
export declare const createDefaultSwimlane: (shape: SwimlaneDrawSymbols, points: [Point, Point]) => PlaitSwimlane;
export declare const createDefaultRowsOrColumns: (shape: SwimlaneSymbols, type: "row" | "column", header: boolean, size: number) => {
    id: string;
}[];
export declare const createDefaultCells: (shape: SwimlaneSymbols, rows: {
    id: string;
    height?: number;
}[], columns: {
    id: string;
    width?: number;
}[], header: boolean) => PlaitTableCell[];
export declare const getSwimlaneCount: (swimlane: PlaitSwimlane) => number;
export declare const isSwimlaneWithHeader: (shape: SwimlaneDrawSymbols) => boolean;
export declare const isSwimlaneShape: (shape: SwimlaneSymbols) => boolean;
export declare const adjustSwimlaneShape: (shape: SwimlaneDrawSymbols) => SwimlaneSymbols;
export declare const isSwimlanePointers: (board: PlaitBoard, pointer?: string) => boolean;
