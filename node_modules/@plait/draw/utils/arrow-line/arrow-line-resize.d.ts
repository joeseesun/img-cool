import { ElbowLineRouteOptions, ResizeState } from '@plait/common';
import { PlaitBoard, Point } from '@plait/core';
import { PlaitArrowLine } from '../../interfaces';
export declare const alignPoints: (basePoint: Point, movingPoint: Point) => Point;
export declare function getResizedPreviousAndNextPoint(nextRenderPoints: Point[], sourcePoint: Point, targetPoint: Point, handleIndex: number): {
    previous: Point | null;
    next: Point | null;
};
export declare function alignElbowSegment(startKeyPoint: Point, endKeyPoint: Point, resizeState: ResizeState, resizedPreviousAndNextPoint: {
    previous: Point | null;
    next: Point | null;
}): Point[];
export declare function getIndexAndDeleteCountByKeyPoint(board: PlaitBoard, element: PlaitArrowLine, dataPoints: Point[], nextRenderPoints: Point[], handleIndex: number): {
    index: null;
    deleteCount: null;
} | {
    index: number;
    deleteCount: number | null;
};
export declare function getMirrorDataPoints(board: PlaitBoard, nextDataPoints: Point[], nextKeyPoints: Point[], params: ElbowLineRouteOptions): Point[];
export declare function isUpdatedHandleIndex(board: PlaitBoard, element: PlaitArrowLine, dataPoints: Point[], nextRenderPoints: Point[], handleIndex: number): boolean;
export declare function getMidKeyPoints(simplifiedNextKeyPoints: Point[], startPoint: Point, endPoint: Point): Point[];
export declare const hasIllegalElbowPoint: (midDataPoints: Point[]) => boolean;
