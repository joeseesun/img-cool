import { PlaitBoard, Point, RectangleClient, ResizeCursorClass, PlaitElement } from '@plait/core';
import { ResizeHandle } from '../constants/resize';
import { PlaitElementOrArray, ResizeRef } from '../types/resize';
export declare const getResizeHandleByIndex: (index: number) => ResizeHandle;
export declare const getIndexByResizeHandle: (resizeHandle: ResizeHandle) => number;
export declare const getSymmetricHandleIndex: (board: PlaitBoard, index: number) => number;
export declare const getRotatedResizeCursorClassByAngle: (cursor: ResizeCursorClass, angle: number) => ResizeCursorClass;
export declare const getRectangleResizeHandleRefs: (rectangle: RectangleClient, diameter: number) => {
    rectangle: {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    handle: ResizeHandle;
    cursorClass: ResizeCursorClass;
}[];
export declare const getResizeHandlePointByIndex: (rectangle: RectangleClient, index: number) => Point;
export declare const IS_RESIZING: WeakMap<PlaitBoard, ResizeRef<any, any, any>>;
export declare const isResizing: (board: PlaitBoard) => boolean;
export declare const isResizingByCondition: <T extends PlaitElementOrArray, K>(board: PlaitBoard, match: (resizeRef: ResizeRef<T, K>) => boolean) => boolean;
export declare const addResizing: <T extends PlaitElementOrArray, K, P>(board: PlaitBoard, resizeRef: ResizeRef<T, K, P>, key: string) => void;
export declare const removeResizing: (board: PlaitBoard, key: string) => void;
export declare const isEdgeHandle: (board: PlaitBoard, handle: ResizeHandle) => boolean;
export declare const isCornerHandle: (board: PlaitBoard, handle: ResizeHandle) => boolean;
export declare const resetPointsAfterResize: (originRectangle: RectangleClient, currentRectangle: RectangleClient, originSelectionCenterPoint: Point, currentSelectionCenterPoint: Point, angle: number) => [Point, Point];
export declare const hasMoreThanOnePoint: (element: PlaitElement) => boolean;
export declare const hasResizeHandle: (board: PlaitBoard, element: PlaitElement) => boolean;
