import { PlaitBoard, Point, RectangleClient } from '@plait/core';
import { Editor, Element, Operation } from 'slate';
import { TextPlugin } from './with-text';
import { TextComponentRef } from './with-text';
export interface TextManageChangeData {
    newText?: Element;
    operations?: Operation[];
    width: number;
    height: number;
}
export declare class TextManage {
    private board;
    private options;
    isEditing: boolean;
    editor: Editor;
    g: SVGGElement;
    foreignObject: SVGForeignObjectElement;
    textComponentRef: TextComponentRef;
    exitCallback?: () => void;
    constructor(board: PlaitBoard, options: {
        getRectangle: () => RectangleClient;
        onChange?: (data: TextManageChangeData) => void;
        getRenderRectangle?: () => RectangleClient;
        getMaxWidth?: () => number;
        textPlugins?: TextPlugin[];
    });
    draw(text: Element): void;
    updateRectangleWidth(width: number): void;
    updateAngle(centerPoint: Point, angle?: number): void;
    updateRectangle(rectangle?: RectangleClient): void;
    updateText(newText: Element): void;
    edit(callback?: () => void, exitEdit?: (event: Event) => boolean): () => void;
    getSize: (element?: Element, maxWidth?: number) => {
        width: number;
        height: number;
    };
    getText: () => import("slate").Descendant;
    destroy(): void;
}
export declare const buildCompositionData: (editor: Editor, data: string) => {
    children: any[];
} | null;
