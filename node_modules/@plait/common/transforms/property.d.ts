import { Path, PlaitBoard, PlaitElement } from '@plait/core';
export interface SetOptions<T extends PlaitElement = PlaitElement> {
    callback?: (element: T, path: Path) => void;
    getMemorizeKey?: (element: T) => string;
    match?: (element: T) => boolean;
}
export declare const setProperty: <T extends PlaitElement = PlaitElement>(board: PlaitBoard, properties: Partial<T>, options?: SetOptions<T>) => void;
export declare const PropertyTransforms: {
    setFillColor: (board: PlaitBoard, fill: string | null, options: SetOptions) => void;
    setStrokeStyle: (board: PlaitBoard, strokeStyle: string, options: SetOptions) => void;
    setProperty: <T extends PlaitElement = PlaitElement>(board: PlaitBoard, properties: Partial<T>, options?: SetOptions<T>) => void;
    setStrokeWidth: (board: PlaitBoard, strokeWidth: number, options: SetOptions) => void;
    setStrokeColor: (board: PlaitBoard, strokeColor: string | null, options: SetOptions) => void;
};
