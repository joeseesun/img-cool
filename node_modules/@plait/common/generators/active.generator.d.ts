import { PlaitBoard, PlaitElement, RectangleClient } from '@plait/core';
import { Generator, GeneratorOptions } from './generator';
export interface ActiveGeneratorExtraData {
    selected: boolean;
}
export interface ActiveGeneratorOptions<T> extends GeneratorOptions {
    getRectangle: (element: T) => RectangleClient;
    getStrokeWidth: () => number;
    getStrokeOpacity: () => number;
    hasResizeHandle: () => boolean;
}
export declare const createActiveGenerator: <T extends PlaitElement = PlaitElement>(board: PlaitBoard, options: ActiveGeneratorOptions<T>) => ActiveGenerator<T>;
export declare class ActiveGenerator<T extends PlaitElement = PlaitElement> extends Generator<T, ActiveGeneratorExtraData, ActiveGeneratorOptions<T>> {
    board: PlaitBoard;
    options: ActiveGeneratorOptions<T>;
    static key: string;
    hasResizeHandle: boolean;
    constructor(board: PlaitBoard, options: ActiveGeneratorOptions<T>);
    canDraw(element: T, data: ActiveGeneratorExtraData): boolean;
    draw(element: T, data: ActiveGeneratorExtraData): SVGGElement;
}
