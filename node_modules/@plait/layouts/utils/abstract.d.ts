import { LayoutNode } from '../interfaces/layout-node';
import { LayoutTreeNode } from '../interfaces/layout-tree-node';
import { AbstractNode } from '../interfaces/mind';
export declare const getNonAbstractChildren: <T extends {
    children?: T[];
} = LayoutNode | LayoutTreeNode>(parentNode: T) => T[];
export declare const findAbstractByEndNode: <T extends {
    children: T[];
} = LayoutNode | LayoutTreeNode>(parentNode: T, endNode: T) => T | undefined;
export declare const findAbstractByStartNode: <T extends {
    children: T[];
} = LayoutNode | LayoutTreeNode>(parentNode: T, startNode: T) => T | undefined;
/**
 * handle standard layout effect
 * the abstract correct start and end should sub rightNodeCount when it is set on left area
 */
export declare const getCorrectStartEnd: (abstract: AbstractNode, parent: LayoutNode) => {
    start: number;
    end: number;
};
