import { LayoutContext, LayoutOptions, MindLayoutType, OriginNode } from './mind';
/**
 * abstract layout node
 */
export declare class LayoutNode {
    x: number;
    y: number;
    vGap: number;
    hGap: number;
    origin: OriginNode;
    blackNode?: LayoutBlockNode;
    width: number;
    height: number;
    depth: number;
    children: LayoutNode[];
    parent?: LayoutNode;
    left: boolean;
    up: boolean;
    layout: MindLayoutType;
    verticalConnectingPosition?: ConnectingPosition;
    constructor(origin: OriginNode, options: LayoutOptions, context: LayoutContext, parent?: LayoutNode);
    isRoot(): boolean;
    addGap(hGap: number, vGap: number): void;
    eachNode(callback: (node: LayoutNode) => void): void;
    getBoundingBox(): BoundingBox;
    translate(tx?: number, ty?: number): void;
    right2left(): void;
    down2up(): void;
}
export interface BoundingBox {
    left: number;
    top: number;
    right: number;
    bottom: number;
    width: number;
    height: number;
}
export declare class LayoutBlockNode {
    left: number;
    right: number;
    top: number;
    bottom: number;
    width: number;
    height: number;
    rootX: number;
    rootY: number;
    rootWidth: number;
    rootHeight: number;
    constructor(left: number, right: number, top: number, bottom: number, width: number, height: number, rootX: number, rootY: number, rootWidth: number, rootHeight: number);
}
export declare function toHorizontal(black: LayoutBlockNode): LayoutBlockNode;
/**
 * Connecting position, affecting horizontal layout
 */
export declare enum ConnectingPosition {
    middle = "middle",
    bottom = "bottom"
}
