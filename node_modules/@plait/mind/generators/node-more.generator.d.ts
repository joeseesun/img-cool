import { PlaitBoard, Point } from '@plait/core';
import { MindElement, BaseData, LayoutDirection } from '../interfaces';
import { Generator } from '@plait/common';
export interface NodeMoreExtraData {
    isSelected: boolean;
    isHovered?: boolean;
    isHoveredCollapseArea?: boolean;
    isHoveredExpandArea?: boolean;
    isHoveredAddArea?: boolean;
    isShowCollapseAnimation?: boolean;
    isShowAddAnimation?: boolean;
}
export declare class NodeMoreGenerator extends Generator<MindElement, NodeMoreExtraData> {
    static key: string;
    collapseOrAddG: SVGGElement | undefined | null;
    expandG: SVGGElement | undefined | null;
    canDraw(element: MindElement<BaseData>, extraData: NodeMoreExtraData): boolean;
    draw(element: MindElement<BaseData>, extraData: NodeMoreExtraData): SVGGElement;
    toggleCollapseOrAdd(center: Point, addCenter: Point | null, stroke: string, parentG: SVGGElement, isShowCollapse: boolean, isShowAdd: boolean, isHoveredAddArea: boolean, isShowCollapseAnimation: boolean, isShowAddAnimation: boolean): void;
    toggleExpandBadge(element: MindElement, moreStartAndEnd: [Point, Point], center: Point, stroke: string, parentG: SVGGElement, isCollapsed: boolean, isHoveredExpandIcon: boolean): void;
}
export declare const getCollapseAndAddCenterPoint: (board: PlaitBoard, element: MindElement) => {
    collapseCenter: Point;
    addCenter: Point;
};
export declare const getAddCenterByCollapseOrExpandCenter: (target: MindElement, collapseOrExpandCenter: Point, layoutDirection: LayoutDirection) => Point;
export declare const getNodeMoreLayoutDirection: (board: PlaitBoard, element: MindElement) => LayoutDirection;
export declare const getMoreStartAndEnd: (board: PlaitBoard, element: MindElement, linkLineDirection: LayoutDirection) => [Point, Point];
export declare const isLastSelectedMindElement: (board: PlaitBoard, element: MindElement) => boolean;
export declare const canHandleNodeMore: (board: PlaitBoard) => boolean;
