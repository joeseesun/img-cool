import { PlaitBoard, Point, RectangleClient } from '@plait/core';
import { MindElement } from '../../interfaces';
import { LayoutNode } from '@plait/layouts';
import { AbstractHandlePosition } from '../../plugins/with-abstract-resize.board';
export declare const getRectangleByResizingLocation: (abstractRectangle: RectangleClient, location: number, activeHandlePosition: AbstractHandlePosition, isHorizontal: boolean) => {
    y: number;
    height: number;
    x: number;
    width: number;
};
export declare const getLocationScope: (board: PlaitBoard, handlePosition: AbstractHandlePosition, parentChildren: MindElement[], element: MindElement, parent: LayoutNode, isHorizontal: boolean) => {
    max: number;
    min: number;
};
export declare const getHitAbstractHandle: (board: PlaitBoard, element: MindElement, point: Point) => AbstractHandlePosition | undefined;
export declare const getAbstractHandleRectangle: (rectangle: RectangleClient, isHorizontal: boolean, position: AbstractHandlePosition) => {
    y: number;
    height: number;
    x: number;
    width: number;
};
export declare function findLocationLeftIndex(board: PlaitBoard, parentChildren: MindElement[], location: number, isHorizontal: boolean): number;
export declare function handleTouchedAbstract(board: PlaitBoard, touchedAbstract: MindElement | undefined, endPoint: Point): MindElement<import("../../interfaces").BaseData> | undefined;
