import { AbstractNode } from '@plait/layouts';
import { MindElement } from '../../interfaces/element';
import { Path, PlaitBoard, PlaitElement } from '@plait/core';
export declare const separateChildren: (parentElement: MindElement) => {
    leftChildren: MindElement<import("@plait/mind").BaseData>[];
    rightChildren: MindElement<import("@plait/mind").BaseData>[];
};
export declare const isSetAbstract: (element: PlaitElement) => boolean;
export declare const canSetAbstract: (element: PlaitElement) => boolean;
export declare const getCorrespondingAbstract: (element: MindElement) => MindElement<import("@plait/mind").BaseData> | undefined;
export declare const getBehindAbstracts: (element: MindElement) => MindElement<import("@plait/mind").BaseData>[];
/**
 * return corresponding abstract that is not child of elements
 */
export declare const getOverallAbstracts: (board: PlaitBoard, elements: MindElement[]) => (MindElement & AbstractNode)[];
export interface AbstractRef {
    abstract: MindElement & AbstractNode;
    references: MindElement[];
}
/**
 * abstract node is valid when elements contains at least one element it is referenced with
 */
export declare const getValidAbstractRefs: (board: PlaitBoard, elements: MindElement[]) => AbstractRef[];
export declare function getRelativeStartEndByAbstractRef(abstractRef: AbstractRef, elements: MindElement[]): {
    start: number;
    end: number;
};
export declare const insertElementHandleAbstract: (board: PlaitBoard, path: Path, step?: number, isExtendPreviousNode?: boolean, effectedAbstracts?: Map<MindElement<import("@plait/mind").BaseData>, Pick<AbstractNode, "start" | "end">>) => Map<MindElement<import("@plait/mind").BaseData>, Pick<AbstractNode, "start" | "end">>;
export declare const deleteElementHandleAbstract: (board: PlaitBoard, deletableElements: MindElement[], effectedAbstracts?: Map<MindElement<import("@plait/mind").BaseData>, Pick<AbstractNode, "start" | "end">>) => Map<MindElement<import("@plait/mind").BaseData>, Pick<AbstractNode, "start" | "end">>;
export declare const isChildOfAbstract: (board: PlaitBoard, element: MindElement) => boolean;
