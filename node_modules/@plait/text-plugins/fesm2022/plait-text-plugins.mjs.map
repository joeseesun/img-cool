{"version":3,"file":"plait-text-plugins.mjs","sources":["../../../packages/text-plugins/src/align/align-editor.ts","../../../packages/text-plugins/src/mark/types.ts","../../../packages/text-plugins/src/mark/constant.ts","../../../packages/text-plugins/src/mark/mark.editor.ts","../../../packages/text-plugins/src/mark/with-marks.ts","../../../packages/text-plugins/src/link/link-editor.ts","../../../packages/text-plugins/src/link/with-link.ts","../../../packages/text-plugins/src/constant/index.ts","../../../packages/text-plugins/src/utils/clipboard.ts","../../../packages/text-plugins/src/utils/common.ts","../../../packages/text-plugins/src/utils/marks.ts","../../../packages/text-plugins/src/text-transforms.ts","../../../packages/text-plugins/src/public-api.ts","../../../packages/text-plugins/src/plait-text-plugins.ts"],"sourcesContent":["import { Alignment, ParagraphElement } from '@plait/common';\nimport { Editor, Transforms, Node } from 'slate';\n\nexport const AlignEditor = {\n    isActive(editor: Editor, alignment: Alignment) {\n        const blockElement = Node.get(editor, defaultPath) as ParagraphElement;\n        if (blockElement) {\n            const { align } = blockElement;\n            return align === alignment;\n        }\n        return false;\n    },\n    setAlign(editor: Editor, alignment: Alignment) {\n        const props: Partial<ParagraphElement> = {\n            align: alignment\n        };\n        Transforms.setNodes(editor, props, {\n            at: defaultPath\n        });\n    }\n};\n\nconst defaultPath = [0];\n","export enum MarkTypes {\n    bold = 'bold',\n    italic = 'italic',\n    underline = 'underlined',\n    strike = 'strike',\n    color = 'color',\n    fontSize = 'font-size'\n}\n\nexport const MarkProps: MarkTypes[] = [\n    MarkTypes.bold,\n    MarkTypes.color,\n    MarkTypes.italic,\n    MarkTypes.strike,\n    MarkTypes.underline,\n    MarkTypes.fontSize\n];\n\nexport enum FontSizes {\n    'fontSize12' = '12',\n    'fontSize13' = '13',\n    'fontSize14' = '14',\n    'fontSize15' = '15',\n    'fontSize16' = '16',\n    'fontSize18' = '18',\n    'fontSize20' = '20',\n    'fontSize24' = '24',\n    'fontSize28' = '28',\n    'fontSize32' = '32',\n    'fontSize40' = '40',\n    'fontSize48' = '48'\n}\n\nexport const HOTKEYS = {\n    'mod+b': MarkTypes.bold,\n    'mod+i': MarkTypes.italic,\n    'mod+u': MarkTypes.underline,\n    'mod+shift+x': MarkTypes.strike\n};\n","export const DEFAULT_FONT_SIZE = 14;\n","import { Editor, Text, Node, Element, Transforms, NodeEntry, Location } from 'slate';\nimport { FontSizes, MarkProps, MarkTypes } from './types';\nimport { DEFAULT_FONT_SIZE } from './constant';\nimport { DEFAULT_COLOR } from '@plait/core';\n\nexport interface MarkEditor extends Editor {\n    removeMark: (key: string, shouldChange?: boolean) => void;\n}\n\nexport const PlaitMarkEditor = {\n    getMarks(editor: Editor) {\n        const marks: any = {};\n        let at: Location = [];\n        if (editor.selection) {\n            at = editor.selection;\n        } else if (editor.children && editor.children.length > 0) {\n            at = { anchor: Editor.start(editor, [0]), focus: Editor.end(editor, [0]) };\n        }\n        const matchResult = Editor.nodes(editor, { match: Text.isText, at });\n        for (const match of matchResult) {\n            const [node] = match as NodeEntry<Text>;\n            const { text, ...rest } = node;\n            Object.assign(marks, rest);\n        }\n        for (const key in marks) {\n            if (!MarkProps.includes(key as MarkTypes)) {\n                delete marks[key];\n            }\n        }\n        return marks;\n    },\n    getMarksByElement(element: Element) {\n        const marks: any = {};\n        const texts = Node.texts(element);\n        for (const match of texts) {\n            const [node] = match as NodeEntry<Text>;\n            const { text, ...rest } = node;\n            Object.assign(marks, rest);\n        }\n        for (const key in marks) {\n            if (!MarkProps.includes(key as MarkTypes)) {\n                delete marks[key];\n            }\n        }\n        return marks;\n    },\n    isMarkActive(editor: Editor, format: MarkTypes) {\n        if (!editor?.selection) {\n            return;\n        }\n        const node = Node.get(editor, editor?.selection?.anchor?.path);\n        if (!Text.isText(node)) {\n            return false;\n        }\n        const marks = PlaitMarkEditor.getMarks(editor);\n        return marks && marks[format] ? true : false;\n    },\n    toggleMark(editor: Editor, format: MarkTypes) {\n        setSelection(editor);\n        const isActive = PlaitMarkEditor.isMarkActive(editor, format);\n        if (isActive) {\n            Editor.removeMark(editor, format);\n        } else {\n            Editor.addMark(editor, format, true);\n        }\n    },\n    setFontSizeMark(editor: Editor, size: FontSizes, defaultSize: number = DEFAULT_FONT_SIZE) {\n        setSelection(editor);\n        // set paragraph text fontSize\n        if (Number(size) === defaultSize) {\n            Editor.removeMark(editor, MarkTypes.fontSize);\n        } else {\n            // set paragraph text fontSize\n            Editor.addMark(editor, MarkTypes.fontSize, Number(size));\n        }\n    },\n    setColorMark(editor: Editor, color: string | null, defaultTextColor: string = DEFAULT_COLOR) {\n        setSelection(editor);\n        if (color === defaultTextColor || color === null || color === undefined) {\n            Editor.removeMark(editor, 'color');\n        } else {\n            Editor.addMark(editor, 'color', color);\n        }\n    }\n};\n\nexport function setSelection(editor: Editor) {\n    if (!editor.selection) {\n        Transforms.select(editor, [0]);\n    }\n}\n","import { isKeyHotkey } from 'is-hotkey';\nimport { MarkEditor, PlaitMarkEditor } from './mark.editor';\nimport { Editor, Range, Text, Transforms } from 'slate';\nimport { HOTKEYS } from './types';\n\nexport const withMark = <T extends Editor & MarkEditor>(editor: T): T => {\n    const e = editor;\n\n    e.removeMark = (key: string, shouldChange = true) => {\n        const { selection } = e;\n        if (selection) {\n            if (Range.isExpanded(selection)) {\n                Transforms.unsetNodes(e, key, {\n                    match: Text.isText,\n                    split: true\n                });\n            } else {\n                const marks = { ...(Editor.marks(e) || {}) };\n                delete (marks as any)[key];\n                editor.marks = marks;\n                const text = Editor.string(e, selection.anchor.path);\n                if (text !== '') {\n                    Editor.setNormalizing(editor, false);\n                    e.insertText('');\n                    editor.marks = marks;\n                    Editor.setNormalizing(editor, true);\n                } else {\n                    Transforms.unsetNodes(e, key, { at: selection.anchor.path });\n                }\n                if (shouldChange) {\n                    editor.onChange();\n                }\n            }\n        }\n    };\n\n    e.addMark = (key: string, value: any) => {\n        const { selection } = editor;\n\n        if (selection) {\n            if (Range.isExpanded(selection)) {\n                Transforms.setNodes(e, { [key]: value }, { match: Text.isText, split: true });\n            } else {\n                const marks = {\n                    ...(Editor.marks(e) || {}),\n                    [key]: value\n                };\n                editor.marks = marks;\n                const text = Editor.string(e, selection.anchor.path);\n                if (text !== '') {\n                    Editor.setNormalizing(editor, false);\n                    e.insertText('');\n                    editor.marks = marks;\n                    Editor.setNormalizing(editor, true);\n                } else {\n                    Transforms.setNodes(e, { [key]: value }, { at: selection.anchor.path });\n                }\n            }\n        }\n    };\n\n    return e;\n};\n\nexport const markShortcuts = (editor: Editor, event: KeyboardEvent) => {\n    for (const hotkey in HOTKEYS) {\n        if (isKeyHotkey(hotkey, event)) {\n            event.preventDefault();\n            const mark = (HOTKEYS as any)[hotkey];\n            PlaitMarkEditor.toggleMark(editor, mark);\n        }\n    }\n};\n","import { CustomElement, LinkElement } from '@plait/common';\nimport { Editor, Transforms, Range, Element, BaseRange, Location, Node } from 'slate';\n\nexport const LinkEditor = {\n    wrapLink(editor: Editor, text: string, url: string) {\n        if (LinkEditor.isLinkActive(editor)) {\n            LinkEditor.unwrapLink(editor);\n        }\n        const { selection } = editor;\n        const isCollapsed = selection && Range.isCollapsed(selection);\n        const link: LinkElement = {\n            type: 'link',\n            url,\n            children: [{ text }]\n        };\n        if (isCollapsed || Node.string(editor) === '') {\n            Transforms.insertNodes(editor, link);\n        } else if (!selection) {\n            const at = { anchor: Editor.start(editor, [0]), focus: Editor.end(editor, [0]) };\n            Transforms.wrapNodes(editor, link, { split: true, at });\n        } else {\n            Transforms.wrapNodes(editor, link, { split: true });\n            Transforms.collapse(editor, { edge: 'end' });\n        }\n    },\n    unwrapLink(editor: Editor, at?: Location) {\n        if (!at) {\n            at = editor.selection as BaseRange;\n            if (!at && editor.children && editor.children.length > 0) {\n                at = { anchor: Editor.start(editor, [0]), focus: Editor.end(editor, [0]) };\n            }\n        }\n        Transforms.unwrapNodes<CustomElement>(editor, { at, match: n => Element.isElement(n) && (n as LinkElement).type === 'link' });\n    },\n    isLinkActive(editor: Editor) {\n        let at = editor.selection as BaseRange;\n        if (!at && editor.children && editor.children.length > 0) {\n            at = { anchor: Editor.start(editor, [0]), focus: Editor.end(editor, [0]) };\n        }\n        const [link] = Editor.nodes<CustomElement>(editor, { match: n => Element.isElement(n) && (n as LinkElement).type === 'link', at });\n        return !!link;\n    },\n    getLinkElement(editor: Editor) {\n        let at = editor.selection as BaseRange;\n        if (!at && editor.children && editor.children.length > 0) {\n            at = { anchor: Editor.start(editor, [0]), focus: Editor.end(editor, [0]) };\n        }\n        const [link] = Editor.nodes<CustomElement>(editor, { match: n => Element.isElement(n) && (n as LinkElement).type === 'link', at });\n        return link;\n    }\n};\n","import { LinkElement } from '@plait/common';\nimport { Element, NodeEntry, Transforms, Node, Editor } from 'slate';\n\nexport const withLink = <T extends Editor>(editor: T): T => {\n    const { isInline, normalizeNode } = editor;\n\n    editor.isInline = (element: Element) => {\n        return (element as LinkElement).type === 'link' ? true : isInline(element);\n    };\n\n    editor.normalizeNode = (nodeEntry: NodeEntry) => {\n        const node = nodeEntry[0] as LinkElement;\n        const path = nodeEntry[1];\n        if (node.type && node.type === 'link' && Node.string(node) === '') {\n            Transforms.removeNodes(editor, { at: path });\n            return;\n        }\n\n        normalizeNode(nodeEntry);\n    };\n\n    return editor;\n};\n","export const TEXT_DEFAULT_HEIGHT = 20;\n\nexport const CLIPBOARD_FORMAT_KEY = 'x-plait-text-fragment';\n","import { Element, Node } from 'slate';\nimport { CLIPBOARD_FORMAT_KEY } from '../constant';\n\nexport const getTextFromClipboard = (data: DataTransfer | null) => {\n    let plaitTextData = data?.getData(`application/${CLIPBOARD_FORMAT_KEY}`);\n    const text = (data ? data.getData(`text/plain`) : '') as string;\n    if (plaitTextData) {\n        const decoded = decodeURIComponent(window.atob(plaitTextData));\n        const res = JSON.parse(decoded) as Element[];\n        if (res.length === 1 && Node.string(res[0])) {\n            return res[0];\n        }\n    }\n    return text.trim() || '';\n};\n","// credit: https://github.com/segmentio/is-url\n// support mailto: protocol\nexport function isUrl(string: string) {\n    const protocolAndDomainRE = /^(?:\\w+:)?\\/\\/(\\S+)$/;\n    const emailProtocolRE = /^mailto:([^\\s@]+@[^\\s@]+\\.[^\\s@]+)$/;\n    const localhostDomainRE = /^localhost[\\:?\\d]*(?:[^\\:?\\d]\\S*)?$/;\n    const nonLocalhostDomainRE = /^[^\\s\\.]+\\.\\S{2,}$/;\n\n    if (typeof string !== 'string') {\n        return false;\n    }\n\n    // 检查是否是 mailto: 协议\n    const emailMatch = string.match(emailProtocolRE);\n    if (emailMatch) {\n        // 简单验证 email 地址格式\n        return /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(emailMatch[1]);\n    }\n\n    // 原有的 URL 验证逻辑\n    const match = string.match(protocolAndDomainRE);\n    if (!match) {\n        return false;\n    }\n\n    const everythingAfterProtocol = match[1];\n    if (!everythingAfterProtocol) {\n        return false;\n    }\n\n    if (localhostDomainRE.test(everythingAfterProtocol) || nonLocalhostDomainRE.test(everythingAfterProtocol)) {\n        return true;\n    }\n\n    return false;\n}\n","import { CustomText, getTextEditorsByElement, getTextManages } from '@plait/common';\nimport { PlaitElement } from '@plait/core';\nimport { PlaitMarkEditor } from '../mark/mark.editor';\nimport { Element, Node } from 'slate';\nimport { ParagraphElement } from '../types';\n\nexport const getTextMarksByElement = (element: PlaitElement) => {\n    const editors = getTextEditorsByElement(element);\n    const editor = editors[0];\n    if (!editor || editor.children.length === 0) {\n        return {};\n    }\n    const currentMarks: Omit<CustomText, 'text'> = PlaitMarkEditor.getMarks(editor);\n    return currentMarks;\n};\n\nexport const getFirstTextMarks = (element: ParagraphElement) => {\n    const firstText = Node.first({ children: [element] }, [0]);\n    return firstText[0] as CustomText;\n};\n","import { PlaitBoard, PlaitElement, getSelectedElements } from '@plait/core';\nimport { BaseEditor, BaseRange, Editor, Transforms as SlateTransforms } from 'slate';\nimport { FontSizes, MarkTypes } from './mark/types';\nimport { Alignment, findFirstTextEditor, getTextEditors, getTextEditorsByElement } from '@plait/common';\nimport { PlaitMarkEditor } from './mark/mark.editor';\nimport { AlignEditor } from './align/align-editor';\n\nconst setTextMarks = (board: PlaitBoard, mark: MarkTypes, editors?: BaseEditor[]) => {\n    let textEditors: BaseEditor[] | undefined;\n    if (editors?.length) {\n        textEditors = editors;\n    } else {\n        const selectedElements = getSelectedElements(board);\n        if (selectedElements.length) {\n            const firstEditor = findFirstTextEditor(board);\n            if (!firstEditor) {\n                return;\n            }\n            const activeMarks = PlaitMarkEditor.getMarks(firstEditor);\n            const elements = selectedElements.filter(element => {\n                const elementEditors = getTextEditorsByElement(element);\n                return elementEditors.some(editor => {\n                    const elementMarks = PlaitMarkEditor.getMarks(editor);\n                    return elementMarks[mark] === activeMarks[mark];\n                });\n            });\n            textEditors = getTextEditors(board, elements);\n        }\n    }\n    if (textEditors && textEditors.length) {\n        textEditors.forEach(editor => {\n            PlaitMarkEditor.toggleMark(editor, mark);\n        });\n    }\n};\n\nconst setFontSize = (\n    board: PlaitBoard,\n    size: FontSizes,\n    defaultFontSize: number | ((element: PlaitElement) => number | undefined),\n    editors?: BaseEditor[]\n) => {\n    const textEditors = getHandleTextEditors(board, editors);\n    if (textEditors && textEditors.length) {\n        const selectedElements = getSelectedElements(board);\n        textEditors.forEach(editor => {\n            let finalDefaultFontSize;\n            if (typeof defaultFontSize === 'function') {\n                const element = selectedElements.find(element => {\n                    const textEditors = getTextEditorsByElement(element);\n                    return textEditors.includes(editor);\n                });\n                finalDefaultFontSize = defaultFontSize(element!);\n            } else {\n                finalDefaultFontSize = defaultFontSize;\n            }\n\n            PlaitMarkEditor.setFontSizeMark(editor, size, finalDefaultFontSize);\n        });\n    }\n};\n\nconst setTextColor = (board: PlaitBoard, color: string | null, textSelection?: BaseRange, editors?: BaseEditor[]) => {\n    const textEditors = getHandleTextEditors(board, editors);\n    if (textEditors && textEditors.length) {\n        textEditors.forEach(editor => {\n            if (textSelection) {\n                SlateTransforms.select(editor, textSelection);\n            }\n            if (color === 'transparent') {\n                Editor.removeMark(editor, MarkTypes.color);\n            } else {\n                PlaitMarkEditor.setColorMark(editor, color);\n            }\n        });\n    }\n};\n\nconst setTextAlign = (board: PlaitBoard, align: Alignment, editors?: BaseEditor[]) => {\n    const textEditors = getHandleTextEditors(board, editors);\n    if (textEditors && textEditors.length) {\n        textEditors.forEach(editor => AlignEditor.setAlign(editor, align));\n    }\n};\n\nconst getHandleTextEditors = (board: PlaitBoard, editors?: BaseEditor[]) => {\n    let textEditors: BaseEditor[] | undefined;\n    if (editors?.length) {\n        textEditors = editors;\n    } else {\n        textEditors = getTextEditors(board);\n    }\n    return textEditors;\n};\n\nexport const TextTransforms = { setTextAlign, setTextColor, setFontSize, setTextMarks };\n","/*\n * Public API Surface of utils\n */\n\nexport * from './align';\nexport * from './mark';\nexport * from './link';\nexport * from './utils';\nexport * from './constant';\nexport * from './text-transforms';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":["SlateTransforms"],"mappings":"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"}