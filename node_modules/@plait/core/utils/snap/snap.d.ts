import { PlaitBoard, PlaitElement, Point, RectangleClient } from '../../interfaces';
export interface SnapDelta {
    deltaX: number;
    deltaY: number;
}
export interface SnapRef extends SnapDelta {
    snapG: SVGGElement;
}
export interface GapSnapRef {
    before: {
        distance: number;
        index: number;
    }[];
    after: {
        distance: number;
        index: number;
    }[];
}
type TripleSnapAxis = [number, number, number];
export declare const SNAP_TOLERANCE = 2;
export declare function getSnapRectangles(board: PlaitBoard, activeElements: PlaitElement[]): RectangleClient[];
export declare function getBarPoint(point: Point, isHorizontal: boolean): number[][];
export declare function getMinPointDelta(pointRectangles: RectangleClient[], axis: number, isHorizontal: boolean): number;
export declare const getNearestDelta: (axis: number, rectangle: RectangleClient, isHorizontal: boolean) => number;
export declare const getTripleAxis: (rectangle: RectangleClient, isHorizontal: boolean) => TripleSnapAxis;
export declare function getNearestPointRectangle(snapRectangles: RectangleClient[], activeRectangle: RectangleClient): RectangleClient;
export declare const isSnapPoint: (axis: number, rectangle: RectangleClient, isHorizontal: boolean) => boolean;
export declare function drawPointSnapLines(board: PlaitBoard, activeRectangle: RectangleClient, snapRectangles: RectangleClient[], drawHorizontal?: boolean, drawVertical?: boolean, snapMiddle?: boolean): SVGGElement;
export declare function drawDashedLines(board: PlaitBoard, lines: [Point, Point][]): SVGGElement;
export declare function drawSolidLines(board: PlaitBoard, lines: Point[][]): SVGGElement;
export {};
