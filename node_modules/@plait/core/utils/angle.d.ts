import { PlaitBoard, PlaitElement, Point, RectangleClient } from '../interfaces';
export declare const rotatePoints: <T>(points: T, centerPoint: Point, angle?: number) => T;
export declare const getSelectionAngle: (elements: PlaitElement[]) => number;
export declare const hasSameAngle: (elements: PlaitElement[]) => boolean;
export declare const getRotatedBoundingRectangle: (rectanglesCornerPoints: [Point, Point, Point, Point][], angle: number) => RectangleClient;
export declare const getOffsetAfterRotate: (rectangle: RectangleClient, rotateCenterPoint: Point, angle: number) => {
    offsetX: number;
    offsetY: number;
};
export declare const rotatedDataPoints: (points: Point[], rotateCenterPoint: Point, angle: number) => Point[];
export declare const hasValidAngle: (node: PlaitElement) => boolean | 0 | undefined;
export declare const isValidAngle: (angle: undefined | number) => boolean | 0 | undefined;
export declare const rotatePointsByElement: <T>(points: T, element: PlaitElement) => T | null;
export declare const rotatePointsByAngle: (points: Point[], angle: number | undefined) => Point[] | null;
export declare const rotateAntiPointsByElement: <T>(board: PlaitBoard, points: T, element: PlaitElement, isToActive?: boolean) => T | null;
export declare const getRectangleByAngle: (rectangle: RectangleClient, angle: number) => RectangleClient;
export declare const isAxisChangedByAngle: (angle: number) => boolean;
export declare function degreesToRadians(d: number): number;
export declare function radiansToDegrees(r: number): number;
export declare function rotateElements(board: PlaitBoard, elements: PlaitElement[], angle: number): void;
export declare const normalizeAngle: (angle: number) => number;
export declare const getAngleBetweenPoints: (startPoint: Point, endPoint: Point, centerPoint: Point) => number;
export declare const getAngleByElement: (element: PlaitElement) => number | undefined;
export declare const setAngleForG: (g: SVGGElement, centerPoint: Point, angle: number) => void;
