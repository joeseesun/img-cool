import { PlaitPointerType } from './pointer';
import { ComponentType, PlaitElement } from './element';
import { PlaitPluginElementContext } from '../core/element/context';
import { PlaitHistory } from './history';
import { PlaitOperation } from './operation';
import { Selection } from './selection';
import { Viewport } from './viewport';
import { RoughSVG } from 'roughjs/bin/svg';
import { Point } from './point';
import { RectangleClient } from './rectangle-client';
import { PathRef, PathRefOptions } from './path-ref';
import { PlaitNode } from './node';
import { Path } from './path';
import { PlaitTheme, ThemeColor } from './theme';
import { ClipboardData, WritableClipboardContext, WritableClipboardOperationType } from '../utils';
import { ElementFlavour } from '../core/element/element-flavour';
import { PlaitBoardContext } from '../context';
export interface PlaitBoard {
    viewport: Viewport;
    children: PlaitElement[];
    theme: PlaitTheme;
    operations: PlaitOperation[];
    selection: Selection | null;
    pointer: PlaitPointerType | string;
    history: PlaitHistory;
    options: PlaitBoardOptions;
    undo: () => void;
    redo: () => void;
    apply: (operation: PlaitOperation) => void;
    onChange: () => void;
    afterChange: () => void;
    drawSelectionRectangle: () => SVGGElement | null;
    mousedown: (event: MouseEvent) => void;
    mousemove: (event: MouseEvent) => void;
    mouseleave: (event: MouseEvent) => void;
    mouseup: (event: MouseEvent) => void;
    globalMousemove: (event: MouseEvent) => void;
    globalMouseup: (event: MouseEvent) => void;
    keyDown: (event: KeyboardEvent) => void;
    globalKeyDown: (event: KeyboardEvent) => void;
    keyUp: (event: KeyboardEvent) => void;
    buildFragment: (clipboardContext: WritableClipboardContext | null, rectangle: RectangleClient | null, operationType: WritableClipboardOperationType, originData?: PlaitElement[]) => WritableClipboardContext | null;
    insertFragment: (clipboardData: ClipboardData | null, targetPoint: Point, operationType?: WritableClipboardOperationType) => void;
    deleteFragment: (data: PlaitElement[]) => void;
    getDeletedFragment: (data: PlaitElement[]) => PlaitElement[];
    getRelatedFragment: (data: PlaitElement[], originData?: PlaitElement[]) => PlaitElement[];
    dblClick: (event: MouseEvent) => void;
    normalizeElement: (context: PlaitPluginElementContext) => void;
    drawElement: (context: PlaitPluginElementContext) => ComponentType<ElementFlavour>;
    isRectangleHit: (element: PlaitElement, range: Selection) => boolean;
    isHit: (element: PlaitElement, point: Point, isStrict?: boolean) => boolean;
    isInsidePoint: (element: PlaitElement, point: Point) => boolean;
    getOneHitElement: (hitElements: PlaitElement[]) => PlaitElement;
    isRecursion: (element: PlaitElement) => boolean;
    isMovable: (element: PlaitElement) => boolean;
    getRectangle: (element: PlaitElement) => RectangleClient | null;
    isWithinSelection: (element: PlaitElement) => boolean;
    pathRef: (path: Path, options?: PathRefOptions) => PathRef;
    pathRefs: () => Set<PathRef>;
    applyTheme: (element: PlaitElement) => void;
    isAlign: (element: PlaitElement) => boolean;
    isImageBindingAllowed: (element: PlaitElement) => boolean;
    canAddToGroup: (element: PlaitElement) => boolean;
    canSetZIndex: (element: PlaitElement) => boolean;
    isExpanded: (element: PlaitElement) => boolean;
    pointerDown: (pointer: PointerEvent) => void;
    pointerMove: (pointer: PointerEvent) => void;
    pointerUp: (pointer: PointerEvent) => void;
    pointerCancel: (pointer: PointerEvent) => void;
    pointerOut: (pointer: PointerEvent) => void;
    pointerLeave: (pointer: PointerEvent) => void;
    globalPointerMove: (pointer: PointerEvent) => void;
    globalPointerUp: (pointer: PointerEvent) => void;
    drop: (event: DragEvent) => boolean;
}
export interface PlaitBoardOptions {
    readonly?: boolean;
    hideScrollbar?: boolean;
    disabledScrollOnNonFocus?: boolean;
    themeColors?: ThemeColor[];
}
export interface PlaitBoardMove {
    x: number;
    y: number;
}
export declare const PlaitBoard: {
    isBoard(value: any): value is PlaitBoard;
    isAlive(board: PlaitBoard): boolean;
    findPath(board: PlaitBoard, node: PlaitNode): Path;
    getHost(board: PlaitBoard): SVGSVGElement;
    getElementLowerHost(board: PlaitBoard): SVGSVGElement;
    getElementHost(board: PlaitBoard): SVGSVGElement;
    getElementUpperHost(board: PlaitBoard): SVGSVGElement;
    getElementTopHost(board: PlaitBoard): SVGSVGElement;
    getActiveHost(board: PlaitBoard): SVGSVGElement;
    getRoughSVG(board: PlaitBoard): RoughSVG;
    getBoardContainer(board: PlaitBoard): HTMLElement;
    getBoardContext(board: PlaitBoard): PlaitBoardContext;
    getRectangle(board: PlaitBoard): RectangleClient;
    getViewportContainer(board: PlaitBoard): HTMLElement;
    isFocus(board: PlaitBoard): boolean;
    isReadonly(board: PlaitBoard): boolean | undefined;
    hasBeenTextEditing(board: PlaitBoard): boolean;
    getPointer<T = PlaitPointerType>(board: PlaitBoard): T;
    isPointer<T = PlaitPointerType>(board: PlaitBoard, pointer: T): boolean;
    isInPointer<T = PlaitPointerType>(board: PlaitBoard, pointers: T[]): boolean;
    getMovingPointInBoard(board: PlaitBoard): Point | undefined;
    isMovingPointInBoard(board: PlaitBoard): boolean;
    getThemeColors<T extends ThemeColor = ThemeColor>(board: PlaitBoard): T[];
};
