import { PlaitNode } from './node';
import { Path } from './path';
import { Selection } from './selection';
import { PlaitTheme } from './theme';
import { Viewport } from './viewport';
export type InsertNodeOperation = {
    type: 'insert_node';
    path: Path;
    node: PlaitNode;
};
export type RemoveNodeOperation = {
    type: 'remove_node';
    path: Path;
    node: PlaitNode;
};
export type MoveNodeOperation = {
    type: 'move_node';
    path: Path;
    newPath: Path;
};
export type SetThemeOperation = {
    type: 'set_theme';
    properties: Partial<PlaitTheme>;
    newProperties: Partial<PlaitTheme>;
};
export type SetViewportOperation = {
    type: 'set_viewport';
    properties: Partial<Viewport>;
    newProperties: Partial<Viewport>;
};
export type SetSelectionOperation = {
    type: 'set_selection';
    properties: Selection | null;
    newProperties: Selection | null;
};
export type SetNodeOperation = {
    type: 'set_node';
    path: Path;
    properties: Partial<PlaitNode>;
    newProperties: Partial<PlaitNode>;
};
export type PlaitOperation = InsertNodeOperation | SetViewportOperation | SetSelectionOperation | SetNodeOperation | RemoveNodeOperation | MoveNodeOperation | SetThemeOperation;
export interface PlaitOperationInterface {
    inverse: (op: PlaitOperation) => PlaitOperation;
    isSetViewportOperation: (value: PlaitOperation) => boolean;
    isSetSelectionOperation: (value: PlaitOperation) => boolean;
    isSetThemeOperation: (value: PlaitOperation) => boolean;
}
export declare const isSetViewportOperation: (value: any) => value is SetViewportOperation;
export declare const isSetSelectionOperation: (value: any) => value is SetSelectionOperation;
export declare const isSetThemeOperation: (value: any) => value is SetThemeOperation;
export declare const inverse: (op: PlaitOperation) => PlaitOperation;
export declare const PlaitOperation: PlaitOperationInterface;
