import { Point } from './point';
export interface RectangleClient {
    x: number;
    y: number;
    width: number;
    height: number;
}
/**
 * [x, y] x,y between 0 and 1
 * represents a point in the rectangle
 */
export type PointOfRectangle = [number, number];
export declare const RectangleClient: {
    isHit: (origin: RectangleClient, target: RectangleClient) => boolean;
    isHitX: (origin: RectangleClient, target: RectangleClient) => boolean;
    isHitY: (origin: RectangleClient, target: RectangleClient) => boolean;
    getPoints(rectangle: RectangleClient): [Point, Point];
    getRectangleByCenterPoint(point: Point, width: number, height: number): RectangleClient;
    getRectangleByPoint(point: Point, width: number, height: number): RectangleClient;
    getRectangleByPoints(points: Point[] | Point[][]): RectangleClient;
    getCornerPointsByPoints(points: Point[]): [Point, Point, Point, Point];
    getOutlineRectangle: (rectangle: RectangleClient, offset: number) => {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    inflate: (rectangle: RectangleClient, delta: number) => {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    isEqual: (rectangle: RectangleClient, otherRectangle: RectangleClient) => boolean;
    getCornerPoints: (rectangle: RectangleClient) => [Point, Point, Point, Point];
    getCenterPoint: (rectangle: RectangleClient) => Point;
    getCenterPointByPoints: (points: Point[]) => Point;
    getEdgeCenterPoints: (rectangle: RectangleClient) => [Point, Point, Point, Point];
    getConnectionPoint: (rectangle: RectangleClient, point: PointOfRectangle) => Point;
    expand(rectangle: RectangleClient, left: number, top?: number, right?: number, bottom?: number): {
        x: number;
        y: number;
        width: number;
        height: number;
    };
    getGapCenter(rectangle1: RectangleClient, rectangle2: RectangleClient, isHorizontal: boolean): number;
    isPointInRectangle(rectangle: RectangleClient, point: Point): boolean;
    getBoundingRectangle(rectangles: RectangleClient[]): RectangleClient;
};
