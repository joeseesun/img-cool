import { PlaitElement } from './element';
import { PlaitBoard } from './board';
import { Path } from './path';
export type PlaitNode = PlaitElement;
export type Ancestor = PlaitBoard | PlaitElement;
export interface NodeParentsOptions {
    reverse?: boolean;
}
export declare const PlaitNode: {
    parent: (board: PlaitBoard, path: Path) => PlaitElement;
    /**
     * Return a generator of all the ancestor nodes above a specific path.
     *
     * By default the order is top-down, from highest to lowest ancestor in
     * the tree, but you can pass the `reverse: true` option to go bottom-up.
     */
    parents(root: PlaitBoard, path: Path, options?: NodeParentsOptions): Generator<PlaitNode, void, undefined>;
    get<T extends PlaitNode = PlaitElement>(root: PlaitBoard, path: Path): T;
    last(board: PlaitBoard, path: Path): PlaitElement;
    first(board: PlaitBoard, path: Path): PlaitElement;
};
