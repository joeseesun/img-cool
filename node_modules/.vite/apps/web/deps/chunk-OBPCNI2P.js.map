{
  "version": 3,
  "sources": ["../../../../slate/src/interfaces/path-ref.ts", "../../../../slate/src/interfaces/point-ref.ts", "../../../../slate/src/interfaces/range-ref.ts", "../../../../slate/src/utils/weak-maps.ts", "../../../../slate/src/interfaces/path.ts", "../../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/typeof.js", "../../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/toPrimitive.js", "../../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/toPropertyKey.js", "../../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/defineProperty.js", "../../../../slate/src/interfaces/transforms/general.ts", "../../../../slate/src/interfaces/transforms/node.ts", "../../../../slate/src/interfaces/transforms/selection.ts", "../../../../slate/src/utils/is-object.ts", "../../../../slate/src/utils/deep-equal.ts", "../../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js", "../../../../../../../../.yarn/berry/cache/@babel-runtime-npm-7.23.2-d013d6cf7e-10.zip/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js", "../../../../slate/src/interfaces/range.ts", "../../../../slate/src/interfaces/element.ts", "../../../../slate/src/interfaces/node.ts", "../../../../slate/src/interfaces/operation.ts", "../../../../slate/src/editor/is-editor.ts", "../../../../slate/src/interfaces/editor.ts", "../../../../slate/src/interfaces/location.ts", "../../../../slate/src/interfaces/point.ts", "../../../../slate/src/interfaces/scrubber.ts", "../../../../slate/src/interfaces/text.ts", "../../../../slate/src/utils/get-default-insert-location.ts", "../../../../slate/src/utils/match-path.ts", "../../../../slate/src/utils/string.ts", "../../../../slate/src/interfaces/transforms/text.ts", "../../../../slate/src/interfaces/transforms/index.ts", "../../../../slate/src/core/batch-dirty-paths.ts", "../../../../slate/src/core/update-dirty-paths.ts", "../../../../slate/src/core/apply.ts", "../../../../slate/src/core/get-dirty-paths.ts", "../../../../slate/src/core/get-fragment.ts", "../../../../slate/src/core/normalize-node.ts", "../../../../slate/src/core/should-normalize.ts", "../../../../slate/src/editor/above.ts", "../../../../slate/src/editor/add-mark.ts", "../../../../slate/src/editor/after.ts", "../../../../slate/src/editor/before.ts", "../../../../slate/src/editor/delete-backward.ts", "../../../../slate/src/editor/delete-forward.ts", "../../../../slate/src/editor/delete-fragment.ts", "../../../../slate/src/editor/edges.ts", "../../../../slate/src/editor/element-read-only.ts", "../../../../slate/src/editor/end.ts", "../../../../slate/src/editor/first.ts", "../../../../slate/src/editor/fragment.ts", "../../../../slate/src/editor/get-void.ts", "../../../../slate/src/editor/has-blocks.ts", "../../../../slate/src/editor/has-inlines.ts", "../../../../slate/src/editor/has-path.ts", "../../../../slate/src/editor/has-texts.ts", "../../../../slate/src/editor/insert-break.ts", "../../../../slate/src/editor/insert-node.ts", "../../../../slate/src/editor/insert-soft-break.ts", "../../../../slate/src/editor/insert-text.ts", "../../../../slate/src/editor/is-block.ts", "../../../../slate/src/editor/is-edge.ts", "../../../../slate/src/editor/is-empty.ts", "../../../../slate/src/editor/is-end.ts", "../../../../slate/src/editor/is-normalizing.ts", "../../../../slate/src/editor/is-start.ts", "../../../../slate/src/editor/last.ts", "../../../../slate/src/editor/leaf.ts", "../../../../slate/src/editor/levels.ts", "../../../../slate/src/editor/marks.ts", "../../../../slate/src/editor/next.ts", "../../../../slate/src/editor/node.ts", "../../../../slate/src/editor/nodes.ts", "../../../../slate/src/editor/normalize.ts", "../../../../slate/src/editor/parent.ts", "../../../../slate/src/editor/path-ref.ts", "../../../../slate/src/editor/path-refs.ts", "../../../../slate/src/editor/path.ts", "../../../../slate/src/editor/point-ref.ts", "../../../../slate/src/editor/point-refs.ts", "../../../../slate/src/editor/point.ts", "../../../../slate/src/editor/positions.ts", "../../../../slate/src/editor/previous.ts", "../../../../slate/src/editor/range-ref.ts", "../../../../slate/src/editor/range-refs.ts", "../../../../slate/src/editor/range.ts", "../../../../slate/src/editor/remove-mark.ts", "../../../../slate/src/editor/set-normalizing.ts", "../../../../slate/src/editor/start.ts", "../../../../slate/src/editor/string.ts", "../../../../slate/src/editor/unhang-range.ts", "../../../../slate/src/editor/without-normalizing.ts", "../../../../slate/src/editor/should-merge-nodes-remove-prev-node.ts", "../../../../slate/src/transforms-text/delete-text.ts", "../../../../slate/src/transforms-text/insert-fragment.ts", "../../../../slate/src/transforms-selection/collapse.ts", "../../../../slate/src/transforms-selection/deselect.ts", "../../../../slate/src/transforms-selection/move.ts", "../../../../slate/src/transforms-selection/select.ts", "../../../../slate/src/transforms-selection/set-point.ts", "../../../../slate/src/transforms-selection/set-selection.ts", "../../../../slate/src/transforms-node/insert-nodes.ts", "../../../../slate/src/transforms-node/lift-nodes.ts", "../../../../slate/src/transforms-node/merge-nodes.ts", "../../../../slate/src/transforms-node/move-nodes.ts", "../../../../slate/src/transforms-node/remove-nodes.ts", "../../../../slate/src/transforms-node/set-nodes.ts", "../../../../slate/src/transforms-node/split-nodes.ts", "../../../../slate/src/transforms-node/unset-nodes.ts", "../../../../slate/src/transforms-node/unwrap-nodes.ts", "../../../../slate/src/transforms-node/wrap-nodes.ts", "../../../../slate/src/create-editor.ts"],
  "sourcesContent": ["import { Operation, Path } from '..'\n\n/**\n * `PathRef` objects keep a specific path in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date path value.\n */\n\nexport interface PathRef {\n  current: Path | null\n  affinity: 'forward' | 'backward' | null\n  unref(): Path | null\n}\n\nexport interface PathRefInterface {\n  /**\n   * Transform the path ref's current value by an operation.\n   */\n  transform: (ref: PathRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const PathRef: PathRefInterface = {\n  transform(ref: PathRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Path.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n", "import { Operation, Point } from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `PointRef` objects keep a specific point in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date point value.\n */\n\nexport interface PointRef {\n  current: Point | null\n  affinity: TextDirection | null\n  unref(): Point | null\n}\n\nexport interface PointRefInterface {\n  /**\n   * Transform the point ref's current value by an operation.\n   */\n  transform: (ref: PointRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const PointRef: PointRefInterface = {\n  transform(ref: PointRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const point = Point.transform(current, op, { affinity })\n    ref.current = point\n\n    if (point == null) {\n      ref.unref()\n    }\n  },\n}\n", "import { Operation, Range } from '..'\n\n/**\n * `RangeRef` objects keep a specific range in a document synced over time as new\n * operations are applied to the editor. You can access their `current` property\n * at any time for the up-to-date range value.\n */\n\nexport interface RangeRef {\n  current: Range | null\n  affinity: 'forward' | 'backward' | 'outward' | 'inward' | null\n  unref(): Range | null\n}\n\nexport interface RangeRefInterface {\n  /**\n   * Transform the range ref's current value by an operation.\n   */\n  transform: (ref: RangeRef, op: Operation) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const RangeRef: RangeRefInterface = {\n  transform(ref: RangeRef, op: Operation): void {\n    const { current, affinity } = ref\n\n    if (current == null) {\n      return\n    }\n\n    const path = Range.transform(current, op, { affinity })\n    ref.current = path\n\n    if (path == null) {\n      ref.unref()\n    }\n  },\n}\n", "import { Editor, Path, PathRef, PointRef, RangeRef } from '..'\n\nexport const DIRTY_PATHS: WeakMap<Editor, Path[]> = new WeakMap()\nexport const DIRTY_PATH_KEYS: WeakMap<Editor, Set<string>> = new WeakMap()\nexport const FLUSHING: WeakMap<Editor, boolean> = new WeakMap()\nexport const NORMALIZING: WeakMap<Editor, boolean> = new WeakMap()\nexport const PATH_REFS: WeakMap<Editor, Set<PathRef>> = new WeakMap()\nexport const POINT_REFS: WeakMap<Editor, Set<PointRef>> = new WeakMap()\nexport const RANGE_REFS: WeakMap<Editor, Set<RangeRef>> = new WeakMap()\n", "import {\n  InsertNodeOperation,\n  MergeNodeOperation,\n  MoveNodeOperation,\n  Operation,\n  RemoveNodeOperation,\n  SplitNodeOperation,\n} from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `Path` arrays are a list of indexes that describe a node's exact position in\n * a Slate node tree. Although they are usually relative to the root `Editor`\n * object, they can be relative to any `Node` object.\n */\n\nexport type Path = number[]\n\nexport interface PathAncestorsOptions {\n  reverse?: boolean\n}\n\nexport interface PathLevelsOptions {\n  reverse?: boolean\n}\n\nexport interface PathTransformOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface PathInterface {\n  /**\n   * Get a list of ancestor paths for a given path.\n   *\n   * The paths are sorted from shallowest to deepest ancestor. However, if the\n   * `reverse: true` option is passed, they are reversed.\n   */\n  ancestors: (path: Path, options?: PathAncestorsOptions) => Path[]\n\n  /**\n   * Get the common ancestor path of two paths.\n   */\n  common: (path: Path, another: Path) => Path\n\n  /**\n   * Compare a path to another, returning an integer indicating whether the path\n   * was before, at, or after the other.\n   *\n   * Note: Two paths of unequal length can still receive a `0` result if one is\n   * directly above or below the other. If you want exact matching, use\n   * [[Path.equals]] instead.\n   */\n  compare: (path: Path, another: Path) => -1 | 0 | 1\n\n  /**\n   * Check if a path ends after one of the indexes in another.\n   */\n  endsAfter: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path ends at one of the indexes in another.\n   */\n  endsAt: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path ends before one of the indexes in another.\n   */\n  endsBefore: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is exactly equal to another.\n   */\n  equals: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if the path of previous sibling node exists\n   */\n  hasPrevious: (path: Path) => boolean\n\n  /**\n   * Check if a path is after another.\n   */\n  isAfter: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is an ancestor of another.\n   */\n  isAncestor: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is before another.\n   */\n  isBefore: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is a child of another.\n   */\n  isChild: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is equal to or an ancestor of another.\n   */\n  isCommon: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is a descendant of another.\n   */\n  isDescendant: (path: Path, another: Path) => boolean\n\n  /**\n   * Check if a path is the parent of another.\n   */\n  isParent: (path: Path, another: Path) => boolean\n\n  /**\n   * Check is a value implements the `Path` interface.\n   */\n  isPath: (value: any) => value is Path\n\n  /**\n   * Check if a path is a sibling of another.\n   */\n  isSibling: (path: Path, another: Path) => boolean\n\n  /**\n   * Get a list of paths at every level down to a path. Note: this is the same\n   * as `Path.ancestors`, but including the path itself.\n   *\n   * The paths are sorted from shallowest to deepest. However, if the `reverse:\n   * true` option is passed, they are reversed.\n   */\n  levels: (path: Path, options?: PathLevelsOptions) => Path[]\n\n  /**\n   * Given a path, get the path to the next sibling node.\n   */\n  next: (path: Path) => Path\n\n  /**\n   * Returns whether this operation can affect paths or not. Used as an\n   * optimization when updating dirty paths during normalization\n   *\n   * NOTE: This *must* be kept in sync with the implementation of 'transform'\n   * below\n   */\n  operationCanTransformPath: (\n    operation: Operation\n  ) => operation is\n    | InsertNodeOperation\n    | RemoveNodeOperation\n    | MergeNodeOperation\n    | SplitNodeOperation\n    | MoveNodeOperation\n\n  /**\n   * Given a path, return a new path referring to the parent node above it.\n   */\n  parent: (path: Path) => Path\n\n  /**\n   * Given a path, get the path to the previous sibling node.\n   */\n  previous: (path: Path) => Path\n\n  /**\n   * Get a path relative to an ancestor.\n   */\n  relative: (path: Path, ancestor: Path) => Path\n\n  /**\n   * Transform a path by an operation.\n   */\n  transform: (\n    path: Path,\n    operation: Operation,\n    options?: PathTransformOptions\n  ) => Path | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Path: PathInterface = {\n  ancestors(path: Path, options: PathAncestorsOptions = {}): Path[] {\n    const { reverse = false } = options\n    let paths = Path.levels(path, options)\n\n    if (reverse) {\n      paths = paths.slice(1)\n    } else {\n      paths = paths.slice(0, -1)\n    }\n\n    return paths\n  },\n\n  common(path: Path, another: Path): Path {\n    const common: Path = []\n\n    for (let i = 0; i < path.length && i < another.length; i++) {\n      const av = path[i]\n      const bv = another[i]\n\n      if (av !== bv) {\n        break\n      }\n\n      common.push(av)\n    }\n\n    return common\n  },\n\n  compare(path: Path, another: Path): -1 | 0 | 1 {\n    const min = Math.min(path.length, another.length)\n\n    for (let i = 0; i < min; i++) {\n      if (path[i] < another[i]) return -1\n      if (path[i] > another[i]) return 1\n    }\n\n    return 0\n  },\n\n  endsAfter(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av > bv\n  },\n\n  endsAt(path: Path, another: Path): boolean {\n    const i = path.length\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    return Path.equals(as, bs)\n  },\n\n  endsBefore(path: Path, another: Path): boolean {\n    const i = path.length - 1\n    const as = path.slice(0, i)\n    const bs = another.slice(0, i)\n    const av = path[i]\n    const bv = another[i]\n    return Path.equals(as, bs) && av < bv\n  },\n\n  equals(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length && path.every((n, i) => n === another[i])\n    )\n  },\n\n  hasPrevious(path: Path): boolean {\n    return path[path.length - 1] > 0\n  },\n\n  isAfter(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === 1\n  },\n\n  isAncestor(path: Path, another: Path): boolean {\n    return path.length < another.length && Path.compare(path, another) === 0\n  },\n\n  isBefore(path: Path, another: Path): boolean {\n    return Path.compare(path, another) === -1\n  },\n\n  isChild(path: Path, another: Path): boolean {\n    return (\n      path.length === another.length + 1 && Path.compare(path, another) === 0\n    )\n  },\n\n  isCommon(path: Path, another: Path): boolean {\n    return path.length <= another.length && Path.compare(path, another) === 0\n  },\n\n  isDescendant(path: Path, another: Path): boolean {\n    return path.length > another.length && Path.compare(path, another) === 0\n  },\n\n  isParent(path: Path, another: Path): boolean {\n    return (\n      path.length + 1 === another.length && Path.compare(path, another) === 0\n    )\n  },\n\n  isPath(value: any): value is Path {\n    return (\n      Array.isArray(value) &&\n      (value.length === 0 || typeof value[0] === 'number')\n    )\n  },\n\n  isSibling(path: Path, another: Path): boolean {\n    if (path.length !== another.length) {\n      return false\n    }\n\n    const as = path.slice(0, -1)\n    const bs = another.slice(0, -1)\n    const al = path[path.length - 1]\n    const bl = another[another.length - 1]\n    return al !== bl && Path.equals(as, bs)\n  },\n\n  levels(path: Path, options: PathLevelsOptions = {}): Path[] {\n    const { reverse = false } = options\n    const list: Path[] = []\n\n    for (let i = 0; i <= path.length; i++) {\n      list.push(path.slice(0, i))\n    }\n\n    if (reverse) {\n      list.reverse()\n    }\n\n    return list\n  },\n\n  next(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the next path of a root path [${path}], because it has no next index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n    return path.slice(0, -1).concat(last + 1)\n  },\n\n  operationCanTransformPath(\n    operation: Operation\n  ): operation is\n    | InsertNodeOperation\n    | RemoveNodeOperation\n    | MergeNodeOperation\n    | SplitNodeOperation\n    | MoveNodeOperation {\n    switch (operation.type) {\n      case 'insert_node':\n      case 'remove_node':\n      case 'merge_node':\n      case 'split_node':\n      case 'move_node':\n        return true\n      default:\n        return false\n    }\n  },\n\n  parent(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(`Cannot get the parent path of the root path [${path}].`)\n    }\n\n    return path.slice(0, -1)\n  },\n\n  previous(path: Path): Path {\n    if (path.length === 0) {\n      throw new Error(\n        `Cannot get the previous path of a root path [${path}], because it has no previous index.`\n      )\n    }\n\n    const last = path[path.length - 1]\n\n    if (last <= 0) {\n      throw new Error(\n        `Cannot get the previous path of a first child path [${path}] because it would result in a negative index.`\n      )\n    }\n\n    return path.slice(0, -1).concat(last - 1)\n  },\n\n  relative(path: Path, ancestor: Path): Path {\n    if (!Path.isAncestor(ancestor, path) && !Path.equals(path, ancestor)) {\n      throw new Error(\n        `Cannot get the relative path of [${path}] inside ancestor [${ancestor}], because it is not above or equal to the path.`\n      )\n    }\n\n    return path.slice(ancestor.length)\n  },\n\n  transform(\n    path: Path | null,\n    operation: Operation,\n    options: PathTransformOptions = {}\n  ): Path | null {\n    if (!path) return null\n\n    // PERF: use destructing instead of immer\n    const p = [...path]\n    const { affinity = 'forward' } = options\n\n    // PERF: Exit early if the operation is guaranteed not to have an effect.\n    if (path.length === 0) {\n      return p\n    }\n\n    switch (operation.type) {\n      case 'insert_node': {\n        const { path: op } = operation\n\n        if (\n          Path.equals(op, p) ||\n          Path.endsBefore(op, p) ||\n          Path.isAncestor(op, p)\n        ) {\n          p[op.length - 1] += 1\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        const { path: op } = operation\n\n        if (Path.equals(op, p) || Path.isAncestor(op, p)) {\n          return null\n        } else if (Path.endsBefore(op, p)) {\n          p[op.length - 1] -= 1\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        const { path: op, position } = operation\n\n        if (Path.equals(op, p) || Path.endsBefore(op, p)) {\n          p[op.length - 1] -= 1\n        } else if (Path.isAncestor(op, p)) {\n          p[op.length - 1] -= 1\n          p[op.length] += position\n        }\n\n        break\n      }\n\n      case 'split_node': {\n        const { path: op, position } = operation\n\n        if (Path.equals(op, p)) {\n          if (affinity === 'forward') {\n            p[p.length - 1] += 1\n          } else if (affinity === 'backward') {\n            // Nothing, because it still refers to the right path.\n          } else {\n            return null\n          }\n        } else if (Path.endsBefore(op, p)) {\n          p[op.length - 1] += 1\n        } else if (Path.isAncestor(op, p) && path[op.length] >= position) {\n          p[op.length - 1] += 1\n          p[op.length] -= position\n        }\n\n        break\n      }\n\n      case 'move_node': {\n        const { path: op, newPath: onp } = operation\n\n        // If the old and new path are the same, it's a no-op.\n        if (Path.equals(op, onp)) {\n          return p\n        }\n\n        if (Path.isAncestor(op, p) || Path.equals(op, p)) {\n          const copy = onp.slice()\n\n          if (Path.endsBefore(op, onp) && op.length < onp.length) {\n            copy[op.length - 1] -= 1\n          }\n\n          return copy.concat(p.slice(op.length))\n        } else if (\n          Path.isSibling(op, onp) &&\n          (Path.isAncestor(onp, p) || Path.equals(onp, p))\n        ) {\n          if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          } else {\n            p[op.length - 1] += 1\n          }\n        } else if (\n          Path.endsBefore(onp, p) ||\n          Path.equals(onp, p) ||\n          Path.isAncestor(onp, p)\n        ) {\n          if (Path.endsBefore(op, p)) {\n            p[op.length - 1] -= 1\n          }\n\n          p[onp.length - 1] += 1\n        } else if (Path.endsBefore(op, p)) {\n          if (Path.equals(onp, p)) {\n            p[onp.length - 1] += 1\n          }\n\n          p[op.length - 1] -= 1\n        }\n\n        break\n      }\n    }\n\n    return p\n  },\n}\n", "export default function _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}", "import _typeof from \"./typeof.js\";\nexport default function _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}", "import _typeof from \"./typeof.js\";\nimport toPrimitive from \"./toPrimitive.js\";\nexport default function _toPropertyKey(arg) {\n  var key = toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}", "import toPropertyKey from \"./toPropertyKey.js\";\nexport default function _defineProperty(obj, key, value) {\n  key = toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}", "import {\n  Ancestor,\n  Descendant,\n  Editor,\n  Element,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  Point,\n  Range,\n  Scrubber,\n  Selection,\n  Text,\n} from '../../index'\n\nexport interface GeneralTransforms {\n  /**\n   * Transform the editor by an operation.\n   */\n  transform: (editor: Editor, op: Operation) => void\n}\n\nconst insertChildren = <T>(xs: T[], index: number, ...newValues: T[]) => [\n  ...xs.slice(0, index),\n  ...newValues,\n  ...xs.slice(index),\n]\n\nconst replaceChildren = <T>(\n  xs: T[],\n  index: number,\n  removeCount: number,\n  ...newValues: T[]\n) => [...xs.slice(0, index), ...newValues, ...xs.slice(index + removeCount)]\n\nconst removeChildren = replaceChildren\n\n/**\n * Replace a descendant with a new node, replacing all ancestors\n */\nconst modifyDescendant = <N extends Descendant>(\n  editor: Editor,\n  path: Path,\n  f: (node: N) => N\n) => {\n  if (path.length === 0) {\n    throw new Error('Cannot modify the editor')\n  }\n\n  const node = Node.get(editor, path) as N\n  const slicedPath = path.slice()\n  let modifiedNode: Node = f(node)\n\n  while (slicedPath.length > 1) {\n    const index = slicedPath.pop()!\n    const ancestorNode = Node.get(editor, slicedPath) as Ancestor\n\n    modifiedNode = {\n      ...ancestorNode,\n      children: replaceChildren(ancestorNode.children, index, 1, modifiedNode),\n    }\n  }\n\n  const index = slicedPath.pop()!\n  editor.children = replaceChildren(editor.children, index, 1, modifiedNode)\n}\n\n/**\n * Replace the children of a node, replacing all ancestors\n */\nconst modifyChildren = (\n  editor: Editor,\n  path: Path,\n  f: (children: Descendant[]) => Descendant[]\n) => {\n  if (path.length === 0) {\n    editor.children = f(editor.children)\n  } else {\n    modifyDescendant<Element>(editor, path, node => {\n      if (Text.isText(node)) {\n        throw new Error(\n          `Cannot get the element at path [${path}] because it refers to a leaf node: ${Scrubber.stringify(\n            node\n          )}`\n        )\n      }\n\n      return { ...node, children: f(node.children) }\n    })\n  }\n}\n\n/**\n * Replace a leaf, replacing all ancestors\n */\nconst modifyLeaf = (editor: Editor, path: Path, f: (leaf: Text) => Text) =>\n  modifyDescendant(editor, path, node => {\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return f(node)\n  })\n\n// eslint-disable-next-line no-redeclare\nexport const GeneralTransforms: GeneralTransforms = {\n  transform(editor: Editor, op: Operation): void {\n    let transformSelection = false\n\n    switch (op.type) {\n      case 'insert_node': {\n        const { path, node } = op\n\n        modifyChildren(editor, Path.parent(path), children => {\n          const index = path[path.length - 1]\n\n          if (index > children.length) {\n            throw new Error(\n              `Cannot apply an \"insert_node\" operation at path [${path}] because the destination is past the end of the node.`\n            )\n          }\n\n          return insertChildren(children, index, node)\n        })\n\n        transformSelection = true\n        break\n      }\n\n      case 'insert_text': {\n        const { path, offset, text } = op\n        if (text.length === 0) break\n\n        modifyLeaf(editor, path, node => {\n          const before = node.text.slice(0, offset)\n          const after = node.text.slice(offset)\n\n          return {\n            ...node,\n            text: before + text + after,\n          }\n        })\n\n        transformSelection = true\n        break\n      }\n\n      case 'merge_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n        const prevPath = Path.previous(path)\n        const prevIndex = prevPath[prevPath.length - 1]\n\n        modifyChildren(editor, Path.parent(path), children => {\n          const node = children[index]\n          const prev = children[prevIndex]\n          let newNode: Descendant\n\n          if (Text.isText(node) && Text.isText(prev)) {\n            newNode = { ...prev, text: prev.text + node.text }\n          } else if (!Text.isText(node) && !Text.isText(prev)) {\n            newNode = { ...prev, children: prev.children.concat(node.children) }\n          } else {\n            throw new Error(\n              `Cannot apply a \"merge_node\" operation at path [${path}] to nodes of different interfaces: ${Scrubber.stringify(\n                node\n              )} ${Scrubber.stringify(prev)}`\n            )\n          }\n\n          return replaceChildren(children, prevIndex, 2, newNode)\n        })\n\n        transformSelection = true\n        break\n      }\n\n      case 'move_node': {\n        const { path, newPath } = op\n        const index = path[path.length - 1]\n\n        if (Path.isAncestor(path, newPath)) {\n          throw new Error(\n            `Cannot move a path [${path}] to new path [${newPath}] because the destination is inside itself.`\n          )\n        }\n\n        const node = Node.get(editor, path)\n\n        modifyChildren(editor, Path.parent(path), children =>\n          removeChildren(children, index, 1)\n        )\n\n        // This is tricky, but since the `path` and `newPath` both refer to\n        // the same snapshot in time, there's a mismatch. After either\n        // removing the original position, the second step's path can be out\n        // of date. So instead of using the `op.newPath` directly, we\n        // transform `op.path` to ascertain what the `newPath` would be after\n        // the operation was applied.\n        const truePath = Path.transform(path, op)!\n        const newIndex = truePath[truePath.length - 1]\n\n        modifyChildren(editor, Path.parent(truePath), children =>\n          insertChildren(children, newIndex, node)\n        )\n\n        transformSelection = true\n        break\n      }\n\n      case 'remove_node': {\n        const { path } = op\n        const index = path[path.length - 1]\n\n        modifyChildren(editor, Path.parent(path), children =>\n          removeChildren(children, index, 1)\n        )\n\n        // Transform all the points in the value, but if the point was in the\n        // node that was removed we need to update the range or remove it.\n        if (editor.selection) {\n          let selection: Selection = { ...editor.selection }\n\n          for (const [point, key] of Range.points(selection)) {\n            const result = Point.transform(point, op)\n\n            if (selection != null && result != null) {\n              selection[key] = result\n            } else {\n              let prev: NodeEntry<Text> | undefined\n              let next: NodeEntry<Text> | undefined\n\n              for (const [n, p] of Node.texts(editor)) {\n                if (Path.compare(p, path) === -1) {\n                  prev = [n, p]\n                } else {\n                  next = [n, p]\n                  break\n                }\n              }\n\n              let preferNext = false\n              if (prev && next) {\n                if (Path.equals(next[1], path)) {\n                  preferNext = !Path.hasPrevious(next[1])\n                } else {\n                  preferNext =\n                    Path.common(prev[1], path).length <\n                    Path.common(next[1], path).length\n                }\n              }\n\n              if (prev && !preferNext) {\n                selection![key] = { path: prev[1], offset: prev[0].text.length }\n              } else if (next) {\n                selection![key] = { path: next[1], offset: 0 }\n              } else {\n                selection = null\n              }\n            }\n          }\n\n          editor.selection = selection\n        }\n\n        break\n      }\n\n      case 'remove_text': {\n        const { path, offset, text } = op\n        if (text.length === 0) break\n\n        modifyLeaf(editor, path, node => {\n          const before = node.text.slice(0, offset)\n          const after = node.text.slice(offset + text.length)\n\n          return {\n            ...node,\n            text: before + after,\n          }\n        })\n\n        transformSelection = true\n        break\n      }\n\n      case 'set_node': {\n        const { path, properties, newProperties } = op\n\n        if (path.length === 0) {\n          throw new Error(`Cannot set properties on the root node!`)\n        }\n\n        modifyDescendant(editor, path, node => {\n          const newNode = { ...node }\n\n          for (const key in newProperties) {\n            if (key === 'children' || key === 'text') {\n              throw new Error(`Cannot set the \"${key}\" property of nodes!`)\n            }\n\n            const value = newProperties[<keyof Node>key]\n\n            if (value == null) {\n              delete newNode[<keyof Node>key]\n            } else {\n              newNode[<keyof Node>key] = value\n            }\n          }\n\n          // properties that were previously defined, but are now missing, must be deleted\n          for (const key in properties) {\n            if (!newProperties.hasOwnProperty(key)) {\n              delete newNode[<keyof Node>key]\n            }\n          }\n\n          return newNode\n        })\n\n        break\n      }\n\n      case 'set_selection': {\n        const { newProperties } = op\n\n        if (newProperties == null) {\n          editor.selection = null\n          break\n        }\n\n        if (editor.selection == null) {\n          if (!Range.isRange(newProperties)) {\n            throw new Error(\n              `Cannot apply an incomplete \"set_selection\" operation properties ${Scrubber.stringify(\n                newProperties\n              )} when there is no current selection.`\n            )\n          }\n\n          editor.selection = { ...newProperties }\n          break\n        }\n\n        const selection = { ...editor.selection }\n\n        for (const key in newProperties) {\n          const value = newProperties[<keyof Range>key]\n\n          if (value == null) {\n            if (key === 'anchor' || key === 'focus') {\n              throw new Error(`Cannot remove the \"${key}\" selection property`)\n            }\n\n            delete selection[<keyof Range>key]\n          } else {\n            selection[<keyof Range>key] = value\n          }\n        }\n\n        editor.selection = selection\n\n        break\n      }\n\n      case 'split_node': {\n        const { path, position, properties } = op\n        const index = path[path.length - 1]\n\n        if (path.length === 0) {\n          throw new Error(\n            `Cannot apply a \"split_node\" operation at path [${path}] because the root node cannot be split.`\n          )\n        }\n\n        modifyChildren(editor, Path.parent(path), children => {\n          const node = children[index]\n          let newNode: Descendant\n          let nextNode: Descendant\n\n          if (Text.isText(node)) {\n            const before = node.text.slice(0, position)\n            const after = node.text.slice(position)\n            newNode = {\n              ...node,\n              text: before,\n            }\n            nextNode = {\n              ...(properties as Partial<Text>),\n              text: after,\n            }\n          } else {\n            const before = node.children.slice(0, position)\n            const after = node.children.slice(position)\n            newNode = {\n              ...node,\n              children: before,\n            }\n            nextNode = {\n              ...(properties as Partial<Element>),\n              children: after,\n            }\n          }\n\n          return replaceChildren(children, index, 1, newNode, nextNode)\n        })\n\n        transformSelection = true\n        break\n      }\n    }\n\n    if (transformSelection && editor.selection) {\n      const selection = { ...editor.selection }\n\n      for (const [point, key] of Range.points(selection)) {\n        selection[key] = Point.transform(point, op)!\n      }\n\n      editor.selection = selection\n    }\n  },\n}\n", "import { Editor, Element, Location, Node, Path } from '../../index'\nimport { NodeMatch, PropsCompare, PropsMerge } from '../editor'\nimport { MaximizeMode, RangeMode } from '../../types/types'\n\nexport interface NodeInsertNodesOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: RangeMode\n  hanging?: boolean\n  select?: boolean\n  voids?: boolean\n  batchDirty?: boolean\n}\n\nexport interface NodeTransforms {\n  /**\n   * Insert nodes in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertNodes: <T extends Node>(\n    editor: Editor,\n    nodes: Node | Node[],\n    options?: NodeInsertNodesOptions<T>\n  ) => void\n\n  /**\n   * Lift nodes at a specific location upwards in the document tree, splitting\n   * their parent in two if necessary.\n   */\n  liftNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Merge a node at a location with the previous node of the same depth,\n   * removing any empty containing nodes after the merge if necessary.\n   */\n  mergeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Move the nodes at a location to a new location.\n   */\n  moveNodes: <T extends Node>(\n    editor: Editor,\n    options: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      to: Path\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Remove the nodes at a specific location in the document.\n   */\n  removeNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      hanging?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Set new properties on the nodes at a location.\n   */\n  setNodes: <T extends Node>(\n    editor: Editor,\n    props: Partial<T>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n      compare?: PropsCompare\n      merge?: PropsMerge\n    }\n  ) => void\n\n  /**\n   * Split the nodes at a specific location.\n   */\n  splitNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: RangeMode\n      always?: boolean\n      height?: number\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Unset properties on the nodes at a location.\n   */\n  unsetNodes: <T extends Node>(\n    editor: Editor,\n    props: string | string[],\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Unwrap the nodes at a location from a parent node, splitting the parent if\n   * necessary to ensure that only the content in the range is unwrapped.\n   */\n  unwrapNodes: <T extends Node>(\n    editor: Editor,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n\n  /**\n   * Wrap the nodes at a location in a new container node, splitting the edges\n   * of the range first to ensure that only the content in the range is wrapped.\n   */\n  wrapNodes: <T extends Node>(\n    editor: Editor,\n    element: Element,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      split?: boolean\n      voids?: boolean\n    }\n  ) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const NodeTransforms: NodeTransforms = {\n  insertNodes(editor, nodes, options) {\n    editor.insertNodes(nodes, options)\n  },\n  liftNodes(editor, options) {\n    editor.liftNodes(options)\n  },\n  mergeNodes(editor, options) {\n    editor.mergeNodes(options)\n  },\n  moveNodes(editor, options) {\n    editor.moveNodes(options)\n  },\n  removeNodes(editor, options) {\n    editor.removeNodes(options)\n  },\n  setNodes(editor, props, options) {\n    editor.setNodes(props, options)\n  },\n  splitNodes(editor, options) {\n    editor.splitNodes(options)\n  },\n  unsetNodes(editor, props, options) {\n    editor.unsetNodes(props, options)\n  },\n  unwrapNodes(editor, options) {\n    editor.unwrapNodes(options)\n  },\n  wrapNodes(editor, element, options) {\n    editor.wrapNodes(element, options)\n  },\n}\n", "import { Editor, Location, Point, Range } from '../../index'\nimport { MoveUnit, SelectionEdge } from '../../types/types'\n\nexport interface SelectionCollapseOptions {\n  edge?: SelectionEdge\n}\n\nexport interface SelectionMoveOptions {\n  distance?: number\n  unit?: MoveUnit\n  reverse?: boolean\n  edge?: SelectionEdge\n}\n\nexport interface SelectionSetPointOptions {\n  edge?: SelectionEdge\n}\n\nexport interface SelectionTransforms {\n  /**\n   * Collapse the selection.\n   */\n  collapse: (editor: Editor, options?: SelectionCollapseOptions) => void\n\n  /**\n   * Unset the selection.\n   */\n  deselect: (editor: Editor) => void\n\n  /**\n   * Move the selection's point forward or backward.\n   */\n  move: (editor: Editor, options?: SelectionMoveOptions) => void\n\n  /**\n   * Set the selection to a new value.\n   */\n  select: (editor: Editor, target: Location) => void\n\n  /**\n   * Set new properties on one of the selection's points.\n   */\n  setPoint: (\n    editor: Editor,\n    props: Partial<Point>,\n    options?: SelectionSetPointOptions\n  ) => void\n\n  /**\n   * Set new properties on the selection.\n   */\n  setSelection: (editor: Editor, props: Partial<Range>) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const SelectionTransforms: SelectionTransforms = {\n  collapse(editor, options) {\n    editor.collapse(options)\n  },\n  deselect(editor) {\n    editor.deselect()\n  },\n  move(editor, options) {\n    editor.move(options)\n  },\n  select(editor, target) {\n    editor.select(target)\n  },\n  setPoint(editor, props, options) {\n    editor.setPoint(props, options)\n  },\n  setSelection(editor, props) {\n    editor.setSelection(props)\n  },\n}\n", "export const isObject = (value: any) =>\n  typeof value === 'object' && value !== null\n", "import { isObject } from './is-object'\n\n/*\n  Custom deep equal comparison for Slate nodes.\n\n  We don't need general purpose deep equality;\n  Slate only supports plain values, Arrays, and nested objects.\n  Complex values nested inside Arrays are not supported.\n\n  Slate objects are designed to be serialised, so\n  missing keys are deliberately normalised to undefined.\n */\nexport const isDeepEqual = (\n  node: Record<string, any>,\n  another: Record<string, any>\n): boolean => {\n  for (const key in node) {\n    const a = node[key]\n    const b = another[key]\n    if (Array.isArray(a) && Array.isArray(b)) {\n      if (a.length !== b.length) return false\n      for (let i = 0; i < a.length; i++) {\n        if (a[i] !== b[i]) return false\n      }\n    } else if (isObject(a) && isObject(b)) {\n      if (!isDeepEqual(a, b)) return false\n    } else if (a !== b) {\n      return false\n    }\n  }\n\n  /*\n    Deep object equality is only necessary in one direction; in the reverse direction\n    we are only looking for keys that are missing.\n    As above, undefined keys are normalised to missing.\n  */\n\n  for (const key in another) {\n    if (node[key] === undefined && another[key] !== undefined) {\n      return false\n    }\n  }\n\n  return true\n}\n", "export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}", "import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n  return target;\n}", "import { ExtendedType, Operation, Path, Point, PointEntry, isObject } from '..'\nimport { RangeDirection } from '../types/types'\n\n/**\n * `Range` objects are a set of points that refer to a specific span of a Slate\n * document. They can define a span inside a single node or a can span across\n * multiple nodes.\n */\n\nexport interface BaseRange {\n  anchor: Point\n  focus: Point\n}\n\nexport type Range = ExtendedType<'Range', BaseRange>\n\nexport interface RangeEdgesOptions {\n  reverse?: boolean\n}\n\nexport interface RangeTransformOptions {\n  affinity?: RangeDirection | null\n}\n\nexport interface RangeInterface {\n  /**\n   * Get the start and end points of a range, in the order in which they appear\n   * in the document.\n   */\n  edges: (range: Range, options?: RangeEdgesOptions) => [Point, Point]\n\n  /**\n   * Get the end point of a range.\n   */\n  end: (range: Range) => Point\n\n  /**\n   * Check if a range is exactly equal to another.\n   */\n  equals: (range: Range, another: Range) => boolean\n\n  /**\n   * Check if a range includes a path, a point or part of another range.\n   */\n  includes: (range: Range, target: Path | Point | Range) => boolean\n\n  /**\n   * Check if a range includes another range.\n   */\n  surrounds: (range: Range, target: Range) => boolean\n\n  /**\n   * Get the intersection of a range with another.\n   */\n  intersection: (range: Range, another: Range) => Range | null\n\n  /**\n   * Check if a range is backward, meaning that its anchor point appears in the\n   * document _after_ its focus point.\n   */\n  isBackward: (range: Range) => boolean\n\n  /**\n   * Check if a range is collapsed, meaning that both its anchor and focus\n   * points refer to the exact same position in the document.\n   */\n  isCollapsed: (range: Range) => boolean\n\n  /**\n   * Check if a range is expanded.\n   *\n   * This is the opposite of [[Range.isCollapsed]] and is provided for legibility.\n   */\n  isExpanded: (range: Range) => boolean\n\n  /**\n   * Check if a range is forward.\n   *\n   * This is the opposite of [[Range.isBackward]] and is provided for legibility.\n   */\n  isForward: (range: Range) => boolean\n\n  /**\n   * Check if a value implements the [[Range]] interface.\n   */\n  isRange: (value: any) => value is Range\n\n  /**\n   * Iterate through all of the point entries in a range.\n   */\n  points: (range: Range) => Generator<PointEntry, void, undefined>\n\n  /**\n   * Get the start point of a range.\n   */\n  start: (range: Range) => Point\n\n  /**\n   * Transform a range by an operation.\n   */\n  transform: (\n    range: Range,\n    op: Operation,\n    options?: RangeTransformOptions\n  ) => Range | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Range: RangeInterface = {\n  edges(range: Range, options: RangeEdgesOptions = {}): [Point, Point] {\n    const { reverse = false } = options\n    const { anchor, focus } = range\n    return Range.isBackward(range) === reverse\n      ? [anchor, focus]\n      : [focus, anchor]\n  },\n\n  end(range: Range): Point {\n    const [, end] = Range.edges(range)\n    return end\n  },\n\n  equals(range: Range, another: Range): boolean {\n    return (\n      Point.equals(range.anchor, another.anchor) &&\n      Point.equals(range.focus, another.focus)\n    )\n  },\n\n  surrounds(range: Range, target: Range): boolean {\n    const intersectionRange = Range.intersection(range, target)\n    if (!intersectionRange) {\n      return false\n    }\n    return Range.equals(intersectionRange, target)\n  },\n\n  includes(range: Range, target: Path | Point | Range): boolean {\n    if (Range.isRange(target)) {\n      if (\n        Range.includes(range, target.anchor) ||\n        Range.includes(range, target.focus)\n      ) {\n        return true\n      }\n\n      const [rs, re] = Range.edges(range)\n      const [ts, te] = Range.edges(target)\n      return Point.isBefore(rs, ts) && Point.isAfter(re, te)\n    }\n\n    const [start, end] = Range.edges(range)\n    let isAfterStart = false\n    let isBeforeEnd = false\n\n    if (Point.isPoint(target)) {\n      isAfterStart = Point.compare(target, start) >= 0\n      isBeforeEnd = Point.compare(target, end) <= 0\n    } else {\n      isAfterStart = Path.compare(target, start.path) >= 0\n      isBeforeEnd = Path.compare(target, end.path) <= 0\n    }\n\n    return isAfterStart && isBeforeEnd\n  },\n\n  intersection(range: Range, another: Range): Range | null {\n    const { anchor, focus, ...rest } = range\n    const [s1, e1] = Range.edges(range)\n    const [s2, e2] = Range.edges(another)\n    const start = Point.isBefore(s1, s2) ? s2 : s1\n    const end = Point.isBefore(e1, e2) ? e1 : e2\n\n    if (Point.isBefore(end, start)) {\n      return null\n    } else {\n      return { anchor: start, focus: end, ...rest }\n    }\n  },\n\n  isBackward(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.isAfter(anchor, focus)\n  },\n\n  isCollapsed(range: Range): boolean {\n    const { anchor, focus } = range\n    return Point.equals(anchor, focus)\n  },\n\n  isExpanded(range: Range): boolean {\n    return !Range.isCollapsed(range)\n  },\n\n  isForward(range: Range): boolean {\n    return !Range.isBackward(range)\n  },\n\n  isRange(value: any): value is Range {\n    return (\n      isObject(value) &&\n      Point.isPoint(value.anchor) &&\n      Point.isPoint(value.focus)\n    )\n  },\n\n  *points(range: Range): Generator<PointEntry, void, undefined> {\n    yield [range.anchor, 'anchor']\n    yield [range.focus, 'focus']\n  },\n\n  start(range: Range): Point {\n    const [start] = Range.edges(range)\n    return start\n  },\n\n  transform(\n    range: Range | null,\n    op: Operation,\n    options: RangeTransformOptions = {}\n  ): Range | null {\n    if (range === null) {\n      return null\n    }\n\n    const { affinity = 'inward' } = options\n    let affinityAnchor: 'forward' | 'backward' | null\n    let affinityFocus: 'forward' | 'backward' | null\n\n    if (affinity === 'inward') {\n      // If the range is collapsed, make sure to use the same affinity to\n      // avoid the two points passing each other and expanding in the opposite\n      // direction\n      const isCollapsed = Range.isCollapsed(range)\n      if (Range.isForward(range)) {\n        affinityAnchor = 'forward'\n        affinityFocus = isCollapsed ? affinityAnchor : 'backward'\n      } else {\n        affinityAnchor = 'backward'\n        affinityFocus = isCollapsed ? affinityAnchor : 'forward'\n      }\n    } else if (affinity === 'outward') {\n      if (Range.isForward(range)) {\n        affinityAnchor = 'backward'\n        affinityFocus = 'forward'\n      } else {\n        affinityAnchor = 'forward'\n        affinityFocus = 'backward'\n      }\n    } else {\n      affinityAnchor = affinity\n      affinityFocus = affinity\n    }\n    const anchor = Point.transform(range.anchor, op, {\n      affinity: affinityAnchor,\n    })\n    const focus = Point.transform(range.focus, op, { affinity: affinityFocus })\n\n    if (!anchor || !focus) {\n      return null\n    }\n\n    return { anchor, focus }\n  },\n}\n", "import {\n  Ancestor,\n  Descendant,\n  Editor,\n  ExtendedType,\n  Node,\n  Path,\n  isObject,\n} from '..'\n\n/**\n * `Element` objects are a type of node in a Slate document that contain other\n * element nodes or text nodes. They can be either \"blocks\" or \"inlines\"\n * depending on the Slate editor's configuration.\n */\n\nexport interface BaseElement {\n  children: Descendant[]\n}\n\nexport type Element = ExtendedType<'Element', BaseElement>\n\nexport interface ElementIsElementOptions {\n  deep?: boolean\n}\n\nexport interface ElementInterface {\n  /**\n   * Check if a value implements the 'Ancestor' interface.\n   */\n  isAncestor: (\n    value: any,\n    options?: ElementIsElementOptions\n  ) => value is Ancestor\n\n  /**\n   * Check if a value implements the `Element` interface.\n   */\n  isElement: (value: any, options?: ElementIsElementOptions) => value is Element\n\n  /**\n   * Check if a value is an array of `Element` objects.\n   */\n  isElementList: (\n    value: any,\n    options?: ElementIsElementOptions\n  ) => value is Element[]\n\n  /**\n   * Check if a set of props is a partial of Element.\n   */\n  isElementProps: (props: any) => props is Partial<Element>\n\n  /**\n   * Check if a value implements the `Element` interface and has elementKey with selected value.\n   * Default it check to `type` key value\n   */\n  isElementType: <T extends Element>(\n    value: any,\n    elementVal: string,\n    elementKey?: string\n  ) => value is T\n\n  /**\n   * Check if an element matches set of properties.\n   *\n   * Note: this checks custom properties, and it does not ensure that any\n   * children are equivalent.\n   */\n  matches: (element: Element, props: Partial<Element>) => boolean\n}\n\n/**\n * Shared the function with isElementType utility\n */\nconst isElement = (\n  value: any,\n  { deep = false }: ElementIsElementOptions = {}\n): value is Element => {\n  if (!isObject(value)) return false\n\n  // PERF: No need to use the full Editor.isEditor here\n  const isEditor = typeof value.apply === 'function'\n  if (isEditor) return false\n\n  const isChildrenValid = deep\n    ? Node.isNodeList(value.children)\n    : Array.isArray(value.children)\n\n  return isChildrenValid\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Element: ElementInterface = {\n  isAncestor(\n    value: any,\n    { deep = false }: ElementIsElementOptions = {}\n  ): value is Ancestor {\n    return isObject(value) && Node.isNodeList(value.children, { deep })\n  },\n\n  isElement,\n\n  isElementList(\n    value: any,\n    { deep = false }: ElementIsElementOptions = {}\n  ): value is Element[] {\n    return (\n      Array.isArray(value) &&\n      value.every(val => Element.isElement(val, { deep }))\n    )\n  },\n\n  isElementProps(props: any): props is Partial<Element> {\n    return (props as Partial<Element>).children !== undefined\n  },\n\n  isElementType: <T extends Element>(\n    value: any,\n    elementVal: string,\n    elementKey: string = 'type'\n  ): value is T => {\n    return (\n      isElement(value) && value[<keyof Descendant>elementKey] === elementVal\n    )\n  },\n\n  matches(element: Element, props: Partial<Element>): boolean {\n    for (const key in props) {\n      if (key === 'children') {\n        continue\n      }\n\n      if (element[<keyof Descendant>key] !== props[<keyof Descendant>key]) {\n        return false\n      }\n    }\n\n    return true\n  },\n}\n\n/**\n * `ElementEntry` objects refer to an `Element` and the `Path` where it can be\n * found inside a root node.\n */\nexport type ElementEntry = [Element, Path]\n", "import { produce } from 'immer'\nimport { Editor, Path, Range, Scrubber, Text } from '..'\nimport { Element, ElementEntry } from './element'\n\n/**\n * The `Node` union type represents all of the different types of nodes that\n * occur in a Slate document tree.\n */\n\nexport type BaseNode = Editor | Element | Text\nexport type Node = Editor | Element | Text\n\nexport interface NodeAncestorsOptions {\n  reverse?: boolean\n}\n\nexport interface NodeChildrenOptions {\n  reverse?: boolean\n}\n\nexport interface NodeDescendantsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeElementsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeIsNodeOptions {\n  deep?: boolean\n}\n\nexport interface NodeLevelsOptions {\n  reverse?: boolean\n}\n\nexport interface NodeNodesOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (entry: NodeEntry) => boolean\n}\n\nexport interface NodeTextsOptions {\n  from?: Path\n  to?: Path\n  reverse?: boolean\n  pass?: (node: NodeEntry) => boolean\n}\n\nexport interface NodeInterface {\n  /**\n   * Get the node at a specific path, asserting that it's an ancestor node.\n   */\n  ancestor: (root: Node, path: Path) => Ancestor\n\n  /**\n   * Return a generator of all the ancestor nodes above a specific path.\n   *\n   * By default the order is top-down, from highest to lowest ancestor in\n   * the tree, but you can pass the `reverse: true` option to go bottom-up.\n   */\n  ancestors: (\n    root: Node,\n    path: Path,\n    options?: NodeAncestorsOptions\n  ) => Generator<NodeEntry<Ancestor>, void, undefined>\n\n  /**\n   * Get the child of a node at a specific index.\n   */\n  child: (root: Node, index: number) => Descendant\n\n  /**\n   * Iterate over the children of a node at a specific path.\n   */\n  children: (\n    root: Node,\n    path: Path,\n    options?: NodeChildrenOptions\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n\n  /**\n   * Get an entry for the common ancesetor node of two paths.\n   */\n  common: (root: Node, path: Path, another: Path) => NodeEntry\n\n  /**\n   * Get the node at a specific path, asserting that it's a descendant node.\n   */\n  descendant: (root: Node, path: Path) => Descendant\n\n  /**\n   * Return a generator of all the descendant node entries inside a root node.\n   */\n  descendants: (\n    root: Node,\n    options?: NodeDescendantsOptions\n  ) => Generator<NodeEntry<Descendant>, void, undefined>\n\n  /**\n   * Return a generator of all the element nodes inside a root node. Each iteration\n   * will return an `ElementEntry` tuple consisting of `[Element, Path]`. If the\n   * root node is an element it will be included in the iteration as well.\n   */\n  elements: (\n    root: Node,\n    options?: NodeElementsOptions\n  ) => Generator<ElementEntry, void, undefined>\n\n  /**\n   * Extract props from a Node.\n   */\n  extractProps: (node: Node) => NodeProps\n\n  /**\n   * Get the first leaf node entry in a root node from a path.\n   */\n  first: (root: Node, path: Path) => NodeEntry\n\n  /**\n   * Get the sliced fragment represented by a range inside a root node.\n   */\n  fragment: (root: Node, range: Range) => Descendant[]\n\n  /**\n   * Get the descendant node referred to by a specific path. If the path is an\n   * empty array, it refers to the root node itself.\n   */\n  get: (root: Node, path: Path) => Node\n\n  /**\n   * Similar to get, but returns undefined if the node does not exist.\n   */\n  getIf: (root: Node, path: Path) => Node | undefined\n\n  /**\n   * Check if a descendant node exists at a specific path.\n   */\n  has: (root: Node, path: Path) => boolean\n\n  /**\n   * Check if a value implements the `Node` interface.\n   */\n  isNode: (value: any, options?: NodeIsNodeOptions) => value is Node\n\n  /**\n   * Check if a value is a list of `Node` objects.\n   */\n  isNodeList: (value: any, options?: NodeIsNodeOptions) => value is Node[]\n\n  /**\n   * Get the last leaf node entry in a root node from a path.\n   */\n  last: (root: Node, path: Path) => NodeEntry\n\n  /**\n   * Get the node at a specific path, ensuring it's a leaf text node.\n   */\n  leaf: (root: Node, path: Path) => Text\n\n  /**\n   * Return a generator of the in a branch of the tree, from a specific path.\n   *\n   * By default the order is top-down, from highest to lowest node in the tree,\n   * but you can pass the `reverse: true` option to go bottom-up.\n   */\n  levels: (\n    root: Node,\n    path: Path,\n    options?: NodeLevelsOptions\n  ) => Generator<NodeEntry, void, undefined>\n\n  /**\n   * Check if a node matches a set of props.\n   */\n  matches: (node: Node, props: Partial<Node>) => boolean\n\n  /**\n   * Return a generator of all the node entries of a root node. Each entry is\n   * returned as a `[Node, Path]` tuple, with the path referring to the node's\n   * position inside the root node.\n   */\n  nodes: (\n    root: Node,\n    options?: NodeNodesOptions\n  ) => Generator<NodeEntry, void, undefined>\n\n  /**\n   * Get the parent of a node at a specific path.\n   */\n  parent: (root: Node, path: Path) => Ancestor\n\n  /**\n   * Get the concatenated text string of a node's content.\n   *\n   * Note that this will not include spaces or line breaks between block nodes.\n   * It is not a user-facing string, but a string for performing offset-related\n   * computations for a node.\n   */\n  string: (node: Node) => string\n\n  /**\n   * Return a generator of all leaf text nodes in a root node.\n   */\n  texts: (\n    root: Node,\n    options?: NodeTextsOptions\n  ) => Generator<NodeEntry<Text>, void, undefined>\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Node: NodeInterface = {\n  ancestor(root: Node, path: Path): Ancestor {\n    const node = Node.get(root, path)\n\n    if (Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ancestor node at path [${path}] because it refers to a text node instead: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *ancestors(\n    root: Node,\n    path: Path,\n    options: NodeAncestorsOptions = {}\n  ): Generator<NodeEntry<Ancestor>, void, undefined> {\n    for (const p of Path.ancestors(path, options)) {\n      const n = Node.ancestor(root, p)\n      const entry: NodeEntry<Ancestor> = [n, p]\n      yield entry\n    }\n  },\n\n  child(root: Node, index: number): Descendant {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get the child of a text node: ${Scrubber.stringify(root)}`\n      )\n    }\n\n    const c = root.children[index] as Descendant\n\n    if (c == null) {\n      throw new Error(\n        `Cannot get child at index \\`${index}\\` in node: ${Scrubber.stringify(\n          root\n        )}`\n      )\n    }\n\n    return c\n  },\n\n  *children(\n    root: Node,\n    path: Path,\n    options: NodeChildrenOptions = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    const { reverse = false } = options\n    const ancestor = Node.ancestor(root, path)\n    const { children } = ancestor\n    let index = reverse ? children.length - 1 : 0\n\n    while (reverse ? index >= 0 : index < children.length) {\n      const child = Node.child(ancestor, index)\n      const childPath = path.concat(index)\n      yield [child, childPath]\n      index = reverse ? index - 1 : index + 1\n    }\n  },\n\n  common(root: Node, path: Path, another: Path): NodeEntry {\n    const p = Path.common(path, another)\n    const n = Node.get(root, p)\n    return [n, p]\n  },\n\n  descendant(root: Node, path: Path): Descendant {\n    const node = Node.get(root, path)\n\n    if (Editor.isEditor(node)) {\n      throw new Error(\n        `Cannot get the descendant node at path [${path}] because it refers to the root editor node instead: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *descendants(\n    root: Node,\n    options: NodeDescendantsOptions = {}\n  ): Generator<NodeEntry<Descendant>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (path.length !== 0) {\n        // NOTE: we have to coerce here because checking the path's length does\n        // guarantee that `node` is not a `Editor`, but TypeScript doesn't know.\n        yield [node, path] as NodeEntry<Descendant>\n      }\n    }\n  },\n\n  *elements(\n    root: Node,\n    options: NodeElementsOptions = {}\n  ): Generator<ElementEntry, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Element.isElement(node)) {\n        yield [node, path]\n      }\n    }\n  },\n\n  extractProps(node: Node): NodeProps {\n    if (Element.isAncestor(node)) {\n      const { children, ...properties } = node\n\n      return properties\n    } else {\n      const { text, ...properties } = node\n\n      return properties\n    }\n  },\n\n  first(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        n = n.children[0]\n        p.push(0)\n      }\n    }\n\n    return [n, p]\n  },\n\n  fragment(root: Node, range: Range): Descendant[] {\n    if (Text.isText(root)) {\n      throw new Error(\n        `Cannot get a fragment starting from a root text node: ${Scrubber.stringify(\n          root\n        )}`\n      )\n    }\n\n    const newRoot = produce({ children: root.children }, r => {\n      const [start, end] = Range.edges(range)\n      const nodeEntries = Node.nodes(r, {\n        reverse: true,\n        pass: ([, path]) => !Range.includes(range, path),\n      })\n\n      for (const [, path] of nodeEntries) {\n        if (!Range.includes(range, path)) {\n          const parent = Node.parent(r, path)\n          const index = path[path.length - 1]\n          parent.children.splice(index, 1)\n        }\n\n        if (Path.equals(path, end.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(0, end.offset)\n        }\n\n        if (Path.equals(path, start.path)) {\n          const leaf = Node.leaf(r, path)\n          leaf.text = leaf.text.slice(start.offset)\n        }\n      }\n\n      if (Editor.isEditor(r)) {\n        r.selection = null\n      }\n    })\n\n    return newRoot.children\n  },\n\n  get(root: Node, path: Path): Node {\n    const node = Node.getIf(root, path)\n    if (node === undefined) {\n      throw new Error(\n        `Cannot find a descendant at path [${path}] in node: ${Scrubber.stringify(\n          root\n        )}`\n      )\n    }\n    return node\n  },\n\n  getIf(root: Node, path: Path): Node | undefined {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return\n      }\n\n      node = node.children[p]\n    }\n\n    return node\n  },\n\n  has(root: Node, path: Path): boolean {\n    let node = root\n\n    for (let i = 0; i < path.length; i++) {\n      const p = path[i]\n\n      if (Text.isText(node) || !node.children[p]) {\n        return false\n      }\n\n      node = node.children[p]\n    }\n\n    return true\n  },\n\n  isNode(value: any, { deep = false }: NodeIsNodeOptions = {}): value is Node {\n    return (\n      Text.isText(value) ||\n      Element.isElement(value, { deep }) ||\n      Editor.isEditor(value, { deep })\n    )\n  },\n\n  isNodeList(\n    value: any,\n    { deep = false }: NodeIsNodeOptions = {}\n  ): value is Node[] {\n    return (\n      Array.isArray(value) && value.every(val => Node.isNode(val, { deep }))\n    )\n  },\n\n  last(root: Node, path: Path): NodeEntry {\n    const p = path.slice()\n    let n = Node.get(root, p)\n\n    while (n) {\n      if (Text.isText(n) || n.children.length === 0) {\n        break\n      } else {\n        const i = n.children.length - 1\n        n = n.children[i]\n        p.push(i)\n      }\n    }\n\n    return [n, p]\n  },\n\n  leaf(root: Node, path: Path): Text {\n    const node = Node.get(root, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the leaf node at path [${path}] because it refers to a non-leaf node: ${Scrubber.stringify(\n          node\n        )}`\n      )\n    }\n\n    return node\n  },\n\n  *levels(\n    root: Node,\n    path: Path,\n    options: NodeLevelsOptions = {}\n  ): Generator<NodeEntry, void, undefined> {\n    for (const p of Path.levels(path, options)) {\n      const n = Node.get(root, p)\n      yield [n, p]\n    }\n  },\n\n  matches(node: Node, props: Partial<Node>): boolean {\n    return (\n      (Element.isElement(node) &&\n        Element.isElementProps(props) &&\n        Element.matches(node, props)) ||\n      (Text.isText(node) &&\n        Text.isTextProps(props) &&\n        Text.matches(node, props))\n    )\n  },\n\n  *nodes(\n    root: Node,\n    options: NodeNodesOptions = {}\n  ): Generator<NodeEntry, void, undefined> {\n    const { pass, reverse = false } = options\n    const { from = [], to } = options\n    const visited = new Set()\n    let p: Path = []\n    let n = root\n\n    while (true) {\n      if (to && (reverse ? Path.isBefore(p, to) : Path.isAfter(p, to))) {\n        break\n      }\n\n      if (!visited.has(n)) {\n        yield [n, p]\n      }\n\n      // If we're allowed to go downward and we haven't descended yet, do.\n      if (\n        !visited.has(n) &&\n        !Text.isText(n) &&\n        n.children.length !== 0 &&\n        (pass == null || pass([n, p]) === false)\n      ) {\n        visited.add(n)\n        let nextIndex = reverse ? n.children.length - 1 : 0\n\n        if (Path.isAncestor(p, from)) {\n          nextIndex = from[p.length]\n        }\n\n        p = p.concat(nextIndex)\n        n = Node.get(root, p)\n        continue\n      }\n\n      // If we're at the root and we can't go down, we're done.\n      if (p.length === 0) {\n        break\n      }\n\n      // If we're going forward...\n      if (!reverse) {\n        const newPath = Path.next(p)\n\n        if (Node.has(root, newPath)) {\n          p = newPath\n          n = Node.get(root, p)\n          continue\n        }\n      }\n\n      // If we're going backward...\n      if (reverse && p[p.length - 1] !== 0) {\n        const newPath = Path.previous(p)\n        p = newPath\n        n = Node.get(root, p)\n        continue\n      }\n\n      // Otherwise we're going upward...\n      p = Path.parent(p)\n      n = Node.get(root, p)\n      visited.add(n)\n    }\n  },\n\n  parent(root: Node, path: Path): Ancestor {\n    const parentPath = Path.parent(path)\n    const p = Node.get(root, parentPath)\n\n    if (Text.isText(p)) {\n      throw new Error(\n        `Cannot get the parent of path [${path}] because it does not exist in the root.`\n      )\n    }\n\n    return p\n  },\n\n  string(node: Node): string {\n    if (Text.isText(node)) {\n      return node.text\n    } else {\n      return node.children.map(Node.string).join('')\n    }\n  },\n\n  *texts(\n    root: Node,\n    options: NodeTextsOptions = {}\n  ): Generator<NodeEntry<Text>, void, undefined> {\n    for (const [node, path] of Node.nodes(root, options)) {\n      if (Text.isText(node)) {\n        yield [node, path]\n      }\n    }\n  },\n}\n\n/**\n * The `Descendant` union type represents nodes that are descendants in the\n * tree. It is returned as a convenience in certain cases to narrow a value\n * further than the more generic `Node` union.\n */\n\nexport type Descendant = Element | Text\n\n/**\n * The `Ancestor` union type represents nodes that are ancestors in the tree.\n * It is returned as a convenience in certain cases to narrow a value further\n * than the more generic `Node` union.\n */\n\nexport type Ancestor = Editor | Element\n\n/**\n * `NodeEntry` objects are returned when iterating over the nodes in a Slate\n * document tree. They consist of the node and its `Path` relative to the root\n * node in the document.\n */\n\nexport type NodeEntry<T extends Node = Node> = [T, Path]\n\n/**\n * Convenience type for returning the props of a node.\n */\nexport type NodeProps =\n  | Omit<Editor, 'children'>\n  | Omit<Element, 'children'>\n  | Omit<Text, 'text'>\n", "import { ExtendedType, Node, Path, Range, isObject } from '..'\n\nexport type BaseInsertNodeOperation = {\n  type: 'insert_node'\n  path: Path\n  node: Node\n}\n\nexport type InsertNodeOperation = ExtendedType<\n  'InsertNodeOperation',\n  BaseInsertNodeOperation\n>\n\nexport type BaseInsertTextOperation = {\n  type: 'insert_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type InsertTextOperation = ExtendedType<\n  'InsertTextOperation',\n  BaseInsertTextOperation\n>\n\nexport type BaseMergeNodeOperation = {\n  type: 'merge_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type MergeNodeOperation = ExtendedType<\n  'MergeNodeOperation',\n  BaseMergeNodeOperation\n>\n\nexport type BaseMoveNodeOperation = {\n  type: 'move_node'\n  path: Path\n  newPath: Path\n}\n\nexport type MoveNodeOperation = ExtendedType<\n  'MoveNodeOperation',\n  BaseMoveNodeOperation\n>\n\nexport type BaseRemoveNodeOperation = {\n  type: 'remove_node'\n  path: Path\n  node: Node\n}\n\nexport type RemoveNodeOperation = ExtendedType<\n  'RemoveNodeOperation',\n  BaseRemoveNodeOperation\n>\n\nexport type BaseRemoveTextOperation = {\n  type: 'remove_text'\n  path: Path\n  offset: number\n  text: string\n}\n\nexport type RemoveTextOperation = ExtendedType<\n  'RemoveTextOperation',\n  BaseRemoveTextOperation\n>\n\nexport type BaseSetNodeOperation = {\n  type: 'set_node'\n  path: Path\n  properties: Partial<Node>\n  newProperties: Partial<Node>\n}\n\nexport type SetNodeOperation = ExtendedType<\n  'SetNodeOperation',\n  BaseSetNodeOperation\n>\n\nexport type BaseSetSelectionOperation =\n  | {\n      type: 'set_selection'\n      properties: null\n      newProperties: Range\n    }\n  | {\n      type: 'set_selection'\n      properties: Partial<Range>\n      newProperties: Partial<Range>\n    }\n  | {\n      type: 'set_selection'\n      properties: Range\n      newProperties: null\n    }\n\nexport type SetSelectionOperation = ExtendedType<\n  'SetSelectionOperation',\n  BaseSetSelectionOperation\n>\n\nexport type BaseSplitNodeOperation = {\n  type: 'split_node'\n  path: Path\n  position: number\n  properties: Partial<Node>\n}\n\nexport type SplitNodeOperation = ExtendedType<\n  'SplitNodeOperation',\n  BaseSplitNodeOperation\n>\n\nexport type NodeOperation =\n  | InsertNodeOperation\n  | MergeNodeOperation\n  | MoveNodeOperation\n  | RemoveNodeOperation\n  | SetNodeOperation\n  | SplitNodeOperation\n\nexport type SelectionOperation = SetSelectionOperation\n\nexport type TextOperation = InsertTextOperation | RemoveTextOperation\n\n/**\n * `Operation` objects define the low-level instructions that Slate editors use\n * to apply changes to their internal state. Representing all changes as\n * operations is what allows Slate editors to easily implement history,\n * collaboration, and other features.\n */\n\nexport type BaseOperation = NodeOperation | SelectionOperation | TextOperation\nexport type Operation = ExtendedType<'Operation', BaseOperation>\n\nexport interface OperationInterface {\n  /**\n   * Check if a value is a `NodeOperation` object.\n   */\n  isNodeOperation: (value: any) => value is NodeOperation\n\n  /**\n   * Check if a value is an `Operation` object.\n   */\n  isOperation: (value: any) => value is Operation\n\n  /**\n   * Check if a value is a list of `Operation` objects.\n   */\n  isOperationList: (value: any) => value is Operation[]\n\n  /**\n   * Check if a value is a `SelectionOperation` object.\n   */\n  isSelectionOperation: (value: any) => value is SelectionOperation\n\n  /**\n   * Check if a value is a `TextOperation` object.\n   */\n  isTextOperation: (value: any) => value is TextOperation\n\n  /**\n   * Invert an operation, returning a new operation that will exactly undo the\n   * original when applied.\n   */\n  inverse: (op: Operation) => Operation\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Operation: OperationInterface = {\n  isNodeOperation(value: any): value is NodeOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_node')\n  },\n\n  isOperation(value: any): value is Operation {\n    if (!isObject(value)) {\n      return false\n    }\n\n    switch (value.type) {\n      case 'insert_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'insert_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'merge_node':\n        return (\n          typeof value.position === 'number' &&\n          Path.isPath(value.path) &&\n          isObject(value.properties)\n        )\n      case 'move_node':\n        return Path.isPath(value.path) && Path.isPath(value.newPath)\n      case 'remove_node':\n        return Path.isPath(value.path) && Node.isNode(value.node)\n      case 'remove_text':\n        return (\n          typeof value.offset === 'number' &&\n          typeof value.text === 'string' &&\n          Path.isPath(value.path)\n        )\n      case 'set_node':\n        return (\n          Path.isPath(value.path) &&\n          isObject(value.properties) &&\n          isObject(value.newProperties)\n        )\n      case 'set_selection':\n        return (\n          (value.properties === null && Range.isRange(value.newProperties)) ||\n          (value.newProperties === null && Range.isRange(value.properties)) ||\n          (isObject(value.properties) && isObject(value.newProperties))\n        )\n      case 'split_node':\n        return (\n          Path.isPath(value.path) &&\n          typeof value.position === 'number' &&\n          isObject(value.properties)\n        )\n      default:\n        return false\n    }\n  },\n\n  isOperationList(value: any): value is Operation[] {\n    return (\n      Array.isArray(value) && value.every(val => Operation.isOperation(val))\n    )\n  },\n\n  isSelectionOperation(value: any): value is SelectionOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_selection')\n  },\n\n  isTextOperation(value: any): value is TextOperation {\n    return Operation.isOperation(value) && value.type.endsWith('_text')\n  },\n\n  inverse(op: Operation): Operation {\n    switch (op.type) {\n      case 'insert_node': {\n        return { ...op, type: 'remove_node' }\n      }\n\n      case 'insert_text': {\n        return { ...op, type: 'remove_text' }\n      }\n\n      case 'merge_node': {\n        return { ...op, type: 'split_node', path: Path.previous(op.path) }\n      }\n\n      case 'move_node': {\n        const { newPath, path } = op\n\n        // PERF: in this case the move operation is a no-op anyways.\n        if (Path.equals(newPath, path)) {\n          return op\n        }\n\n        // If the move happens completely within a single parent the path and\n        // newPath are stable with respect to each other.\n        if (Path.isSibling(path, newPath)) {\n          return { ...op, path: newPath, newPath: path }\n        }\n\n        // If the move does not happen within a single parent it is possible\n        // for the move to impact the true path to the location where the node\n        // was removed from and where it was inserted. We have to adjust for this\n        // and find the original path. We can accomplish this (only in non-sibling)\n        // moves by looking at the impact of the move operation on the node\n        // after the original move path.\n        const inversePath = Path.transform(path, op)!\n        const inverseNewPath = Path.transform(Path.next(path), op)!\n        return { ...op, path: inversePath, newPath: inverseNewPath }\n      }\n\n      case 'remove_node': {\n        return { ...op, type: 'insert_node' }\n      }\n\n      case 'remove_text': {\n        return { ...op, type: 'insert_text' }\n      }\n\n      case 'set_node': {\n        const { properties, newProperties } = op\n        return { ...op, properties: newProperties, newProperties: properties }\n      }\n\n      case 'set_selection': {\n        const { properties, newProperties } = op\n\n        if (properties == null) {\n          return {\n            ...op,\n            properties: newProperties as Range,\n            newProperties: null,\n          }\n        } else if (newProperties == null) {\n          return {\n            ...op,\n            properties: null,\n            newProperties: properties as Range,\n          }\n        } else {\n          return { ...op, properties: newProperties, newProperties: properties }\n        }\n      }\n\n      case 'split_node': {\n        return { ...op, type: 'merge_node', path: Path.next(op.path) }\n      }\n    }\n  },\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Node } from '../interfaces/node'\nimport { Operation } from '../interfaces/operation'\nimport { isObject } from '../utils'\n\nexport const isEditor: EditorInterface['isEditor'] = (\n  value: any,\n  { deep = false } = {}\n): value is Editor => {\n  if (!isObject(value)) {\n    return false\n  }\n\n  const isEditor =\n    typeof value.addMark === 'function' &&\n    typeof value.apply === 'function' &&\n    typeof value.deleteFragment === 'function' &&\n    typeof value.insertBreak === 'function' &&\n    typeof value.insertSoftBreak === 'function' &&\n    typeof value.insertFragment === 'function' &&\n    typeof value.insertNode === 'function' &&\n    typeof value.insertText === 'function' &&\n    typeof value.isElementReadOnly === 'function' &&\n    typeof value.isInline === 'function' &&\n    typeof value.isSelectable === 'function' &&\n    typeof value.isVoid === 'function' &&\n    typeof value.normalizeNode === 'function' &&\n    typeof value.onChange === 'function' &&\n    typeof value.removeMark === 'function' &&\n    typeof value.getDirtyPaths === 'function' &&\n    (value.marks === null || isObject(value.marks)) &&\n    (value.selection === null || Range.isRange(value.selection)) &&\n    (!deep || Node.isNodeList(value.children)) &&\n    Operation.isOperationList(value.operations)\n\n  return isEditor\n}\n", "import {\n  Ancestor,\n  Descendant,\n  Element,\n  ExtendedType,\n  Location,\n  Node,\n  NodeEntry,\n  Operation,\n  Path,\n  PathRef,\n  Point,\n  PointRef,\n  Range,\n  RangeRef,\n  Span,\n  Text,\n  Transforms,\n} from '..'\nimport {\n  LeafEdge,\n  MaximizeMode,\n  RangeDirection,\n  SelectionMode,\n  TextDirection,\n  TextUnit,\n  TextUnitAdjustment,\n} from '../types/types'\nimport { OmitFirstArg } from '../utils/types'\nimport { isEditor } from '../editor/is-editor'\nimport {\n  TextInsertFragmentOptions,\n  TextInsertTextOptions,\n} from './transforms/text'\nimport { NodeInsertNodesOptions } from './transforms/node'\n\n/**\n * The `Editor` interface stores all the state of a Slate editor. It is extended\n * by plugins that wish to add their own helpers and implement new behaviors.\n */\nexport interface BaseEditor {\n  // Core state.\n\n  children: Descendant[]\n  selection: Selection\n  operations: Operation[]\n  marks: EditorMarks | null\n\n  // Overrideable core methods.\n\n  apply: (operation: Operation) => void\n  getDirtyPaths: (operation: Operation) => Path[]\n  getFragment: () => Descendant[]\n  isElementReadOnly: (element: Element) => boolean\n  isSelectable: (element: Element) => boolean\n  markableVoid: (element: Element) => boolean\n  normalizeNode: (\n    entry: NodeEntry,\n    options?: {\n      operation?: Operation\n      fallbackElement?: () => Element\n    }\n  ) => void\n  onChange: (options?: { operation?: Operation }) => void\n  shouldNormalize: ({\n    iteration,\n    dirtyPaths,\n    operation,\n  }: {\n    iteration: number\n    initialDirtyPathsLength: number\n    dirtyPaths: Path[]\n    operation?: Operation\n  }) => boolean\n\n  // Overrideable core transforms.\n\n  addMark: OmitFirstArg<typeof Editor.addMark>\n  collapse: OmitFirstArg<typeof Transforms.collapse>\n  delete: OmitFirstArg<typeof Transforms.delete>\n  deleteBackward: (unit: TextUnit) => void\n  deleteForward: (unit: TextUnit) => void\n  deleteFragment: OmitFirstArg<typeof Editor.deleteFragment>\n  deselect: OmitFirstArg<typeof Transforms.deselect>\n  insertBreak: OmitFirstArg<typeof Editor.insertBreak>\n  insertFragment: OmitFirstArg<typeof Transforms.insertFragment>\n  insertNode: OmitFirstArg<typeof Editor.insertNode>\n  insertNodes: OmitFirstArg<typeof Transforms.insertNodes>\n  insertSoftBreak: OmitFirstArg<typeof Editor.insertSoftBreak>\n  insertText: OmitFirstArg<typeof Transforms.insertText>\n  liftNodes: OmitFirstArg<typeof Transforms.liftNodes>\n  mergeNodes: OmitFirstArg<typeof Transforms.mergeNodes>\n  move: OmitFirstArg<typeof Transforms.move>\n  moveNodes: OmitFirstArg<typeof Transforms.moveNodes>\n  normalize: OmitFirstArg<typeof Editor.normalize>\n  removeMark: OmitFirstArg<typeof Editor.removeMark>\n  removeNodes: OmitFirstArg<typeof Transforms.removeNodes>\n  select: OmitFirstArg<typeof Transforms.select>\n  setNodes: <T extends Node>(\n    props: Partial<T>,\n    options?: {\n      at?: Location\n      match?: NodeMatch<T>\n      mode?: MaximizeMode\n      hanging?: boolean\n      split?: boolean\n      voids?: boolean\n      compare?: PropsCompare\n      merge?: PropsMerge\n    }\n  ) => void\n  setNormalizing: OmitFirstArg<typeof Editor.setNormalizing>\n  setPoint: OmitFirstArg<typeof Transforms.setPoint>\n  setSelection: OmitFirstArg<typeof Transforms.setSelection>\n  splitNodes: OmitFirstArg<typeof Transforms.splitNodes>\n  unsetNodes: OmitFirstArg<typeof Transforms.unsetNodes>\n  unwrapNodes: OmitFirstArg<typeof Transforms.unwrapNodes>\n  withoutNormalizing: OmitFirstArg<typeof Editor.withoutNormalizing>\n  wrapNodes: OmitFirstArg<typeof Transforms.wrapNodes>\n\n  // Overrideable core queries.\n\n  above: <T extends Ancestor>(\n    options?: EditorAboveOptions<T>\n  ) => NodeEntry<T> | undefined\n  after: OmitFirstArg<typeof Editor.after>\n  before: OmitFirstArg<typeof Editor.before>\n  edges: OmitFirstArg<typeof Editor.edges>\n  elementReadOnly: OmitFirstArg<typeof Editor.elementReadOnly>\n  end: OmitFirstArg<typeof Editor.end>\n  first: OmitFirstArg<typeof Editor.first>\n  fragment: OmitFirstArg<typeof Editor.fragment>\n  getMarks: OmitFirstArg<typeof Editor.marks>\n  hasBlocks: OmitFirstArg<typeof Editor.hasBlocks>\n  hasInlines: OmitFirstArg<typeof Editor.hasInlines>\n  hasPath: OmitFirstArg<typeof Editor.hasPath>\n  hasTexts: OmitFirstArg<typeof Editor.hasTexts>\n  isBlock: OmitFirstArg<typeof Editor.isBlock>\n  isEdge: OmitFirstArg<typeof Editor.isEdge>\n  isEmpty: OmitFirstArg<typeof Editor.isEmpty>\n  isEnd: OmitFirstArg<typeof Editor.isEnd>\n  isInline: OmitFirstArg<typeof Editor.isInline>\n  isNormalizing: OmitFirstArg<typeof Editor.isNormalizing>\n  isStart: OmitFirstArg<typeof Editor.isStart>\n  isVoid: OmitFirstArg<typeof Editor.isVoid>\n  last: OmitFirstArg<typeof Editor.last>\n  leaf: OmitFirstArg<typeof Editor.leaf>\n  levels: <T extends Node>(\n    options?: EditorLevelsOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n  next: <T extends Descendant>(\n    options?: EditorNextOptions<T>\n  ) => NodeEntry<T> | undefined\n  node: OmitFirstArg<typeof Editor.node>\n  nodes: <T extends Node>(\n    options?: EditorNodesOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n  parent: OmitFirstArg<typeof Editor.parent>\n  path: OmitFirstArg<typeof Editor.path>\n  pathRef: OmitFirstArg<typeof Editor.pathRef>\n  pathRefs: OmitFirstArg<typeof Editor.pathRefs>\n  point: OmitFirstArg<typeof Editor.point>\n  pointRef: OmitFirstArg<typeof Editor.pointRef>\n  pointRefs: OmitFirstArg<typeof Editor.pointRefs>\n  positions: OmitFirstArg<typeof Editor.positions>\n  previous: <T extends Node>(\n    options?: EditorPreviousOptions<T>\n  ) => NodeEntry<T> | undefined\n  range: OmitFirstArg<typeof Editor.range>\n  rangeRef: OmitFirstArg<typeof Editor.rangeRef>\n  rangeRefs: OmitFirstArg<typeof Editor.rangeRefs>\n  start: OmitFirstArg<typeof Editor.start>\n  string: OmitFirstArg<typeof Editor.string>\n  unhangRange: OmitFirstArg<typeof Editor.unhangRange>\n  void: OmitFirstArg<typeof Editor.void>\n  shouldMergeNodesRemovePrevNode: OmitFirstArg<\n    typeof Editor.shouldMergeNodesRemovePrevNode\n  >\n}\n\nexport type Editor = ExtendedType<'Editor', BaseEditor>\n\nexport type BaseSelection = Range | null\n\nexport type Selection = ExtendedType<'Selection', BaseSelection>\n\nexport type EditorMarks = Omit<Text, 'text'>\n\nexport interface EditorAboveOptions<T extends Ancestor> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorAfterOptions {\n  distance?: number\n  unit?: TextUnitAdjustment\n  voids?: boolean\n}\n\nexport interface EditorBeforeOptions {\n  distance?: number\n  unit?: TextUnitAdjustment\n  voids?: boolean\n}\n\nexport interface EditorDirectedDeletionOptions {\n  unit?: TextUnit\n}\n\nexport interface EditorElementReadOnlyOptions {\n  at?: Location\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorFragmentDeletionOptions {\n  direction?: TextDirection\n}\n\nexport interface EditorIsEditorOptions {\n  deep?: boolean\n}\n\nexport interface EditorLeafOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorLevelsOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  reverse?: boolean\n  voids?: boolean\n}\n\nexport interface EditorNextOptions<T extends Descendant> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  voids?: boolean\n}\n\nexport interface EditorNodeOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorNodesOptions<T extends Node> {\n  at?: Location | Span\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  universal?: boolean\n  reverse?: boolean\n  voids?: boolean\n  pass?: (entry: NodeEntry) => boolean\n  ignoreNonSelectable?: boolean\n}\n\nexport interface EditorNormalizeOptions {\n  force?: boolean\n  operation?: Operation\n}\n\nexport interface EditorParentOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorPathOptions {\n  depth?: number\n  edge?: LeafEdge\n}\n\nexport interface EditorPathRefOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface EditorPointOptions {\n  edge?: LeafEdge\n}\n\nexport interface EditorPointRefOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface EditorPositionsOptions {\n  at?: Location\n  unit?: TextUnitAdjustment\n  reverse?: boolean\n  voids?: boolean\n  ignoreNonSelectable?: boolean\n}\n\nexport interface EditorPreviousOptions<T extends Node> {\n  at?: Location\n  match?: NodeMatch<T>\n  mode?: SelectionMode\n  voids?: boolean\n}\n\nexport interface EditorRangeRefOptions {\n  affinity?: RangeDirection | null\n}\n\nexport interface EditorStringOptions {\n  voids?: boolean\n}\n\nexport interface EditorUnhangRangeOptions {\n  voids?: boolean\n}\n\nexport interface EditorVoidOptions {\n  at?: Location\n  mode?: MaximizeMode\n  voids?: boolean\n}\n\nexport interface EditorInterface {\n  /**\n   * Get the ancestor above a location in the document.\n   */\n  above: <T extends Ancestor>(\n    editor: Editor,\n    options?: EditorAboveOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Add a custom property to the leaf text nodes in the current selection.\n   *\n   * If the selection is currently collapsed, the marks will be added to the\n   * `editor.marks` property instead, and applied when text is inserted next.\n   */\n  addMark: (editor: Editor, key: string, value: any) => void\n\n  /**\n   * Get the point after a location.\n   */\n  after: (\n    editor: Editor,\n    at: Location,\n    options?: EditorAfterOptions\n  ) => Point | undefined\n\n  /**\n   * Get the point before a location.\n   */\n  before: (\n    editor: Editor,\n    at: Location,\n    options?: EditorBeforeOptions\n  ) => Point | undefined\n\n  /**\n   * Delete content in the editor backward from the current selection.\n   */\n  deleteBackward: (\n    editor: Editor,\n    options?: EditorDirectedDeletionOptions\n  ) => void\n\n  /**\n   * Delete content in the editor forward from the current selection.\n   */\n  deleteForward: (\n    editor: Editor,\n    options?: EditorDirectedDeletionOptions\n  ) => void\n\n  /**\n   * Delete the content in the current selection.\n   */\n  deleteFragment: (\n    editor: Editor,\n    options?: EditorFragmentDeletionOptions\n  ) => void\n\n  /**\n   * Get the start and end points of a location.\n   */\n  edges: (editor: Editor, at: Location) => [Point, Point]\n\n  /**\n   * Match a read-only element in the current branch of the editor.\n   */\n  elementReadOnly: (\n    editor: Editor,\n    options?: EditorElementReadOnlyOptions\n  ) => NodeEntry<Element> | undefined\n\n  /**\n   * Get the end point of a location.\n   */\n  end: (editor: Editor, at: Location) => Point\n\n  /**\n   * Get the first node at a location.\n   */\n  first: (editor: Editor, at: Location) => NodeEntry\n\n  /**\n   * Get the fragment at a location.\n   */\n  fragment: (editor: Editor, at: Location) => Descendant[]\n\n  /**\n   * Check if a node has block children.\n   */\n  hasBlocks: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a node has inline and text children.\n   */\n  hasInlines: (editor: Editor, element: Element) => boolean\n\n  hasPath: (editor: Editor, path: Path) => boolean\n\n  /**\n   * Check if a node has text children.\n   */\n  hasTexts: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Insert a block break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n  insertBreak: (editor: Editor) => void\n\n  /**\n   * Inserts a fragment\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: TextInsertFragmentOptions\n  ) => void\n\n  /**\n   * Atomically inserts `nodes`\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertNode: <T extends Node>(\n    editor: Editor,\n    node: Node,\n    options?: NodeInsertNodesOptions<T>\n  ) => void\n\n  /**\n   * Insert a soft break at the current selection.\n   *\n   * If the selection is currently expanded, it will be deleted first.\n   */\n  insertSoftBreak: (editor: Editor) => void\n\n  /**\n   * Insert a string of text\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: TextInsertTextOptions\n  ) => void\n\n  /**\n   * Check if a value is a block `Element` object.\n   */\n  isBlock: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Check if a point is an edge of a location.\n   */\n  isEdge: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is an `Editor` object.\n   */\n  isEditor: (value: any, options?: EditorIsEditorOptions) => value is Editor\n\n  /**\n   * Check if a value is a read-only `Element` object.\n   */\n  isElementReadOnly: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if an element is empty, accounting for void nodes.\n   */\n  isEmpty: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a point is the end point of a location.\n   */\n  isEnd: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is an inline `Element` object.\n   */\n  isInline: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Check if the editor is currently normalizing after each operation.\n   */\n  isNormalizing: (editor: Editor) => boolean\n\n  /**\n   * Check if a value is a selectable `Element` object.\n   */\n  isSelectable: (editor: Editor, element: Element) => boolean\n\n  /**\n   * Check if a point is the start point of a location.\n   */\n  isStart: (editor: Editor, point: Point, at: Location) => boolean\n\n  /**\n   * Check if a value is a void `Element` object.\n   */\n  isVoid: (editor: Editor, value: Element) => boolean\n\n  /**\n   * Get the last node at a location.\n   */\n  last: (editor: Editor, at: Location) => NodeEntry\n\n  /**\n   * Get the leaf text node at a location.\n   */\n  leaf: (\n    editor: Editor,\n    at: Location,\n    options?: EditorLeafOptions\n  ) => NodeEntry<Text>\n\n  /**\n   * Iterate through all of the levels at a location.\n   */\n  levels: <T extends Node>(\n    editor: Editor,\n    options?: EditorLevelsOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n\n  /**\n   * Get the marks that would be added to text at the current selection.\n   */\n  marks: (editor: Editor) => Omit<Text, 'text'> | null\n\n  /**\n   * Get the matching node in the branch of the document after a location.\n   */\n  next: <T extends Descendant>(\n    editor: Editor,\n    options?: EditorNextOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Get the node at a location.\n   */\n  node: (editor: Editor, at: Location, options?: EditorNodeOptions) => NodeEntry\n\n  /**\n   * Iterate through all of the nodes in the Editor.\n   */\n  nodes: <T extends Node>(\n    editor: Editor,\n    options?: EditorNodesOptions<T>\n  ) => Generator<NodeEntry<T>, void, undefined>\n\n  /**\n   * Normalize any dirty objects in the editor.\n   */\n  normalize: (editor: Editor, options?: EditorNormalizeOptions) => void\n\n  /**\n   * Get the parent node of a location.\n   */\n  parent: (\n    editor: Editor,\n    at: Location,\n    options?: EditorParentOptions\n  ) => NodeEntry<Ancestor>\n\n  /**\n   * Get the path of a location.\n   */\n  path: (editor: Editor, at: Location, options?: EditorPathOptions) => Path\n\n  /**\n   * Create a mutable ref for a `Path` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  pathRef: (\n    editor: Editor,\n    path: Path,\n    options?: EditorPathRefOptions\n  ) => PathRef\n\n  /**\n   * Get the set of currently tracked path refs of the editor.\n   */\n  pathRefs: (editor: Editor) => Set<PathRef>\n\n  /**\n   * Get the start or end point of a location.\n   */\n  point: (editor: Editor, at: Location, options?: EditorPointOptions) => Point\n\n  /**\n   * Create a mutable ref for a `Point` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  pointRef: (\n    editor: Editor,\n    point: Point,\n    options?: EditorPointRefOptions\n  ) => PointRef\n\n  /**\n   * Get the set of currently tracked point refs of the editor.\n   */\n  pointRefs: (editor: Editor) => Set<PointRef>\n\n  /**\n   * Return all the positions in `at` range where a `Point` can be placed.\n   *\n   * By default, moves forward by individual offsets at a time, but\n   * the `unit` option can be used to to move by character, word, line, or block.\n   *\n   * The `reverse` option can be used to change iteration direction.\n   *\n   * Note: By default void nodes are treated as a single point and iteration\n   * will not happen inside their content unless you pass in true for the\n   * `voids` option, then iteration will occur.\n   */\n  positions: (\n    editor: Editor,\n    options?: EditorPositionsOptions\n  ) => Generator<Point, void, undefined>\n\n  /**\n   * Get the matching node in the branch of the document before a location.\n   */\n  previous: <T extends Node>(\n    editor: Editor,\n    options?: EditorPreviousOptions<T>\n  ) => NodeEntry<T> | undefined\n\n  /**\n   * Get a range of a location.\n   */\n  range: (editor: Editor, at: Location, to?: Location) => Range\n\n  /**\n   * Create a mutable ref for a `Range` object, which will stay in sync as new\n   * operations are applied to the editor.\n   */\n  rangeRef: (\n    editor: Editor,\n    range: Range,\n    options?: EditorRangeRefOptions\n  ) => RangeRef\n\n  /**\n   * Get the set of currently tracked range refs of the editor.\n   */\n  rangeRefs: (editor: Editor) => Set<RangeRef>\n\n  /**\n   * Remove a custom property from all of the leaf text nodes in the current\n   * selection.\n   *\n   * If the selection is currently collapsed, the removal will be stored on\n   * `editor.marks` and applied to the text inserted next.\n   */\n  removeMark: (editor: Editor, key: string) => void\n\n  /**\n   * Manually set if the editor should currently be normalizing.\n   *\n   * Note: Using this incorrectly can leave the editor in an invalid state.\n   *\n   */\n  setNormalizing: (editor: Editor, isNormalizing: boolean) => void\n\n  /**\n   * Get the start point of a location.\n   */\n  start: (editor: Editor, at: Location) => Point\n\n  /**\n   * Get the text string content of a location.\n   *\n   * Note: by default the text of void nodes is considered to be an empty\n   * string, regardless of content, unless you pass in true for the voids option\n   */\n  string: (\n    editor: Editor,\n    at: Location,\n    options?: EditorStringOptions\n  ) => string\n\n  /**\n   * Convert a range into a non-hanging one.\n   */\n  unhangRange: (\n    editor: Editor,\n    range: Range,\n    options?: EditorUnhangRangeOptions\n  ) => Range\n\n  /**\n   * Match a void node in the current branch of the editor.\n   */\n  void: (\n    editor: Editor,\n    options?: EditorVoidOptions\n  ) => NodeEntry<Element> | undefined\n\n  /**\n   * Call a function, deferring normalization until after it completes.\n   */\n  withoutNormalizing: (editor: Editor, fn: () => void) => void\n\n  /**\n   *  Call a function, Determine whether or not remove the previous node when merge.\n   */\n  shouldMergeNodesRemovePrevNode: (\n    editor: Editor,\n    prevNodeEntry: NodeEntry,\n    curNodeEntry: NodeEntry\n  ) => boolean\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Editor: EditorInterface = {\n  above(editor, options) {\n    return editor.above(options)\n  },\n\n  addMark(editor, key, value) {\n    editor.addMark(key, value)\n  },\n\n  after(editor, at, options) {\n    return editor.after(at, options)\n  },\n\n  before(editor, at, options) {\n    return editor.before(at, options)\n  },\n\n  deleteBackward(editor, options = {}) {\n    const { unit = 'character' } = options\n    editor.deleteBackward(unit)\n  },\n\n  deleteForward(editor, options = {}) {\n    const { unit = 'character' } = options\n    editor.deleteForward(unit)\n  },\n\n  deleteFragment(editor, options) {\n    editor.deleteFragment(options)\n  },\n\n  edges(editor, at) {\n    return editor.edges(at)\n  },\n\n  elementReadOnly(editor: Editor, options: EditorElementReadOnlyOptions = {}) {\n    return editor.elementReadOnly(options)\n  },\n\n  end(editor, at) {\n    return editor.end(at)\n  },\n\n  first(editor, at) {\n    return editor.first(at)\n  },\n\n  fragment(editor, at) {\n    return editor.fragment(at)\n  },\n\n  hasBlocks(editor, element) {\n    return editor.hasBlocks(element)\n  },\n\n  hasInlines(editor, element) {\n    return editor.hasInlines(element)\n  },\n\n  hasPath(editor, path) {\n    return editor.hasPath(path)\n  },\n\n  hasTexts(editor, element) {\n    return editor.hasTexts(element)\n  },\n\n  insertBreak(editor) {\n    editor.insertBreak()\n  },\n\n  insertFragment(editor, fragment, options) {\n    editor.insertFragment(fragment, options)\n  },\n\n  insertNode(editor, node) {\n    editor.insertNode(node)\n  },\n\n  insertSoftBreak(editor) {\n    editor.insertSoftBreak()\n  },\n\n  insertText(editor, text) {\n    editor.insertText(text)\n  },\n\n  isBlock(editor, value) {\n    return editor.isBlock(value)\n  },\n\n  isEdge(editor, point, at) {\n    return editor.isEdge(point, at)\n  },\n\n  isEditor(value: any): value is Editor {\n    return isEditor(value)\n  },\n\n  isElementReadOnly(editor, element) {\n    return editor.isElementReadOnly(element)\n  },\n\n  isEmpty(editor, element) {\n    return editor.isEmpty(element)\n  },\n\n  isEnd(editor, point, at) {\n    return editor.isEnd(point, at)\n  },\n\n  isInline(editor, value) {\n    return editor.isInline(value)\n  },\n\n  isNormalizing(editor) {\n    return editor.isNormalizing()\n  },\n\n  isSelectable(editor: Editor, value: Element) {\n    return editor.isSelectable(value)\n  },\n\n  isStart(editor, point, at) {\n    return editor.isStart(point, at)\n  },\n\n  isVoid(editor, value) {\n    return editor.isVoid(value)\n  },\n\n  last(editor, at) {\n    return editor.last(at)\n  },\n\n  leaf(editor, at, options) {\n    return editor.leaf(at, options)\n  },\n\n  levels(editor, options) {\n    return editor.levels(options)\n  },\n\n  marks(editor) {\n    return editor.getMarks()\n  },\n\n  next<T extends Descendant>(\n    editor: Editor,\n    options?: EditorNextOptions<T>\n  ): NodeEntry<T> | undefined {\n    return editor.next(options)\n  },\n\n  node(editor, at, options) {\n    return editor.node(at, options)\n  },\n\n  nodes(editor, options) {\n    return editor.nodes(options)\n  },\n\n  normalize(editor, options) {\n    editor.normalize(options)\n  },\n\n  parent(editor, at, options) {\n    return editor.parent(at, options)\n  },\n\n  path(editor, at, options) {\n    return editor.path(at, options)\n  },\n\n  pathRef(editor, path, options) {\n    return editor.pathRef(path, options)\n  },\n\n  pathRefs(editor) {\n    return editor.pathRefs()\n  },\n\n  point(editor, at, options) {\n    return editor.point(at, options)\n  },\n\n  pointRef(editor, point, options) {\n    return editor.pointRef(point, options)\n  },\n\n  pointRefs(editor) {\n    return editor.pointRefs()\n  },\n\n  positions(editor, options) {\n    return editor.positions(options)\n  },\n\n  previous(editor, options) {\n    return editor.previous(options)\n  },\n\n  range(editor, at, to) {\n    return editor.range(at, to)\n  },\n\n  rangeRef(editor, range, options) {\n    return editor.rangeRef(range, options)\n  },\n\n  rangeRefs(editor) {\n    return editor.rangeRefs()\n  },\n\n  removeMark(editor, key) {\n    editor.removeMark(key)\n  },\n\n  setNormalizing(editor, isNormalizing) {\n    editor.setNormalizing(isNormalizing)\n  },\n\n  start(editor, at) {\n    return editor.start(at)\n  },\n\n  string(editor, at, options) {\n    return editor.string(at, options)\n  },\n\n  unhangRange(editor, range, options) {\n    return editor.unhangRange(range, options)\n  },\n\n  void(editor, options) {\n    return editor.void(options)\n  },\n\n  withoutNormalizing(editor, fn: () => void) {\n    editor.withoutNormalizing(fn)\n  },\n  shouldMergeNodesRemovePrevNode: (editor, prevNode, curNode) => {\n    return editor.shouldMergeNodesRemovePrevNode(prevNode, curNode)\n  },\n}\n\n/**\n * A helper type for narrowing matched nodes with a predicate.\n */\n\nexport type NodeMatch<T extends Node> =\n  | ((node: Node, path: Path) => node is T)\n  | ((node: Node, path: Path) => boolean)\n\nexport type PropsCompare = (prop: Partial<Node>, node: Partial<Node>) => boolean\nexport type PropsMerge = (prop: Partial<Node>, node: Partial<Node>) => object\n", "import { Path, Point, Range } from '..'\n\n/**\n * The `Location` interface is a union of the ways to refer to a specific\n * location in a Slate document: paths, points or ranges.\n *\n * Methods will often accept a `Location` instead of requiring only a `Path`,\n * `Point` or `Range`. This eliminates the need for developers to manage\n * converting between the different interfaces in their own code base.\n */\n\nexport type Location = Path | Point | Range\n\nexport interface LocationInterface {\n  /**\n   * Check if a value implements the `Location` interface.\n   */\n  isLocation: (value: any) => value is Location\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Location: LocationInterface = {\n  isLocation(value: any): value is Location {\n    return Path.isPath(value) || Point.isPoint(value) || Range.isRange(value)\n  },\n}\n\n/**\n * The `Span` interface is a low-level way to refer to locations in nodes\n * without using `Point` which requires leaf text nodes to be present.\n */\n\nexport type Span = [Path, Path]\n\nexport interface SpanInterface {\n  /**\n   * Check if a value implements the `Span` interface.\n   */\n  isSpan: (value: any) => value is Span\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Span: SpanInterface = {\n  isSpan(value: any): value is Span {\n    return (\n      Array.isArray(value) && value.length === 2 && value.every(Path.isPath)\n    )\n  },\n}\n", "import { ExtendedType, Operation, Path, isObject } from '..'\nimport { TextDirection } from '../types/types'\n\n/**\n * `Point` objects refer to a specific location in a text node in a Slate\n * document. Its path refers to the location of the node in the tree, and its\n * offset refers to the distance into the node's string of text. Points can\n * only refer to `Text` nodes.\n */\n\nexport interface BasePoint {\n  path: Path\n  offset: number\n}\n\nexport type Point = ExtendedType<'Point', BasePoint>\n\nexport interface PointTransformOptions {\n  affinity?: TextDirection | null\n}\n\nexport interface PointInterface {\n  /**\n   * Compare a point to another, returning an integer indicating whether the\n   * point was before, at, or after the other.\n   */\n  compare: (point: Point, another: Point) => -1 | 0 | 1\n\n  /**\n   * Check if a point is after another.\n   */\n  isAfter: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a point is before another.\n   */\n  isBefore: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a point is exactly equal to another.\n   */\n  equals: (point: Point, another: Point) => boolean\n\n  /**\n   * Check if a value implements the `Point` interface.\n   */\n  isPoint: (value: any) => value is Point\n\n  /**\n   * Transform a point by an operation.\n   */\n  transform: (\n    point: Point,\n    op: Operation,\n    options?: PointTransformOptions\n  ) => Point | null\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Point: PointInterface = {\n  compare(point: Point, another: Point): -1 | 0 | 1 {\n    const result = Path.compare(point.path, another.path)\n\n    if (result === 0) {\n      if (point.offset < another.offset) return -1\n      if (point.offset > another.offset) return 1\n      return 0\n    }\n\n    return result\n  },\n\n  isAfter(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === 1\n  },\n\n  isBefore(point: Point, another: Point): boolean {\n    return Point.compare(point, another) === -1\n  },\n\n  equals(point: Point, another: Point): boolean {\n    // PERF: ensure the offsets are equal first since they are cheaper to check.\n    return (\n      point.offset === another.offset && Path.equals(point.path, another.path)\n    )\n  },\n\n  isPoint(value: any): value is Point {\n    return (\n      isObject(value) &&\n      typeof value.offset === 'number' &&\n      Path.isPath(value.path)\n    )\n  },\n\n  transform(\n    point: Point | null,\n    op: Operation,\n    options: PointTransformOptions = {}\n  ): Point | null {\n    if (point === null) {\n      return null\n    }\n\n    const { affinity = 'forward' } = options\n    let { path, offset } = point\n\n    switch (op.type) {\n      case 'insert_node':\n      case 'move_node': {\n        path = Path.transform(path, op, options)!\n        break\n      }\n\n      case 'insert_text': {\n        if (\n          Path.equals(op.path, path) &&\n          (op.offset < offset ||\n            (op.offset === offset && affinity === 'forward'))\n        ) {\n          offset += op.text.length\n        }\n\n        break\n      }\n\n      case 'merge_node': {\n        if (Path.equals(op.path, path)) {\n          offset += op.position\n        }\n\n        path = Path.transform(path, op, options)!\n        break\n      }\n\n      case 'remove_text': {\n        if (Path.equals(op.path, path) && op.offset <= offset) {\n          offset -= Math.min(offset - op.offset, op.text.length)\n        }\n\n        break\n      }\n\n      case 'remove_node': {\n        if (Path.equals(op.path, path) || Path.isAncestor(op.path, path)) {\n          return null\n        }\n\n        path = Path.transform(path, op, options)!\n        break\n      }\n\n      case 'split_node': {\n        if (Path.equals(op.path, path)) {\n          if (op.position === offset && affinity == null) {\n            return null\n          } else if (\n            op.position < offset ||\n            (op.position === offset && affinity === 'forward')\n          ) {\n            offset -= op.position\n\n            path = Path.transform(path, op, {\n              ...options,\n              affinity: 'forward',\n            })!\n          }\n        } else {\n          path = Path.transform(path, op, options)!\n        }\n\n        break\n      }\n\n      default:\n        return point\n    }\n\n    return { path, offset }\n  },\n}\n\n/**\n * `PointEntry` objects are returned when iterating over `Point` objects that\n * belong to a range.\n */\n\nexport type PointEntry = [Point, 'anchor' | 'focus']\n", "export type Scrubber = (key: string, value: unknown) => unknown\n\nexport interface ScrubberInterface {\n  setScrubber(scrubber: Scrubber | undefined): void\n  stringify(value: any): string\n}\n\nlet _scrubber: Scrubber | undefined = undefined\n\n/**\n * This interface implements a stringify() function, which is used by Slate\n * internally when generating exceptions containing end user data. Developers\n * using Slate may call Scrubber.setScrubber() to alter the behavior of this\n * stringify() function.\n *\n * For example, to prevent the cleartext logging of 'text' fields within Nodes:\n *\n *    import { Scrubber } from 'slate';\n *    Scrubber.setScrubber((key, val) => {\n *      if (key === 'text') return '...scrubbed...'\n *      return val\n *    });\n *\n */\n// eslint-disable-next-line no-redeclare\nexport const Scrubber: ScrubberInterface = {\n  setScrubber(scrubber: Scrubber | undefined): void {\n    _scrubber = scrubber\n  },\n\n  stringify(value: any): string {\n    return JSON.stringify(value, _scrubber)\n  },\n}\n", "import { Range, isObject } from '..'\nimport { ExtendedType } from '../types/custom-types'\nimport { isDeepEqual } from '../utils/deep-equal'\n\n/**\n * `Text` objects represent the nodes that contain the actual text content of a\n * Slate document along with any formatting properties. They are always leaf\n * nodes in the document tree as they cannot contain any children.\n */\n\nexport interface BaseText {\n  text: string\n}\n\nexport type Text = ExtendedType<'Text', BaseText>\n\nexport interface LeafPosition {\n  start: number\n  end: number\n  isFirst?: true\n  isLast?: true\n}\n\nexport interface TextEqualsOptions {\n  loose?: boolean\n}\n\nexport type DecoratedRange = Range & {\n  /**\n   * Customize how another decoration is merged into a text node. If not specified, `Object.assign` would be used.\n   * It is useful for overlapping decorations with the same key but different values.\n   */\n  merge?: (leaf: Text, decoration: object) => void\n}\n\nexport interface TextInterface {\n  /**\n   * Check if two text nodes are equal.\n   *\n   * When loose is set, the text is not compared. This is\n   * used to check whether sibling text nodes can be merged.\n   */\n  equals: (text: Text, another: Text, options?: TextEqualsOptions) => boolean\n\n  /**\n   * Check if a value implements the `Text` interface.\n   */\n  isText: (value: any) => value is Text\n\n  /**\n   * Check if a value is a list of `Text` objects.\n   */\n  isTextList: (value: any) => value is Text[]\n\n  /**\n   * Check if some props are a partial of Text.\n   */\n  isTextProps: (props: any) => props is Partial<Text>\n\n  /**\n   * Check if an text matches set of properties.\n   *\n   * Note: this is for matching custom properties, and it does not ensure that\n   * the `text` property are two nodes equal.\n   */\n  matches: (text: Text, props: Partial<Text>) => boolean\n\n  /**\n   * Get the leaves for a text node given decorations.\n   */\n  decorations: (\n    node: Text,\n    decorations: DecoratedRange[]\n  ) => { leaf: Text; position?: LeafPosition }[]\n}\n\n// eslint-disable-next-line no-redeclare\nexport const Text: TextInterface = {\n  equals(text: Text, another: Text, options: TextEqualsOptions = {}): boolean {\n    const { loose = false } = options\n\n    function omitText(obj: Record<any, any>) {\n      const { text, ...rest } = obj\n\n      return rest\n    }\n\n    return isDeepEqual(\n      loose ? omitText(text) : text,\n      loose ? omitText(another) : another\n    )\n  },\n\n  isText(value: any): value is Text {\n    return isObject(value) && typeof value.text === 'string'\n  },\n\n  isTextList(value: any): value is Text[] {\n    return Array.isArray(value) && value.every(val => Text.isText(val))\n  },\n\n  isTextProps(props: any): props is Partial<Text> {\n    return (props as Partial<Text>).text !== undefined\n  },\n\n  matches(text: Text, props: Partial<Text>): boolean {\n    for (const key in props) {\n      if (key === 'text') {\n        continue\n      }\n\n      if (\n        !text.hasOwnProperty(key) ||\n        text[<keyof Text>key] !== props[<keyof Text>key]\n      ) {\n        return false\n      }\n    }\n\n    return true\n  },\n\n  decorations(\n    node: Text,\n    decorations: DecoratedRange[]\n  ): { leaf: Text; position?: LeafPosition }[] {\n    let leaves: { leaf: Text; position?: LeafPosition }[] = [\n      { leaf: { ...node } },\n    ]\n\n    for (const dec of decorations) {\n      const { anchor, focus, merge: mergeDecoration, ...rest } = dec\n      const [start, end] = Range.edges(dec)\n      const next = []\n      let leafEnd = 0\n      const decorationStart = start.offset\n      const decorationEnd = end.offset\n      const merge = mergeDecoration ?? Object.assign\n\n      for (const { leaf } of leaves) {\n        const { length } = leaf.text\n        const leafStart = leafEnd\n        leafEnd += length\n\n        // If the range encompasses the entire leaf, add the range.\n        if (decorationStart <= leafStart && leafEnd <= decorationEnd) {\n          merge(leaf, rest)\n          next.push({ leaf })\n          continue\n        }\n\n        // If the range expanded and match the leaf, or starts after, or ends before it, continue.\n        if (\n          (decorationStart !== decorationEnd &&\n            (decorationStart === leafEnd || decorationEnd === leafStart)) ||\n          decorationStart > leafEnd ||\n          decorationEnd < leafStart ||\n          (decorationEnd === leafStart && leafStart !== 0)\n        ) {\n          next.push({ leaf })\n          continue\n        }\n\n        // Otherwise we need to split the leaf, at the start, end, or both,\n        // and add the range to the middle intersecting section. Do the end\n        // split first since we don't need to update the offset that way.\n        let middle = leaf\n        let before\n        let after\n\n        if (decorationEnd < leafEnd) {\n          const off = decorationEnd - leafStart\n          after = { leaf: { ...middle, text: middle.text.slice(off) } }\n          middle = { ...middle, text: middle.text.slice(0, off) }\n        }\n\n        if (decorationStart > leafStart) {\n          const off = decorationStart - leafStart\n          before = { leaf: { ...middle, text: middle.text.slice(0, off) } }\n          middle = { ...middle, text: middle.text.slice(off) }\n        }\n\n        merge(middle, rest)\n\n        if (before) {\n          next.push(before)\n        }\n\n        next.push({ leaf: middle })\n\n        if (after) {\n          next.push(after)\n        }\n      }\n\n      leaves = next\n    }\n\n    if (leaves.length > 1) {\n      let currentOffset = 0\n      for (const [index, item] of leaves.entries()) {\n        const start = currentOffset\n        const end = start + item.leaf.text.length\n        const position: LeafPosition = { start, end }\n\n        if (index === 0) position.isFirst = true\n        if (index === leaves.length - 1) position.isLast = true\n\n        item.position = position\n        currentOffset = end\n      }\n    }\n\n    return leaves\n  },\n}\n", "import { Editor, Location } from '../interfaces'\n\n/**\n * Get the default location to insert content into the editor.\n * By default, use the selection as the target location. But if there is\n * no selection, insert at the end of the document since that is such a\n * common use case when inserting from a non-selected state.\n */\nexport const getDefaultInsertLocation = (editor: Editor): Location => {\n  if (editor.selection) {\n    return editor.selection\n  } else if (editor.children.length > 0) {\n    return Editor.end(editor, [])\n  } else {\n    return [0]\n  }\n}\n", "import { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\n\nexport const matchPath = (\n  editor: Editor,\n  path: Path\n): ((node: Node) => boolean) => {\n  const [node] = Editor.node(editor, path)\n  return n => n === node\n}\n", "// Character (grapheme cluster) boundaries are determined according to\n// the default grapheme cluster boundary specification, extended grapheme clusters variant[1].\n//\n// References:\n//\n// [1] https://www.unicode.org/reports/tr29/#Default_Grapheme_Cluster_Table\n// [2] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakProperty.txt\n// [3] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.html\n// [4] https://www.unicode.org/Public/UCD/latest/ucd/auxiliary/GraphemeBreakTest.txt\n\n/**\n * Get the distance to the end of the first character in a string of text.\n */\n\nexport const getCharacterDistance = (str: string, isRTL = false): number => {\n  const isLTR = !isRTL\n  const codepoints = isRTL ? codepointsIteratorRTL(str) : str\n\n  let left: CodepointType = CodepointType.None\n  let right: CodepointType = CodepointType.None\n  let distance = 0\n  // Evaluation of these conditions are deferred.\n  let gb11: boolean | null = null // Is GB11 applicable?\n  let gb12Or13: boolean | null = null // Is GB12 or GB13 applicable?\n\n  for (const char of codepoints) {\n    const code = char.codePointAt(0)\n    if (!code) break\n\n    const type = getCodepointType(char, code)\n    ;[left, right] = isLTR ? [right, type] : [type, left]\n\n    if (\n      intersects(left, CodepointType.ZWJ) &&\n      intersects(right, CodepointType.ExtPict)\n    ) {\n      if (isLTR) {\n        gb11 = endsWithEmojiZWJ(str.substring(0, distance))\n      } else {\n        gb11 = endsWithEmojiZWJ(str.substring(0, str.length - distance))\n      }\n      if (!gb11) break\n    }\n\n    if (\n      intersects(left, CodepointType.RI) &&\n      intersects(right, CodepointType.RI)\n    ) {\n      if (gb12Or13 !== null) {\n        gb12Or13 = !gb12Or13\n      } else {\n        if (isLTR) {\n          gb12Or13 = true\n        } else {\n          gb12Or13 = endsWithOddNumberOfRIs(\n            str.substring(0, str.length - distance)\n          )\n        }\n      }\n      if (!gb12Or13) break\n    }\n\n    if (\n      left !== CodepointType.None &&\n      right !== CodepointType.None &&\n      isBoundaryPair(left, right)\n    ) {\n      break\n    }\n\n    distance += char.length\n  }\n\n  return distance || 1\n}\n\nconst SPACE = /\\s/\nconst PUNCTUATION =\n  /[\\u002B\\u0021-\\u0023\\u0025-\\u002A\\u002C-\\u002F\\u003A\\u003B\\u003F\\u0040\\u005B-\\u005D\\u005F\\u007B\\u007D\\u00A1\\u00A7\\u00AB\\u00B6\\u00B7\\u00BB\\u00BF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061E\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u0AF0\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166D\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B5A-\\u1B60\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E3B\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]/\nconst CHAMELEON = /['\\u2018\\u2019]/\n\n/**\n * Get the distance to the end of the first word in a string of text.\n */\n\nexport const getWordDistance = (text: string, isRTL = false): number => {\n  let dist = 0\n  let started = false\n\n  while (text.length > 0) {\n    const charDist = getCharacterDistance(text, isRTL)\n    const [char, remaining] = splitByCharacterDistance(text, charDist, isRTL)\n\n    if (isWordCharacter(char, remaining, isRTL)) {\n      started = true\n      dist += charDist\n    } else if (!started) {\n      dist += charDist\n    } else {\n      break\n    }\n\n    text = remaining\n  }\n\n  return dist\n}\n\n/**\n * Split a string in two parts at a given distance starting from the end when\n * `isRTL` is set to `true`.\n */\n\nexport const splitByCharacterDistance = (\n  str: string,\n  dist: number,\n  isRTL?: boolean\n): [string, string] => {\n  if (isRTL) {\n    const at = str.length - dist\n    return [str.slice(at, str.length), str.slice(0, at)]\n  }\n\n  return [str.slice(0, dist), str.slice(dist)]\n}\n\n/**\n * Check if a character is a word character. The `remaining` argument is used\n * because sometimes you must read subsequent characters to truly determine it.\n */\n\nconst isWordCharacter = (\n  char: string,\n  remaining: string,\n  isRTL = false\n): boolean => {\n  if (SPACE.test(char)) {\n    return false\n  }\n\n  // Chameleons count as word characters as long as they're in a word, so\n  // recurse to see if the next one is a word character or not.\n  if (CHAMELEON.test(char)) {\n    const charDist = getCharacterDistance(remaining, isRTL)\n    const [nextChar, nextRemaining] = splitByCharacterDistance(\n      remaining,\n      charDist,\n      isRTL\n    )\n\n    if (isWordCharacter(nextChar, nextRemaining, isRTL)) {\n      return true\n    }\n  }\n\n  if (PUNCTUATION.test(char)) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * Iterate on codepoints from right to left.\n */\n\nexport const codepointsIteratorRTL = function* (str: string) {\n  const end = str.length - 1\n\n  for (let i = 0; i < str.length; i++) {\n    const char1 = str.charAt(end - i)\n\n    if (isLowSurrogate(char1.charCodeAt(0))) {\n      const char2 = str.charAt(end - i - 1)\n      if (isHighSurrogate(char2.charCodeAt(0))) {\n        yield char2 + char1\n\n        i++\n        continue\n      }\n    }\n\n    yield char1\n  }\n}\n\n/**\n * Is `charCode` a high surrogate.\n *\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n */\n\nconst isHighSurrogate = (charCode: number) => {\n  return charCode >= 0xd800 && charCode <= 0xdbff\n}\n\n/**\n * Is `charCode` a low surrogate.\n *\n * https://en.wikipedia.org/wiki/Universal_Character_Set_characters#Surrogates\n */\n\nconst isLowSurrogate = (charCode: number) => {\n  return charCode >= 0xdc00 && charCode <= 0xdfff\n}\n\nenum CodepointType {\n  None = 0,\n  Extend = 1 << 0,\n  ZWJ = 1 << 1,\n  RI = 1 << 2,\n  Prepend = 1 << 3,\n  SpacingMark = 1 << 4,\n  L = 1 << 5,\n  V = 1 << 6,\n  T = 1 << 7,\n  LV = 1 << 8,\n  LVT = 1 << 9,\n  ExtPict = 1 << 10,\n  Any = 1 << 11,\n}\n\nconst reExtend = /^[\\p{Gr_Ext}\\p{EMod}]$/u\nconst rePrepend =\n  /^[\\u0600-\\u0605\\u06DD\\u070F\\u0890-\\u0891\\u08E2\\u0D4E\\u{110BD}\\u{110CD}\\u{111C2}-\\u{111C3}\\u{1193F}\\u{11941}\\u{11A3A}\\u{11A84}-\\u{11A89}\\u{11D46}]$/u\nconst reSpacingMark =\n  /^[\\u0903\\u093B\\u093E-\\u0940\\u0949-\\u094C\\u094E-\\u094F\\u0982-\\u0983\\u09BF-\\u09C0\\u09C7-\\u09C8\\u09CB-\\u09CC\\u0A03\\u0A3E-\\u0A40\\u0A83\\u0ABE-\\u0AC0\\u0AC9\\u0ACB-\\u0ACC\\u0B02-\\u0B03\\u0B40\\u0B47-\\u0B48\\u0B4B-\\u0B4C\\u0BBF\\u0BC1-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCC\\u0C01-\\u0C03\\u0C41-\\u0C44\\u0C82-\\u0C83\\u0CBE\\u0CC0-\\u0CC1\\u0CC3-\\u0CC4\\u0CC7-\\u0CC8\\u0CCA-\\u0CCB\\u0D02-\\u0D03\\u0D3F-\\u0D40\\u0D46-\\u0D48\\u0D4A-\\u0D4C\\u0D82-\\u0D83\\u0DD0-\\u0DD1\\u0DD8-\\u0DDE\\u0DF2-\\u0DF3\\u0E33\\u0EB3\\u0F3E-\\u0F3F\\u0F7F\\u1031\\u103B-\\u103C\\u1056-\\u1057\\u1084\\u1715\\u1734\\u17B6\\u17BE-\\u17C5\\u17C7-\\u17C8\\u1923-\\u1926\\u1929-\\u192B\\u1930-\\u1931\\u1933-\\u1938\\u1A19-\\u1A1A\\u1A55\\u1A57\\u1A6D-\\u1A72\\u1B04\\u1B3B\\u1B3D-\\u1B41\\u1B43-\\u1B44\\u1B82\\u1BA1\\u1BA6-\\u1BA7\\u1BAA\\u1BE7\\u1BEA-\\u1BEC\\u1BEE\\u1BF2-\\u1BF3\\u1C24-\\u1C2B\\u1C34-\\u1C35\\u1CE1\\u1CF7\\uA823-\\uA824\\uA827\\uA880-\\uA881\\uA8B4-\\uA8C3\\uA952-\\uA953\\uA983\\uA9B4-\\uA9B5\\uA9BA-\\uA9BB\\uA9BE-\\uA9C0\\uAA2F-\\uAA30\\uAA33-\\uAA34\\uAA4D\\uAAEB\\uAAEE-\\uAAEF\\uAAF5\\uABE3-\\uABE4\\uABE6-\\uABE7\\uABE9-\\uABEA\\uABEC\\u{11000}\\u{11002}\\u{11082}\\u{110B0}-\\u{110B2}\\u{110B7}-\\u{110B8}\\u{1112C}\\u{11145}-\\u{11146}\\u{11182}\\u{111B3}-\\u{111B5}\\u{111BF}-\\u{111C0}\\u{111CE}\\u{1122C}-\\u{1122E}\\u{11232}-\\u{11233}\\u{11235}\\u{112E0}-\\u{112E2}\\u{11302}-\\u{11303}\\u{1133F}\\u{11341}-\\u{11344}\\u{11347}-\\u{11348}\\u{1134B}-\\u{1134D}\\u{11362}-\\u{11363}\\u{11435}-\\u{11437}\\u{11440}-\\u{11441}\\u{11445}\\u{114B1}-\\u{114B2}\\u{114B9}\\u{114BB}-\\u{114BC}\\u{114BE}\\u{114C1}\\u{115B0}-\\u{115B1}\\u{115B8}-\\u{115BB}\\u{115BE}\\u{11630}-\\u{11632}\\u{1163B}-\\u{1163C}\\u{1163E}\\u{116AC}\\u{116AE}-\\u{116AF}\\u{116B6}\\u{11726}\\u{1182C}-\\u{1182E}\\u{11838}\\u{11931}-\\u{11935}\\u{11937}-\\u{11938}\\u{1193D}\\u{11940}\\u{11942}\\u{119D1}-\\u{119D3}\\u{119DC}-\\u{119DF}\\u{119E4}\\u{11A39}\\u{11A57}-\\u{11A58}\\u{11A97}\\u{11C2F}\\u{11C3E}\\u{11CA9}\\u{11CB1}\\u{11CB4}\\u{11D8A}-\\u{11D8E}\\u{11D93}-\\u{11D94}\\u{11D96}\\u{11EF5}-\\u{11EF6}\\u{16F51}-\\u{16F87}\\u{16FF0}-\\u{16FF1}\\u{1D166}\\u{1D16D}]$/u\nconst reL = /^[\\u1100-\\u115F\\uA960-\\uA97C]$/u\nconst reV = /^[\\u1160-\\u11A7\\uD7B0-\\uD7C6]$/u\nconst reT = /^[\\u11A8-\\u11FF\\uD7CB-\\uD7FB]$/u\nconst reLV =\n  /^[\\uAC00\\uAC1C\\uAC38\\uAC54\\uAC70\\uAC8C\\uACA8\\uACC4\\uACE0\\uACFC\\uAD18\\uAD34\\uAD50\\uAD6C\\uAD88\\uADA4\\uADC0\\uADDC\\uADF8\\uAE14\\uAE30\\uAE4C\\uAE68\\uAE84\\uAEA0\\uAEBC\\uAED8\\uAEF4\\uAF10\\uAF2C\\uAF48\\uAF64\\uAF80\\uAF9C\\uAFB8\\uAFD4\\uAFF0\\uB00C\\uB028\\uB044\\uB060\\uB07C\\uB098\\uB0B4\\uB0D0\\uB0EC\\uB108\\uB124\\uB140\\uB15C\\uB178\\uB194\\uB1B0\\uB1CC\\uB1E8\\uB204\\uB220\\uB23C\\uB258\\uB274\\uB290\\uB2AC\\uB2C8\\uB2E4\\uB300\\uB31C\\uB338\\uB354\\uB370\\uB38C\\uB3A8\\uB3C4\\uB3E0\\uB3FC\\uB418\\uB434\\uB450\\uB46C\\uB488\\uB4A4\\uB4C0\\uB4DC\\uB4F8\\uB514\\uB530\\uB54C\\uB568\\uB584\\uB5A0\\uB5BC\\uB5D8\\uB5F4\\uB610\\uB62C\\uB648\\uB664\\uB680\\uB69C\\uB6B8\\uB6D4\\uB6F0\\uB70C\\uB728\\uB744\\uB760\\uB77C\\uB798\\uB7B4\\uB7D0\\uB7EC\\uB808\\uB824\\uB840\\uB85C\\uB878\\uB894\\uB8B0\\uB8CC\\uB8E8\\uB904\\uB920\\uB93C\\uB958\\uB974\\uB990\\uB9AC\\uB9C8\\uB9E4\\uBA00\\uBA1C\\uBA38\\uBA54\\uBA70\\uBA8C\\uBAA8\\uBAC4\\uBAE0\\uBAFC\\uBB18\\uBB34\\uBB50\\uBB6C\\uBB88\\uBBA4\\uBBC0\\uBBDC\\uBBF8\\uBC14\\uBC30\\uBC4C\\uBC68\\uBC84\\uBCA0\\uBCBC\\uBCD8\\uBCF4\\uBD10\\uBD2C\\uBD48\\uBD64\\uBD80\\uBD9C\\uBDB8\\uBDD4\\uBDF0\\uBE0C\\uBE28\\uBE44\\uBE60\\uBE7C\\uBE98\\uBEB4\\uBED0\\uBEEC\\uBF08\\uBF24\\uBF40\\uBF5C\\uBF78\\uBF94\\uBFB0\\uBFCC\\uBFE8\\uC004\\uC020\\uC03C\\uC058\\uC074\\uC090\\uC0AC\\uC0C8\\uC0E4\\uC100\\uC11C\\uC138\\uC154\\uC170\\uC18C\\uC1A8\\uC1C4\\uC1E0\\uC1FC\\uC218\\uC234\\uC250\\uC26C\\uC288\\uC2A4\\uC2C0\\uC2DC\\uC2F8\\uC314\\uC330\\uC34C\\uC368\\uC384\\uC3A0\\uC3BC\\uC3D8\\uC3F4\\uC410\\uC42C\\uC448\\uC464\\uC480\\uC49C\\uC4B8\\uC4D4\\uC4F0\\uC50C\\uC528\\uC544\\uC560\\uC57C\\uC598\\uC5B4\\uC5D0\\uC5EC\\uC608\\uC624\\uC640\\uC65C\\uC678\\uC694\\uC6B0\\uC6CC\\uC6E8\\uC704\\uC720\\uC73C\\uC758\\uC774\\uC790\\uC7AC\\uC7C8\\uC7E4\\uC800\\uC81C\\uC838\\uC854\\uC870\\uC88C\\uC8A8\\uC8C4\\uC8E0\\uC8FC\\uC918\\uC934\\uC950\\uC96C\\uC988\\uC9A4\\uC9C0\\uC9DC\\uC9F8\\uCA14\\uCA30\\uCA4C\\uCA68\\uCA84\\uCAA0\\uCABC\\uCAD8\\uCAF4\\uCB10\\uCB2C\\uCB48\\uCB64\\uCB80\\uCB9C\\uCBB8\\uCBD4\\uCBF0\\uCC0C\\uCC28\\uCC44\\uCC60\\uCC7C\\uCC98\\uCCB4\\uCCD0\\uCCEC\\uCD08\\uCD24\\uCD40\\uCD5C\\uCD78\\uCD94\\uCDB0\\uCDCC\\uCDE8\\uCE04\\uCE20\\uCE3C\\uCE58\\uCE74\\uCE90\\uCEAC\\uCEC8\\uCEE4\\uCF00\\uCF1C\\uCF38\\uCF54\\uCF70\\uCF8C\\uCFA8\\uCFC4\\uCFE0\\uCFFC\\uD018\\uD034\\uD050\\uD06C\\uD088\\uD0A4\\uD0C0\\uD0DC\\uD0F8\\uD114\\uD130\\uD14C\\uD168\\uD184\\uD1A0\\uD1BC\\uD1D8\\uD1F4\\uD210\\uD22C\\uD248\\uD264\\uD280\\uD29C\\uD2B8\\uD2D4\\uD2F0\\uD30C\\uD328\\uD344\\uD360\\uD37C\\uD398\\uD3B4\\uD3D0\\uD3EC\\uD408\\uD424\\uD440\\uD45C\\uD478\\uD494\\uD4B0\\uD4CC\\uD4E8\\uD504\\uD520\\uD53C\\uD558\\uD574\\uD590\\uD5AC\\uD5C8\\uD5E4\\uD600\\uD61C\\uD638\\uD654\\uD670\\uD68C\\uD6A8\\uD6C4\\uD6E0\\uD6FC\\uD718\\uD734\\uD750\\uD76C\\uD788]$/u\nconst reLVT =\n  /^[\\uAC01-\\uAC1B\\uAC1D-\\uAC37\\uAC39-\\uAC53\\uAC55-\\uAC6F\\uAC71-\\uAC8B\\uAC8D-\\uACA7\\uACA9-\\uACC3\\uACC5-\\uACDF\\uACE1-\\uACFB\\uACFD-\\uAD17\\uAD19-\\uAD33\\uAD35-\\uAD4F\\uAD51-\\uAD6B\\uAD6D-\\uAD87\\uAD89-\\uADA3\\uADA5-\\uADBF\\uADC1-\\uADDB\\uADDD-\\uADF7\\uADF9-\\uAE13\\uAE15-\\uAE2F\\uAE31-\\uAE4B\\uAE4D-\\uAE67\\uAE69-\\uAE83\\uAE85-\\uAE9F\\uAEA1-\\uAEBB\\uAEBD-\\uAED7\\uAED9-\\uAEF3\\uAEF5-\\uAF0F\\uAF11-\\uAF2B\\uAF2D-\\uAF47\\uAF49-\\uAF63\\uAF65-\\uAF7F\\uAF81-\\uAF9B\\uAF9D-\\uAFB7\\uAFB9-\\uAFD3\\uAFD5-\\uAFEF\\uAFF1-\\uB00B\\uB00D-\\uB027\\uB029-\\uB043\\uB045-\\uB05F\\uB061-\\uB07B\\uB07D-\\uB097\\uB099-\\uB0B3\\uB0B5-\\uB0CF\\uB0D1-\\uB0EB\\uB0ED-\\uB107\\uB109-\\uB123\\uB125-\\uB13F\\uB141-\\uB15B\\uB15D-\\uB177\\uB179-\\uB193\\uB195-\\uB1AF\\uB1B1-\\uB1CB\\uB1CD-\\uB1E7\\uB1E9-\\uB203\\uB205-\\uB21F\\uB221-\\uB23B\\uB23D-\\uB257\\uB259-\\uB273\\uB275-\\uB28F\\uB291-\\uB2AB\\uB2AD-\\uB2C7\\uB2C9-\\uB2E3\\uB2E5-\\uB2FF\\uB301-\\uB31B\\uB31D-\\uB337\\uB339-\\uB353\\uB355-\\uB36F\\uB371-\\uB38B\\uB38D-\\uB3A7\\uB3A9-\\uB3C3\\uB3C5-\\uB3DF\\uB3E1-\\uB3FB\\uB3FD-\\uB417\\uB419-\\uB433\\uB435-\\uB44F\\uB451-\\uB46B\\uB46D-\\uB487\\uB489-\\uB4A3\\uB4A5-\\uB4BF\\uB4C1-\\uB4DB\\uB4DD-\\uB4F7\\uB4F9-\\uB513\\uB515-\\uB52F\\uB531-\\uB54B\\uB54D-\\uB567\\uB569-\\uB583\\uB585-\\uB59F\\uB5A1-\\uB5BB\\uB5BD-\\uB5D7\\uB5D9-\\uB5F3\\uB5F5-\\uB60F\\uB611-\\uB62B\\uB62D-\\uB647\\uB649-\\uB663\\uB665-\\uB67F\\uB681-\\uB69B\\uB69D-\\uB6B7\\uB6B9-\\uB6D3\\uB6D5-\\uB6EF\\uB6F1-\\uB70B\\uB70D-\\uB727\\uB729-\\uB743\\uB745-\\uB75F\\uB761-\\uB77B\\uB77D-\\uB797\\uB799-\\uB7B3\\uB7B5-\\uB7CF\\uB7D1-\\uB7EB\\uB7ED-\\uB807\\uB809-\\uB823\\uB825-\\uB83F\\uB841-\\uB85B\\uB85D-\\uB877\\uB879-\\uB893\\uB895-\\uB8AF\\uB8B1-\\uB8CB\\uB8CD-\\uB8E7\\uB8E9-\\uB903\\uB905-\\uB91F\\uB921-\\uB93B\\uB93D-\\uB957\\uB959-\\uB973\\uB975-\\uB98F\\uB991-\\uB9AB\\uB9AD-\\uB9C7\\uB9C9-\\uB9E3\\uB9E5-\\uB9FF\\uBA01-\\uBA1B\\uBA1D-\\uBA37\\uBA39-\\uBA53\\uBA55-\\uBA6F\\uBA71-\\uBA8B\\uBA8D-\\uBAA7\\uBAA9-\\uBAC3\\uBAC5-\\uBADF\\uBAE1-\\uBAFB\\uBAFD-\\uBB17\\uBB19-\\uBB33\\uBB35-\\uBB4F\\uBB51-\\uBB6B\\uBB6D-\\uBB87\\uBB89-\\uBBA3\\uBBA5-\\uBBBF\\uBBC1-\\uBBDB\\uBBDD-\\uBBF7\\uBBF9-\\uBC13\\uBC15-\\uBC2F\\uBC31-\\uBC4B\\uBC4D-\\uBC67\\uBC69-\\uBC83\\uBC85-\\uBC9F\\uBCA1-\\uBCBB\\uBCBD-\\uBCD7\\uBCD9-\\uBCF3\\uBCF5-\\uBD0F\\uBD11-\\uBD2B\\uBD2D-\\uBD47\\uBD49-\\uBD63\\uBD65-\\uBD7F\\uBD81-\\uBD9B\\uBD9D-\\uBDB7\\uBDB9-\\uBDD3\\uBDD5-\\uBDEF\\uBDF1-\\uBE0B\\uBE0D-\\uBE27\\uBE29-\\uBE43\\uBE45-\\uBE5F\\uBE61-\\uBE7B\\uBE7D-\\uBE97\\uBE99-\\uBEB3\\uBEB5-\\uBECF\\uBED1-\\uBEEB\\uBEED-\\uBF07\\uBF09-\\uBF23\\uBF25-\\uBF3F\\uBF41-\\uBF5B\\uBF5D-\\uBF77\\uBF79-\\uBF93\\uBF95-\\uBFAF\\uBFB1-\\uBFCB\\uBFCD-\\uBFE7\\uBFE9-\\uC003\\uC005-\\uC01F\\uC021-\\uC03B\\uC03D-\\uC057\\uC059-\\uC073\\uC075-\\uC08F\\uC091-\\uC0AB\\uC0AD-\\uC0C7\\uC0C9-\\uC0E3\\uC0E5-\\uC0FF\\uC101-\\uC11B\\uC11D-\\uC137\\uC139-\\uC153\\uC155-\\uC16F\\uC171-\\uC18B\\uC18D-\\uC1A7\\uC1A9-\\uC1C3\\uC1C5-\\uC1DF\\uC1E1-\\uC1FB\\uC1FD-\\uC217\\uC219-\\uC233\\uC235-\\uC24F\\uC251-\\uC26B\\uC26D-\\uC287\\uC289-\\uC2A3\\uC2A5-\\uC2BF\\uC2C1-\\uC2DB\\uC2DD-\\uC2F7\\uC2F9-\\uC313\\uC315-\\uC32F\\uC331-\\uC34B\\uC34D-\\uC367\\uC369-\\uC383\\uC385-\\uC39F\\uC3A1-\\uC3BB\\uC3BD-\\uC3D7\\uC3D9-\\uC3F3\\uC3F5-\\uC40F\\uC411-\\uC42B\\uC42D-\\uC447\\uC449-\\uC463\\uC465-\\uC47F\\uC481-\\uC49B\\uC49D-\\uC4B7\\uC4B9-\\uC4D3\\uC4D5-\\uC4EF\\uC4F1-\\uC50B\\uC50D-\\uC527\\uC529-\\uC543\\uC545-\\uC55F\\uC561-\\uC57B\\uC57D-\\uC597\\uC599-\\uC5B3\\uC5B5-\\uC5CF\\uC5D1-\\uC5EB\\uC5ED-\\uC607\\uC609-\\uC623\\uC625-\\uC63F\\uC641-\\uC65B\\uC65D-\\uC677\\uC679-\\uC693\\uC695-\\uC6AF\\uC6B1-\\uC6CB\\uC6CD-\\uC6E7\\uC6E9-\\uC703\\uC705-\\uC71F\\uC721-\\uC73B\\uC73D-\\uC757\\uC759-\\uC773\\uC775-\\uC78F\\uC791-\\uC7AB\\uC7AD-\\uC7C7\\uC7C9-\\uC7E3\\uC7E5-\\uC7FF\\uC801-\\uC81B\\uC81D-\\uC837\\uC839-\\uC853\\uC855-\\uC86F\\uC871-\\uC88B\\uC88D-\\uC8A7\\uC8A9-\\uC8C3\\uC8C5-\\uC8DF\\uC8E1-\\uC8FB\\uC8FD-\\uC917\\uC919-\\uC933\\uC935-\\uC94F\\uC951-\\uC96B\\uC96D-\\uC987\\uC989-\\uC9A3\\uC9A5-\\uC9BF\\uC9C1-\\uC9DB\\uC9DD-\\uC9F7\\uC9F9-\\uCA13\\uCA15-\\uCA2F\\uCA31-\\uCA4B\\uCA4D-\\uCA67\\uCA69-\\uCA83\\uCA85-\\uCA9F\\uCAA1-\\uCABB\\uCABD-\\uCAD7\\uCAD9-\\uCAF3\\uCAF5-\\uCB0F\\uCB11-\\uCB2B\\uCB2D-\\uCB47\\uCB49-\\uCB63\\uCB65-\\uCB7F\\uCB81-\\uCB9B\\uCB9D-\\uCBB7\\uCBB9-\\uCBD3\\uCBD5-\\uCBEF\\uCBF1-\\uCC0B\\uCC0D-\\uCC27\\uCC29-\\uCC43\\uCC45-\\uCC5F\\uCC61-\\uCC7B\\uCC7D-\\uCC97\\uCC99-\\uCCB3\\uCCB5-\\uCCCF\\uCCD1-\\uCCEB\\uCCED-\\uCD07\\uCD09-\\uCD23\\uCD25-\\uCD3F\\uCD41-\\uCD5B\\uCD5D-\\uCD77\\uCD79-\\uCD93\\uCD95-\\uCDAF\\uCDB1-\\uCDCB\\uCDCD-\\uCDE7\\uCDE9-\\uCE03\\uCE05-\\uCE1F\\uCE21-\\uCE3B\\uCE3D-\\uCE57\\uCE59-\\uCE73\\uCE75-\\uCE8F\\uCE91-\\uCEAB\\uCEAD-\\uCEC7\\uCEC9-\\uCEE3\\uCEE5-\\uCEFF\\uCF01-\\uCF1B\\uCF1D-\\uCF37\\uCF39-\\uCF53\\uCF55-\\uCF6F\\uCF71-\\uCF8B\\uCF8D-\\uCFA7\\uCFA9-\\uCFC3\\uCFC5-\\uCFDF\\uCFE1-\\uCFFB\\uCFFD-\\uD017\\uD019-\\uD033\\uD035-\\uD04F\\uD051-\\uD06B\\uD06D-\\uD087\\uD089-\\uD0A3\\uD0A5-\\uD0BF\\uD0C1-\\uD0DB\\uD0DD-\\uD0F7\\uD0F9-\\uD113\\uD115-\\uD12F\\uD131-\\uD14B\\uD14D-\\uD167\\uD169-\\uD183\\uD185-\\uD19F\\uD1A1-\\uD1BB\\uD1BD-\\uD1D7\\uD1D9-\\uD1F3\\uD1F5-\\uD20F\\uD211-\\uD22B\\uD22D-\\uD247\\uD249-\\uD263\\uD265-\\uD27F\\uD281-\\uD29B\\uD29D-\\uD2B7\\uD2B9-\\uD2D3\\uD2D5-\\uD2EF\\uD2F1-\\uD30B\\uD30D-\\uD327\\uD329-\\uD343\\uD345-\\uD35F\\uD361-\\uD37B\\uD37D-\\uD397\\uD399-\\uD3B3\\uD3B5-\\uD3CF\\uD3D1-\\uD3EB\\uD3ED-\\uD407\\uD409-\\uD423\\uD425-\\uD43F\\uD441-\\uD45B\\uD45D-\\uD477\\uD479-\\uD493\\uD495-\\uD4AF\\uD4B1-\\uD4CB\\uD4CD-\\uD4E7\\uD4E9-\\uD503\\uD505-\\uD51F\\uD521-\\uD53B\\uD53D-\\uD557\\uD559-\\uD573\\uD575-\\uD58F\\uD591-\\uD5AB\\uD5AD-\\uD5C7\\uD5C9-\\uD5E3\\uD5E5-\\uD5FF\\uD601-\\uD61B\\uD61D-\\uD637\\uD639-\\uD653\\uD655-\\uD66F\\uD671-\\uD68B\\uD68D-\\uD6A7\\uD6A9-\\uD6C3\\uD6C5-\\uD6DF\\uD6E1-\\uD6FB\\uD6FD-\\uD717\\uD719-\\uD733\\uD735-\\uD74F\\uD751-\\uD76B\\uD76D-\\uD787\\uD789-\\uD7A3]$/u\nconst reExtPict = /^\\p{ExtPict}$/u\n\nconst getCodepointType = (char: string, code: number): CodepointType => {\n  let type = CodepointType.Any\n  if (char.search(reExtend) !== -1) {\n    type |= CodepointType.Extend\n  }\n  if (code === 0x200d) {\n    type |= CodepointType.ZWJ\n  }\n  if (code >= 0x1f1e6 && code <= 0x1f1ff) {\n    type |= CodepointType.RI\n  }\n  if (char.search(rePrepend) !== -1) {\n    type |= CodepointType.Prepend\n  }\n  if (char.search(reSpacingMark) !== -1) {\n    type |= CodepointType.SpacingMark\n  }\n  if (char.search(reL) !== -1) {\n    type |= CodepointType.L\n  }\n  if (char.search(reV) !== -1) {\n    type |= CodepointType.V\n  }\n  if (char.search(reT) !== -1) {\n    type |= CodepointType.T\n  }\n  if (char.search(reLV) !== -1) {\n    type |= CodepointType.LV\n  }\n  if (char.search(reLVT) !== -1) {\n    type |= CodepointType.LVT\n  }\n  if (char.search(reExtPict) !== -1) {\n    type |= CodepointType.ExtPict\n  }\n\n  return type\n}\n\nfunction intersects(x: CodepointType, y: CodepointType) {\n  return (x & y) !== 0\n}\n\nconst NonBoundaryPairs: [CodepointType, CodepointType][] = [\n  // GB6\n  [\n    CodepointType.L,\n    CodepointType.L | CodepointType.V | CodepointType.LV | CodepointType.LVT,\n  ],\n  // GB7\n  [CodepointType.LV | CodepointType.V, CodepointType.V | CodepointType.T],\n  // GB8\n  [CodepointType.LVT | CodepointType.T, CodepointType.T],\n  // GB9\n  [CodepointType.Any, CodepointType.Extend | CodepointType.ZWJ],\n  // GB9a\n  [CodepointType.Any, CodepointType.SpacingMark],\n  // GB9b\n  [CodepointType.Prepend, CodepointType.Any],\n  // GB11\n  [CodepointType.ZWJ, CodepointType.ExtPict],\n  // GB12 and GB13\n  [CodepointType.RI, CodepointType.RI],\n]\n\nfunction isBoundaryPair(left: CodepointType, right: CodepointType) {\n  return (\n    NonBoundaryPairs.findIndex(\n      r => intersects(left, r[0]) && intersects(right, r[1])\n    ) === -1\n  )\n}\n\nconst endingEmojiZWJ = /\\p{ExtPict}[\\p{Gr_Ext}\\p{EMod}]*\\u200D$/u\nconst endsWithEmojiZWJ = (str: string): boolean => {\n  return str.search(endingEmojiZWJ) !== -1\n}\n\nconst endingRIs = /\\p{RI}+$/gu\nconst endsWithOddNumberOfRIs = (str: string): boolean => {\n  const match = str.match(endingRIs)\n  if (match === null) {\n    return false\n  } else {\n    // A RI is represented by a surrogate pair.\n    const numRIs = match[0].length / 2\n    return numRIs % 2 === 1\n  }\n}\n", "import { Editor, Location, Node, Path, Range, Transforms } from '../../index'\nimport { TextUnit } from '../../types/types'\nimport { getDefaultInsertLocation } from '../../utils'\n\nexport interface TextDeleteOptions {\n  at?: Location\n  distance?: number\n  unit?: TextUnit\n  reverse?: boolean\n  hanging?: boolean\n  voids?: boolean\n}\n\nexport interface TextInsertFragmentOptions {\n  at?: Location\n  hanging?: boolean\n  voids?: boolean\n  batchDirty?: boolean\n}\n\nexport interface TextInsertTextOptions {\n  at?: Location\n  voids?: boolean\n}\n\nexport interface TextTransforms {\n  /**\n   * Delete content in the editor.\n   */\n  delete: (editor: Editor, options?: TextDeleteOptions) => void\n\n  /**\n   * Insert a fragment in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertFragment: (\n    editor: Editor,\n    fragment: Node[],\n    options?: TextInsertFragmentOptions\n  ) => void\n\n  /**\n   * Insert a string of text in the editor\n   * at the specified location or (if not defined) the current selection or (if not defined) the end of the document.\n   */\n  insertText: (\n    editor: Editor,\n    text: string,\n    options?: TextInsertTextOptions\n  ) => void\n}\n\n// eslint-disable-next-line no-redeclare\nexport const TextTransforms: TextTransforms = {\n  delete(editor, options) {\n    editor.delete(options)\n  },\n  insertFragment(editor, fragment, options) {\n    editor.insertFragment(fragment, options)\n  },\n  insertText(\n    editor: Editor,\n    text: string,\n    options: TextInsertTextOptions = {}\n  ): void {\n    Editor.withoutNormalizing(editor, () => {\n      const { voids = false } = options\n      let { at = getDefaultInsertLocation(editor) } = options\n\n      if (Path.isPath(at)) {\n        at = Editor.range(editor, at)\n      }\n\n      if (Range.isRange(at)) {\n        if (Range.isCollapsed(at)) {\n          at = at.anchor\n        } else {\n          const end = Range.end(at)\n          if (!voids && Editor.void(editor, { at: end })) {\n            return\n          }\n          const start = Range.start(at)\n          const startRef = Editor.pointRef(editor, start)\n          const endRef = Editor.pointRef(editor, end)\n          Transforms.delete(editor, { at, voids })\n          const startPoint = startRef.unref()\n          const endPoint = endRef.unref()\n\n          at = startPoint || endPoint!\n          Transforms.setSelection(editor, { anchor: at, focus: at })\n        }\n      }\n\n      if (\n        (!voids && Editor.void(editor, { at })) ||\n        Editor.elementReadOnly(editor, { at })\n      ) {\n        return\n      }\n\n      const { path, offset } = at\n      if (text.length > 0)\n        editor.apply({ type: 'insert_text', path, offset, text })\n    })\n  },\n}\n", "import { GeneralTransforms } from './general'\nimport { NodeTransforms } from './node'\nimport { SelectionTransforms } from './selection'\nimport { TextTransforms } from './text'\n\nexport const Transforms: GeneralTransforms &\n  NodeTransforms &\n  SelectionTransforms &\n  TextTransforms = {\n  ...GeneralTransforms,\n  ...NodeTransforms,\n  ...SelectionTransforms,\n  ...TextTransforms,\n}\n", "// perf\n\nimport { Editor } from '../interfaces/editor'\n\nconst BATCHING_DIRTY_PATHS: WeakMap<Editor, boolean> = new WeakMap()\n\nexport const isBatchingDirtyPaths = (editor: Editor) => {\n  return BATCHING_DIRTY_PATHS.get(editor) || false\n}\n\nexport const batchDirtyPaths = (\n  editor: Editor,\n  fn: () => void,\n  update: () => void\n) => {\n  const value = BATCHING_DIRTY_PATHS.get(editor) || false\n  BATCHING_DIRTY_PATHS.set(editor, true)\n  try {\n    fn()\n    update()\n  } finally {\n    BATCHING_DIRTY_PATHS.set(editor, value)\n  }\n}\n", "import { DIRTY_PATH_KEYS, DIRTY_PATHS } from '../utils/weak-maps'\nimport { Path } from '../interfaces/path'\nimport { Editor } from '../interfaces/editor'\n\n/**\n * update editor dirty paths\n *\n * @param newDirtyPaths: Path[]; new dirty paths\n * @param transform: (p: Path) => Path | null; how to transform existing dirty paths\n */\nexport function updateDirtyPaths(\n  editor: Editor,\n  newDirtyPaths: Path[],\n  transform?: (p: Path) => Path | null\n) {\n  const oldDirtyPaths = DIRTY_PATHS.get(editor) || []\n  const oldDirtyPathKeys = DIRTY_PATH_KEYS.get(editor) || new Set()\n  let dirtyPaths: Path[]\n  let dirtyPathKeys: Set<string>\n\n  const add = (path: Path | null) => {\n    if (path) {\n      const key = path.join(',')\n\n      if (!dirtyPathKeys.has(key)) {\n        dirtyPathKeys.add(key)\n        dirtyPaths.push(path)\n      }\n    }\n  }\n\n  if (transform) {\n    dirtyPaths = []\n    dirtyPathKeys = new Set()\n    for (const path of oldDirtyPaths) {\n      const newPath = transform(path)\n      add(newPath)\n    }\n  } else {\n    dirtyPaths = oldDirtyPaths\n    dirtyPathKeys = oldDirtyPathKeys\n  }\n\n  for (const path of newDirtyPaths) {\n    add(path)\n  }\n\n  DIRTY_PATHS.set(editor, dirtyPaths)\n  DIRTY_PATH_KEYS.set(editor, dirtyPathKeys)\n}\n", "import { PathRef } from '../interfaces/path-ref'\nimport { PointRef } from '../interfaces/point-ref'\nimport { RangeRef } from '../interfaces/range-ref'\nimport { FLUSHING } from '../utils/weak-maps'\nimport { Path } from '../interfaces/path'\nimport { Transforms } from '../interfaces/transforms'\nimport { WithEditorFirstArg } from '../utils/types'\nimport { Editor } from '../interfaces/editor'\nimport { isBatchingDirtyPaths } from './batch-dirty-paths'\nimport { updateDirtyPaths } from './update-dirty-paths'\n\nexport const apply: WithEditorFirstArg<Editor['apply']> = (editor, op) => {\n  for (const ref of Editor.pathRefs(editor)) {\n    PathRef.transform(ref, op)\n  }\n\n  for (const ref of Editor.pointRefs(editor)) {\n    PointRef.transform(ref, op)\n  }\n\n  for (const ref of Editor.rangeRefs(editor)) {\n    RangeRef.transform(ref, op)\n  }\n\n  // update dirty paths\n  if (!isBatchingDirtyPaths(editor)) {\n    const transform = Path.operationCanTransformPath(op)\n      ? (p: Path) => Path.transform(p, op)\n      : undefined\n    updateDirtyPaths(editor, editor.getDirtyPaths(op), transform)\n  }\n\n  Transforms.transform(editor, op)\n  editor.operations.push(op)\n  Editor.normalize(editor, {\n    operation: op,\n  })\n\n  // Clear any formats applied to the cursor if the selection changes.\n  if (op.type === 'set_selection') {\n    editor.marks = null\n  }\n\n  if (!FLUSHING.get(editor)) {\n    FLUSHING.set(editor, true)\n\n    Promise.resolve().then(() => {\n      FLUSHING.set(editor, false)\n      editor.onChange({ operation: op })\n      editor.operations = []\n    })\n  }\n}\n", "import { WithEditorFirstArg } from '../utils/types'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Node } from '../interfaces/node'\nimport { Editor } from '../interfaces/editor'\n\n/**\n * Get the \"dirty\" paths generated from an operation.\n */\nexport const getDirtyPaths: WithEditorFirstArg<Editor['getDirtyPaths']> = (\n  editor,\n  op\n) => {\n  switch (op.type) {\n    case 'insert_text':\n    case 'remove_text':\n    case 'set_node': {\n      const { path } = op\n      return Path.levels(path)\n    }\n\n    case 'insert_node': {\n      const { node, path } = op\n      const levels = Path.levels(path)\n      const descendants = Text.isText(node)\n        ? []\n        : Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n\n      return [...levels, ...descendants]\n    }\n\n    case 'merge_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      const previousPath = Path.previous(path)\n      return [...ancestors, previousPath]\n    }\n\n    case 'move_node': {\n      const { path, newPath } = op\n\n      if (Path.equals(path, newPath)) {\n        return []\n      }\n\n      const oldAncestors: Path[] = []\n      const newAncestors: Path[] = []\n\n      for (const ancestor of Path.ancestors(path)) {\n        const p = Path.transform(ancestor, op)\n        oldAncestors.push(p!)\n      }\n\n      for (const ancestor of Path.ancestors(newPath)) {\n        const p = Path.transform(ancestor, op)\n        newAncestors.push(p!)\n      }\n\n      const newParent = newAncestors[newAncestors.length - 1]\n      const newIndex = newPath[newPath.length - 1]\n      const resultPath = newParent.concat(newIndex)\n\n      return [...oldAncestors, ...newAncestors, resultPath]\n    }\n\n    case 'remove_node': {\n      const { path } = op\n      const ancestors = Path.ancestors(path)\n      return [...ancestors]\n    }\n\n    case 'split_node': {\n      const { path } = op\n      const levels = Path.levels(path)\n      const nextPath = Path.next(path)\n      return [...levels, nextPath]\n    }\n\n    default: {\n      return []\n    }\n  }\n}\n", "import { Editor, Node } from '../interfaces'\nimport { WithEditorFirstArg } from '../utils'\n\nexport const getFragment: WithEditorFirstArg<\n  Editor['getFragment']\n> = editor => {\n  const { selection } = editor\n\n  if (selection) {\n    return Node.fragment(editor, selection)\n  }\n  return []\n}\n", "import { WithEditorFirstArg } from '../utils/types'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\nimport { Transforms } from '../interfaces/transforms'\nimport { Descendant, Node } from '../interfaces/node'\nimport { Editor } from '../interfaces/editor'\n\nexport const normalizeNode: WithEditorFirstArg<Editor['normalizeNode']> = (\n  editor,\n  entry,\n  options\n) => {\n  const [node, path] = entry\n\n  // There are no core normalizations for text nodes.\n  if (Text.isText(node)) {\n    return\n  }\n\n  // Ensure that block and inline nodes have at least one text child.\n  if (Element.isElement(node) && node.children.length === 0) {\n    const child = { text: '' }\n    Transforms.insertNodes(editor, child, {\n      at: path.concat(0),\n      voids: true,\n    })\n    return\n  }\n\n  // Determine whether the node should have block or inline children.\n  const shouldHaveInlines = Editor.isEditor(node)\n    ? false\n    : Element.isElement(node) &&\n      (editor.isInline(node) ||\n        node.children.length === 0 ||\n        Text.isText(node.children[0]) ||\n        editor.isInline(node.children[0]))\n\n  // Since we'll be applying operations while iterating, keep track of an\n  // index that accounts for any added/removed nodes.\n  let n = 0\n\n  for (let i = 0; i < node.children.length; i++, n++) {\n    const currentNode = Node.get(editor, path)\n    if (Text.isText(currentNode)) continue\n    const child = currentNode.children[n] as Descendant\n    const prev = currentNode.children[n - 1] as Descendant\n    const isLast = i === node.children.length - 1\n    const isInlineOrText =\n      Text.isText(child) || (Element.isElement(child) && editor.isInline(child))\n\n    // Only allow block nodes in the top-level children and parent blocks\n    // that only contain block nodes. Similarly, only allow inline nodes in\n    // other inline nodes, or parent blocks that only contain inlines and\n    // text.\n    if (isInlineOrText !== shouldHaveInlines) {\n      if (isInlineOrText) {\n        if (options?.fallbackElement) {\n          Transforms.wrapNodes(editor, options.fallbackElement(), {\n            at: path.concat(n),\n            voids: true,\n          })\n        } else {\n          Transforms.removeNodes(editor, { at: path.concat(n), voids: true })\n        }\n      } else {\n        Transforms.unwrapNodes(editor, { at: path.concat(n), voids: true })\n      }\n      n--\n    } else if (Element.isElement(child)) {\n      // Ensure that inline nodes are surrounded by text nodes.\n      if (editor.isInline(child)) {\n        if (prev == null || !Text.isText(prev)) {\n          const newChild = { text: '' }\n          Transforms.insertNodes(editor, newChild, {\n            at: path.concat(n),\n            voids: true,\n          })\n          n++\n        } else if (isLast) {\n          const newChild = { text: '' }\n          Transforms.insertNodes(editor, newChild, {\n            at: path.concat(n + 1),\n            voids: true,\n          })\n          n++\n        }\n      }\n    } else {\n      // If the child is not a text node, and doesn't have a `children` field,\n      // then we have an invalid node that will upset slate.\n      //\n      // eg: `{ type: 'some_node' }`.\n      //\n      // To prevent slate from breaking, we can add the `children` field,\n      // and now that it is valid, we can to many more operations easily,\n      // such as extend normalizers to fix erronous structure.\n      if (!Text.isText(child) && !('children' in child)) {\n        const elementChild = child as Element\n        elementChild.children = []\n      }\n\n      // Merge adjacent text nodes that are empty or match.\n      if (prev != null && Text.isText(prev)) {\n        if (Text.equals(child, prev, { loose: true })) {\n          Transforms.mergeNodes(editor, { at: path.concat(n), voids: true })\n          n--\n        } else if (prev.text === '') {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n - 1),\n            voids: true,\n          })\n          n--\n        } else if (child.text === '') {\n          Transforms.removeNodes(editor, {\n            at: path.concat(n),\n            voids: true,\n          })\n          n--\n        }\n      }\n    }\n  }\n}\n", "import { WithEditorFirstArg } from '../utils/types'\nimport { Editor } from '../interfaces/editor'\n\nexport const shouldNormalize: WithEditorFirstArg<Editor['shouldNormalize']> = (\n  editor,\n  { iteration, initialDirtyPathsLength }\n) => {\n  const maxIterations = initialDirtyPathsLength * 42 // HACK: better way?\n\n  if (iteration > maxIterations) {\n    throw new Error(\n      `Could not completely normalize the editor after ${maxIterations} iterations! This is usually due to incorrect normalization logic that leaves a node in an invalid state.`\n    )\n  }\n\n  return true\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces'\nimport { Path } from '../interfaces/path'\n\nexport const above: EditorInterface['above'] = (editor, options = {}) => {\n  const {\n    voids = false,\n    mode = 'lowest',\n    at = editor.selection,\n    match,\n  } = options\n\n  if (!at) {\n    return\n  }\n\n  let path = Editor.path(editor, at)\n\n  // If `at` is a Range that spans mulitple nodes, `path` will be their common ancestor.\n  // Otherwise `path` will be a text node and/or the same as `at`, in which cases we want to start with its parent.\n  if (!Range.isRange(at) || Path.equals(at.focus.path, at.anchor.path)) {\n    if (path.length === 0) return\n    path = Path.parent(path)\n  }\n\n  const reverse = mode === 'lowest'\n\n  const [firstMatch] = Editor.levels(editor, {\n    at: path,\n    voids,\n    match,\n    reverse,\n  })\n  return firstMatch // if nothing matches this returns undefined\n}\n", "import { Node } from '../interfaces/node'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { FLUSHING } from '../utils/weak-maps'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const addMark: EditorInterface['addMark'] = (editor, key, value) => {\n  const { selection } = editor\n\n  if (selection) {\n    const match = (node: Node, path: Path) => {\n      if (!Text.isText(node)) {\n        return false // marks can only be applied to text\n      }\n      const [parentNode, parentPath] = Editor.parent(editor, path)\n      return !editor.isVoid(parentNode) || editor.markableVoid(parentNode)\n    }\n    const expandedSelection = Range.isExpanded(selection)\n    let markAcceptingVoidSelected = false\n    if (!expandedSelection) {\n      const [selectedNode, selectedPath] = Editor.node(editor, selection)\n      if (selectedNode && match(selectedNode, selectedPath)) {\n        const [parentNode] = Editor.parent(editor, selectedPath)\n        markAcceptingVoidSelected =\n          parentNode && editor.markableVoid(parentNode)\n      }\n    }\n    if (expandedSelection || markAcceptingVoidSelected) {\n      Transforms.setNodes(\n        editor,\n        { [key]: value },\n        {\n          match,\n          split: true,\n          voids: true,\n        }\n      )\n    } else {\n      const marks = {\n        ...(Editor.marks(editor) || {}),\n        [key]: value,\n      }\n\n      editor.marks = marks\n      if (!FLUSHING.get(editor)) {\n        editor.onChange()\n      }\n    }\n  }\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const after: EditorInterface['after'] = (editor, at, options = {}) => {\n  const anchor = Editor.point(editor, at, { edge: 'end' })\n  const focus = Editor.end(editor, [])\n  const range = { anchor, focus }\n  const { distance = 1 } = options\n  let d = 0\n  let target\n\n  for (const p of Editor.positions(editor, {\n    ...options,\n    at: range,\n  })) {\n    if (d > distance) {\n      break\n    }\n\n    if (d !== 0) {\n      target = p\n    }\n\n    d++\n  }\n\n  return target\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const before: EditorInterface['before'] = (editor, at, options = {}) => {\n  const anchor = Editor.start(editor, [])\n  const focus = Editor.point(editor, at, { edge: 'start' })\n  const range = { anchor, focus }\n  const { distance = 1 } = options\n  let d = 0\n  let target\n\n  for (const p of Editor.positions(editor, {\n    ...options,\n    at: range,\n    reverse: true,\n  })) {\n    if (d > distance) {\n      break\n    }\n\n    if (d !== 0) {\n      target = p\n    }\n\n    d++\n  }\n\n  return target\n}\n", "import { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { WithEditorFirstArg } from '../utils/types'\n\nexport const deleteBackward: WithEditorFirstArg<Editor['deleteBackward']> = (\n  editor,\n  unit\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isCollapsed(selection)) {\n    Transforms.delete(editor, { unit, reverse: true })\n  }\n}\n", "import { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { WithEditorFirstArg } from '../utils/types'\n\nexport const deleteForward: WithEditorFirstArg<Editor['deleteForward']> = (\n  editor,\n  unit\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isCollapsed(selection)) {\n    Transforms.delete(editor, { unit })\n  }\n}\n", "import { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const deleteFragment: EditorInterface['deleteFragment'] = (\n  editor,\n  { direction = 'forward' } = {}\n) => {\n  const { selection } = editor\n\n  if (selection && Range.isExpanded(selection)) {\n    Transforms.delete(editor, { reverse: direction === 'backward' })\n  }\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const edges: EditorInterface['edges'] = (editor, at) => {\n  return [Editor.start(editor, at), Editor.end(editor, at)]\n}\n", "import { Element } from '../interfaces/element'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const elementReadOnly: EditorInterface['elementReadOnly'] = (\n  editor,\n  options = {}\n) => {\n  return Editor.above(editor, {\n    ...options,\n    match: n => Element.isElement(n) && Editor.isElementReadOnly(editor, n),\n  })\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const end: EditorInterface['end'] = (editor, at) => {\n  return Editor.point(editor, at, { edge: 'end' })\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const first: EditorInterface['first'] = (editor, at) => {\n  const path = Editor.path(editor, at, { edge: 'start' })\n  return Editor.node(editor, path)\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const fragment: EditorInterface['fragment'] = (editor, at) => {\n  const range = Editor.range(editor, at)\n  return Node.fragment(editor, range)\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport const getVoid: EditorInterface['void'] = (editor, options = {}) => {\n  return Editor.above(editor, {\n    ...options,\n    match: n => Element.isElement(n) && Editor.isVoid(editor, n),\n  })\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport const hasBlocks: EditorInterface['hasBlocks'] = (editor, element) => {\n  return element.children.some(\n    n => Element.isElement(n) && Editor.isBlock(editor, n)\n  )\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const hasInlines: EditorInterface['hasInlines'] = (editor, element) => {\n  return element.children.some(\n    n => Text.isText(n) || Editor.isInline(editor, n)\n  )\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const hasPath: EditorInterface['hasPath'] = (editor, path) => {\n  return Node.has(editor, path)\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const hasTexts: EditorInterface['hasTexts'] = (editor, element) => {\n  return element.children.every(n => Text.isText(n))\n}\n", "import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertBreak: EditorInterface['insertBreak'] = editor => {\n  Transforms.splitNodes(editor, { always: true })\n}\n", "import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertNode: EditorInterface['insertNode'] = (\n  editor,\n  node,\n  options\n) => {\n  Transforms.insertNodes(editor, node, options)\n}\n", "import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertSoftBreak: EditorInterface['insertSoftBreak'] = editor => {\n  Transforms.splitNodes(editor, { always: true })\n}\n", "import { Transforms } from '../interfaces/transforms'\nimport { EditorInterface } from '../interfaces/editor'\n\nexport const insertText: EditorInterface['insertText'] = (\n  editor,\n  text,\n  options = {}\n) => {\n  const { selection, marks } = editor\n\n  if (selection) {\n    if (marks) {\n      const node = { text, ...marks }\n      Transforms.insertNodes(editor, node, {\n        at: options.at,\n        voids: options.voids,\n      })\n    } else {\n      Transforms.insertText(editor, text, options)\n    }\n\n    editor.marks = null\n  }\n}\n", "import { EditorInterface } from '../interfaces/editor'\n\nexport const isBlock: EditorInterface['isBlock'] = (editor, value) => {\n  return !editor.isInline(value)\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const isEdge: EditorInterface['isEdge'] = (editor, point, at) => {\n  return Editor.isStart(editor, point, at) || Editor.isEnd(editor, point, at)\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { Text } from '../interfaces/text'\n\nexport const isEmpty: EditorInterface['isEmpty'] = (editor, element) => {\n  const { children } = element\n  const [first] = children\n  return (\n    children.length === 0 ||\n    (children.length === 1 &&\n      Text.isText(first) &&\n      first.text === '' &&\n      !editor.isVoid(element))\n  )\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\n\nexport const isEnd: EditorInterface['isEnd'] = (editor, point, at) => {\n  const end = Editor.end(editor, at)\n  return Point.equals(point, end)\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { NORMALIZING } from '../utils/weak-maps'\n\nexport const isNormalizing: EditorInterface['isNormalizing'] = editor => {\n  const isNormalizing = NORMALIZING.get(editor)\n  return isNormalizing === undefined ? true : isNormalizing\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\n\nexport const isStart: EditorInterface['isStart'] = (editor, point, at) => {\n  // PERF: If the offset isn't `0` we know it's not the start.\n  if (point.offset !== 0) {\n    return false\n  }\n\n  const start = Editor.start(editor, at)\n  return Point.equals(point, start)\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const last: EditorInterface['last'] = (editor, at) => {\n  const path = Editor.path(editor, at, { edge: 'end' })\n  return Editor.node(editor, path)\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const leaf: EditorInterface['leaf'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const node = Node.leaf(editor, path)\n  return [node, path]\n}\n", "import { Node, NodeEntry } from '../interfaces/node'\nimport { Editor, EditorLevelsOptions } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\n\nexport function* levels<T extends Node>(\n  editor: Editor,\n  options: EditorLevelsOptions<T> = {}\n): Generator<NodeEntry<T>, void, undefined> {\n  const { at = editor.selection, reverse = false, voids = false } = options\n  let { match } = options\n\n  if (match == null) {\n    match = () => true\n  }\n\n  if (!at) {\n    return\n  }\n\n  const levels: NodeEntry<T>[] = []\n  const path = Editor.path(editor, at)\n\n  for (const [n, p] of Node.levels(editor, path)) {\n    if (!match(n, p)) {\n      continue\n    }\n\n    levels.push([n, p] as NodeEntry<T>)\n\n    if (!voids && Element.isElement(n) && Editor.isVoid(editor, n)) {\n      break\n    }\n  }\n\n  if (reverse) {\n    levels.reverse()\n  }\n\n  yield* levels\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { NodeEntry } from '../interfaces/node'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\nimport { Point } from '../interfaces'\n\nexport const marks: EditorInterface['marks'] = (editor, options = {}) => {\n  const { marks, selection } = editor\n\n  if (!selection) {\n    return null\n  }\n  let { anchor, focus } = selection\n\n  if (marks) {\n    return marks\n  }\n\n  if (Range.isExpanded(selection)) {\n    const isBackward = Range.isBackward(selection)\n    if (isBackward) {\n      ;[focus, anchor] = [anchor, focus]\n    }\n    /**\n     * COMPAT: Make sure hanging ranges (caused by double clicking in Firefox)\n     * do not adversely affect the returned marks.\n     */\n    const isEnd = Editor.isEnd(editor, anchor, anchor.path)\n    if (isEnd) {\n      const after = Editor.after(editor, anchor as Point)\n      if (after) {\n        anchor = after\n      }\n    }\n\n    const [match] = Editor.nodes(editor, {\n      match: Text.isText,\n      at: {\n        anchor,\n        focus,\n      },\n    })\n\n    if (match) {\n      const [node] = match as NodeEntry<Text>\n      const { text, ...rest } = node\n      return rest\n    } else {\n      return {}\n    }\n  }\n\n  const { path } = anchor\n\n  let [node] = Editor.leaf(editor, path)\n\n  if (anchor.offset === 0) {\n    const prev = Editor.previous(editor, { at: path, match: Text.isText })\n    const markedVoid = Editor.above(editor, {\n      match: n =>\n        Element.isElement(n) &&\n        Editor.isVoid(editor, n) &&\n        editor.markableVoid(n),\n    })\n    if (!markedVoid) {\n      const block = Editor.above(editor, {\n        match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      })\n\n      if (prev && block) {\n        const [prevNode, prevPath] = prev\n        const [, blockPath] = block\n\n        if (Path.isAncestor(blockPath, prevPath)) {\n          node = prevNode as Text\n        }\n      }\n    }\n  }\n\n  const { text, ...rest } = node\n  return rest\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Path } from '../interfaces/path'\n\nexport const next: EditorInterface['next'] = (editor, options = {}) => {\n  const { mode = 'lowest', voids = false } = options\n  let { match, at = editor.selection } = options\n\n  if (!at) {\n    return\n  }\n\n  const pointAfterLocation = Editor.after(editor, at, { voids })\n\n  if (!pointAfterLocation) return\n\n  const [, to] = Editor.last(editor, [])\n\n  const span: Span = [pointAfterLocation.path, to]\n\n  if (Path.isPath(at) && at.length === 0) {\n    throw new Error(`Cannot get the next node from the root node!`)\n  }\n\n  if (match == null) {\n    if (Path.isPath(at)) {\n      const [parent] = Editor.parent(editor, at)\n      match = n => parent.children.includes(n)\n    } else {\n      match = () => true\n    }\n  }\n\n  const [next] = Editor.nodes(editor, { at: span, match, mode, voids })\n  return next\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\n\nexport const node: EditorInterface['node'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const node = Node.get(editor, path)\n  return [node, path]\n}\n", "import { Node, NodeEntry } from '../interfaces/node'\nimport { Editor, EditorNodesOptions } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\n\nexport function* nodes<T extends Node>(\n  editor: Editor,\n  options: EditorNodesOptions<T> = {}\n): Generator<NodeEntry<T>, void, undefined> {\n  const {\n    at = editor.selection,\n    mode = 'all',\n    universal = false,\n    reverse = false,\n    voids = false,\n    pass,\n    ignoreNonSelectable = false,\n  } = options\n  let { match } = options\n\n  if (!match) {\n    match = () => true\n  }\n\n  if (!at) {\n    return\n  }\n\n  let from\n  let to\n\n  if (Span.isSpan(at)) {\n    from = at[0]\n    to = at[1]\n  } else {\n    const first = Editor.path(editor, at, { edge: 'start' })\n    const last = Editor.path(editor, at, { edge: 'end' })\n    from = reverse ? last : first\n    to = reverse ? first : last\n  }\n\n  const nodeEntries = Node.nodes(editor, {\n    reverse,\n    from,\n    to,\n    pass: ([node, path]) => {\n      if (pass && pass([node, path])) return true\n      if (!Element.isElement(node)) return false\n      if (\n        !voids &&\n        (Editor.isVoid(editor, node) || Editor.isElementReadOnly(editor, node))\n      )\n        return true\n      if (ignoreNonSelectable && !Editor.isSelectable(editor, node)) return true\n      return false\n    },\n  })\n\n  const matches: NodeEntry<T>[] = []\n  let hit: NodeEntry<T> | undefined\n\n  for (const [node, path] of nodeEntries) {\n    if (\n      ignoreNonSelectable &&\n      Element.isElement(node) &&\n      !Editor.isSelectable(editor, node)\n    ) {\n      continue\n    }\n\n    const isLower = hit && Path.compare(path, hit[1]) === 0\n\n    // In highest mode any node lower than the last hit is not a match.\n    if (mode === 'highest' && isLower) {\n      continue\n    }\n\n    if (!match(node, path)) {\n      // If we've arrived at a leaf text node that is not lower than the last\n      // hit, then we've found a branch that doesn't include a match, which\n      // means the match is not universal.\n      if (universal && !isLower && Text.isText(node)) {\n        return\n      } else {\n        continue\n      }\n    }\n\n    // If there's a match and it's lower than the last, update the hit.\n    if (mode === 'lowest' && isLower) {\n      hit = [node, path] as NodeEntry<T>\n      continue\n    }\n\n    // In lowest mode we emit the last hit, once it's guaranteed lowest.\n    const emit: NodeEntry<T> | undefined =\n      mode === 'lowest' ? hit : ([node, path] as NodeEntry<T>)\n\n    if (emit) {\n      if (universal) {\n        matches.push(emit)\n      } else {\n        yield emit\n      }\n    }\n\n    hit = [node, path] as NodeEntry<T>\n  }\n\n  // Since lowest is always emitting one behind, catch up at the end.\n  if (mode === 'lowest' && hit) {\n    if (universal) {\n      matches.push(hit)\n    } else {\n      yield hit\n    }\n  }\n\n  // Universal defers to ensure that the match occurs in every branch, so we\n  // yield all of the matches after iterating.\n  if (universal) {\n    yield* matches\n  }\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { DIRTY_PATH_KEYS, DIRTY_PATHS } from '../utils/weak-maps'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\nimport { Element } from '../interfaces/element'\n\nexport const normalize: EditorInterface['normalize'] = (\n  editor,\n  options = {}\n) => {\n  const { force = false, operation } = options\n  const getDirtyPaths = (editor: Editor) => {\n    return DIRTY_PATHS.get(editor) || []\n  }\n\n  const getDirtyPathKeys = (editor: Editor) => {\n    return DIRTY_PATH_KEYS.get(editor) || new Set()\n  }\n\n  const popDirtyPath = (editor: Editor): Path => {\n    const path = getDirtyPaths(editor).pop()!\n    const key = path.join(',')\n    getDirtyPathKeys(editor).delete(key)\n    return path\n  }\n\n  if (!Editor.isNormalizing(editor)) {\n    return\n  }\n\n  if (force) {\n    const allPaths = Array.from(Node.nodes(editor), ([, p]) => p)\n    const allPathKeys = new Set(allPaths.map(p => p.join(',')))\n    DIRTY_PATHS.set(editor, allPaths)\n    DIRTY_PATH_KEYS.set(editor, allPathKeys)\n  }\n\n  if (getDirtyPaths(editor).length === 0) {\n    return\n  }\n\n  Editor.withoutNormalizing(editor, () => {\n    /*\n      Fix dirty elements with no children.\n      editor.normalizeNode() does fix this, but some normalization fixes also require it to work.\n      Running an initial pass avoids the catch-22 race condition.\n    */\n    for (const dirtyPath of getDirtyPaths(editor)) {\n      if (Node.has(editor, dirtyPath)) {\n        const entry = Editor.node(editor, dirtyPath)\n        const [node, _] = entry\n\n        /*\n          The default normalizer inserts an empty text node in this scenario, but it can be customised.\n          So there is some risk here.\n\n          As long as the normalizer only inserts child nodes for this case it is safe to do in any order;\n          by definition adding children to an empty node can't cause other paths to change.\n        */\n        if (Element.isElement(node) && node.children.length === 0) {\n          editor.normalizeNode(entry, { operation })\n        }\n      }\n    }\n\n    let dirtyPaths = getDirtyPaths(editor)\n    const initialDirtyPathsLength = dirtyPaths.length\n    let iteration = 0\n\n    while (dirtyPaths.length !== 0) {\n      if (\n        !editor.shouldNormalize({\n          dirtyPaths,\n          iteration,\n          initialDirtyPathsLength,\n          operation,\n        })\n      ) {\n        return\n      }\n\n      const dirtyPath = popDirtyPath(editor)\n\n      // If the node doesn't exist in the tree, it does not need to be normalized.\n      if (Node.has(editor, dirtyPath)) {\n        const entry = Editor.node(editor, dirtyPath)\n        editor.normalizeNode(entry, { operation })\n      }\n      iteration++\n      dirtyPaths = getDirtyPaths(editor)\n    }\n  })\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Ancestor, NodeEntry } from '../interfaces/node'\n\nexport const parent: EditorInterface['parent'] = (editor, at, options = {}) => {\n  const path = Editor.path(editor, at, options)\n  const parentPath = Path.parent(path)\n  const entry = Editor.node(editor, parentPath)\n  return entry as NodeEntry<Ancestor>\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { PathRef } from '../interfaces/path-ref'\n\nexport const pathRef: EditorInterface['pathRef'] = (\n  editor,\n  path,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: PathRef = {\n    current: path,\n    affinity,\n    unref() {\n      const { current } = ref\n      const pathRefs = Editor.pathRefs(editor)\n      pathRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.pathRefs(editor)\n  refs.add(ref)\n  return ref\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { PATH_REFS } from '../utils/weak-maps'\n\nexport const pathRefs: EditorInterface['pathRefs'] = editor => {\n  let refs = PATH_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    PATH_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n", "import { EditorInterface, Node, Path, Point, Range } from '../interfaces'\n\nexport const path: EditorInterface['path'] = (editor, at, options = {}) => {\n  const { depth, edge } = options\n\n  if (Path.isPath(at)) {\n    if (edge === 'start') {\n      const [, firstPath] = Node.first(editor, at)\n      at = firstPath\n    } else if (edge === 'end') {\n      const [, lastPath] = Node.last(editor, at)\n      at = lastPath\n    }\n  }\n\n  if (Range.isRange(at)) {\n    if (edge === 'start') {\n      at = Range.start(at)\n    } else if (edge === 'end') {\n      at = Range.end(at)\n    } else {\n      at = Path.common(at.anchor.path, at.focus.path)\n    }\n  }\n\n  if (Point.isPoint(at)) {\n    at = at.path\n  }\n\n  if (depth != null) {\n    at = at.slice(0, depth)\n  }\n\n  return at\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { PointRef } from '../interfaces/point-ref'\n\nexport const pointRef: EditorInterface['pointRef'] = (\n  editor,\n  point,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: PointRef = {\n    current: point,\n    affinity,\n    unref() {\n      const { current } = ref\n      const pointRefs = Editor.pointRefs(editor)\n      pointRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.pointRefs(editor)\n  refs.add(ref)\n  return ref\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { POINT_REFS } from '../utils/weak-maps'\n\nexport const pointRefs: EditorInterface['pointRefs'] = editor => {\n  let refs = POINT_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    POINT_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Node } from '../interfaces/node'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\n\nexport const point: EditorInterface['point'] = (editor, at, options = {}) => {\n  const { edge = 'start' } = options\n\n  if (Path.isPath(at)) {\n    let path\n\n    if (edge === 'end') {\n      const [, lastPath] = Node.last(editor, at)\n      path = lastPath\n    } else {\n      const [, firstPath] = Node.first(editor, at)\n      path = firstPath\n    }\n\n    const node = Node.get(editor, path)\n\n    if (!Text.isText(node)) {\n      throw new Error(\n        `Cannot get the ${edge} point in the node at path [${at}] because it has no ${edge} text node.`\n      )\n    }\n\n    return { path, offset: edge === 'end' ? node.text.length : 0 }\n  }\n\n  if (Range.isRange(at)) {\n    const [start, end] = Range.edges(at)\n    return edge === 'start' ? start : end\n  }\n\n  return at\n}\n", "import { Editor, EditorPositionsOptions } from '../interfaces/editor'\nimport { Point } from '../interfaces/point'\nimport { Range } from '../interfaces/range'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport {\n  getCharacterDistance,\n  getWordDistance,\n  splitByCharacterDistance,\n} from '../utils/string'\n\nexport function* positions(\n  editor: Editor,\n  options: EditorPositionsOptions = {}\n): Generator<Point, void, undefined> {\n  const {\n    at = editor.selection,\n    unit = 'offset',\n    reverse = false,\n    voids = false,\n    ignoreNonSelectable = false,\n  } = options\n\n  if (!at) {\n    return\n  }\n\n  /**\n   * Algorithm notes:\n   *\n   * Each step `distance` is dynamic depending on the underlying text\n   * and the `unit` specified.  Each step, e.g., a line or word, may\n   * span multiple text nodes, so we iterate through the text both on\n   * two levels in step-sync:\n   *\n   * `leafText` stores the text on a text leaf level, and is advanced\n   * through using the counters `leafTextOffset` and `leafTextRemaining`.\n   *\n   * `blockText` stores the text on a block level, and is shortened\n   * by `distance` every time it is advanced.\n   *\n   * We only maintain a window of one blockText and one leafText because\n   * a block node always appears before all of its leaf nodes.\n   */\n\n  const range = Editor.range(editor, at)\n  const [start, end] = Range.edges(range)\n  const first = reverse ? end : start\n  let isNewBlock = false\n  let blockText = ''\n  let distance = 0 // Distance for leafText to catch up to blockText.\n  let leafTextRemaining = 0\n  let leafTextOffset = 0\n\n  // Iterate through all nodes in range, grabbing entire textual content\n  // of block nodes in blockText, and text nodes in leafText.\n  // Exploits the fact that nodes are sequenced in such a way that we first\n  // encounter the block node, then all of its text nodes, so when iterating\n  // through the blockText and leafText we just need to remember a window of\n  // one block node and leaf node, respectively.\n  for (const [node, path] of Editor.nodes(editor, {\n    at,\n    reverse,\n    voids,\n    ignoreNonSelectable,\n  })) {\n    /*\n     * ELEMENT NODE - Yield position(s) for voids, collect blockText for blocks\n     */\n    if (Element.isElement(node)) {\n      // Void nodes are a special case, so by default we will always\n      // yield their first point. If the `voids` option is set to true,\n      // then we will iterate over their content.\n      if (!voids && (editor.isVoid(node) || editor.isElementReadOnly(node))) {\n        yield Editor.start(editor, path)\n        continue\n      }\n\n      // Inline element nodes are ignored as they don't themselves\n      // contribute to `blockText` or `leafText` - their parent and\n      // children do.\n      if (editor.isInline(node)) continue\n\n      // Block element node - set `blockText` to its text content.\n      if (Editor.hasInlines(editor, node)) {\n        // We always exhaust block nodes before encountering a new one:\n        //   console.assert(blockText === '',\n        //     `blockText='${blockText}' - `+\n        //     `not exhausted before new block node`, path)\n\n        // Ensure range considered is capped to `range`, in the\n        // start/end edge cases where block extends beyond range.\n        // Equivalent to this, but presumably more performant:\n        //   blockRange = Editor.range(editor, ...Editor.edges(editor, path))\n        //   blockRange = Range.intersection(range, blockRange) // intersect\n        //   blockText = Editor.string(editor, blockRange, { voids })\n        const e = Path.isAncestor(path, end.path)\n          ? end\n          : Editor.end(editor, path)\n        const s = Path.isAncestor(path, start.path)\n          ? start\n          : Editor.start(editor, path)\n\n        blockText = Editor.string(editor, { anchor: s, focus: e }, { voids })\n        isNewBlock = true\n      }\n    }\n\n    /*\n     * TEXT LEAF NODE - Iterate through text content, yielding\n     * positions every `distance` offset according to `unit`.\n     */\n    if (Text.isText(node)) {\n      const isFirst = Path.equals(path, first.path)\n\n      // Proof that we always exhaust text nodes before encountering a new one:\n      //   console.assert(leafTextRemaining <= 0,\n      //     `leafTextRemaining=${leafTextRemaining} - `+\n      //     `not exhausted before new leaf text node`, path)\n\n      // Reset `leafText` counters for new text node.\n      if (isFirst) {\n        leafTextRemaining = reverse\n          ? first.offset\n          : node.text.length - first.offset\n        leafTextOffset = first.offset // Works for reverse too.\n      } else {\n        leafTextRemaining = node.text.length\n        leafTextOffset = reverse ? leafTextRemaining : 0\n      }\n\n      // Yield position at the start of node (potentially).\n      if (isFirst || isNewBlock || unit === 'offset') {\n        yield { path, offset: leafTextOffset }\n        isNewBlock = false\n      }\n\n      // Yield positions every (dynamically calculated) `distance` offset.\n      while (true) {\n        // If `leafText` has caught up with `blockText` (distance=0),\n        // and if blockText is exhausted, break to get another block node,\n        // otherwise advance blockText forward by the new `distance`.\n        if (distance === 0) {\n          if (blockText === '') break\n          distance = calcDistance(blockText, unit, reverse)\n          // Split the string at the previously found distance and use the\n          // remaining string for the next iteration.\n          blockText = splitByCharacterDistance(blockText, distance, reverse)[1]\n        }\n\n        // Advance `leafText` by the current `distance`.\n        leafTextOffset = reverse\n          ? leafTextOffset - distance\n          : leafTextOffset + distance\n        leafTextRemaining = leafTextRemaining - distance\n\n        // If `leafText` is exhausted, break to get a new leaf node\n        // and set distance to the overflow amount, so we'll (maybe)\n        // catch up to blockText in the next leaf text node.\n        if (leafTextRemaining < 0) {\n          distance = -leafTextRemaining\n          break\n        }\n\n        // Successfully walked `distance` offsets through `leafText`\n        // to catch up with `blockText`, so we can reset `distance`\n        // and yield this position in this node.\n        distance = 0\n        yield { path, offset: leafTextOffset }\n      }\n    }\n  }\n  // Proof that upon completion, we've exahusted both leaf and block text:\n  //   console.assert(leafTextRemaining <= 0, \"leafText wasn't exhausted\")\n  //   console.assert(blockText === '', \"blockText wasn't exhausted\")\n\n  // Helper:\n  // Return the distance in offsets for a step of size `unit` on given string.\n  function calcDistance(text: string, unit: string, reverse?: boolean) {\n    if (unit === 'character') {\n      return getCharacterDistance(text, reverse)\n    } else if (unit === 'word') {\n      return getWordDistance(text, reverse)\n    } else if (unit === 'line' || unit === 'block') {\n      return text.length\n    }\n    return 1\n  }\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Span } from '../interfaces/location'\nimport { Path } from '../interfaces/path'\n\nexport const previous: EditorInterface['previous'] = (editor, options = {}) => {\n  const { mode = 'lowest', voids = false } = options\n  let { match, at = editor.selection } = options\n\n  if (!at) {\n    return\n  }\n\n  const pointBeforeLocation = Editor.before(editor, at, { voids })\n\n  if (!pointBeforeLocation) {\n    return\n  }\n\n  const [, to] = Editor.first(editor, [])\n\n  // The search location is from the start of the document to the path of\n  // the point before the location passed in\n  const span: Span = [pointBeforeLocation.path, to]\n\n  if (Path.isPath(at) && at.length === 0) {\n    throw new Error(`Cannot get the previous node from the root node!`)\n  }\n\n  if (match == null) {\n    if (Path.isPath(at)) {\n      const [parent] = Editor.parent(editor, at)\n      match = n => parent.children.includes(n)\n    } else {\n      match = () => true\n    }\n  }\n\n  const [previous] = Editor.nodes(editor, {\n    reverse: true,\n    at: span,\n    match,\n    mode,\n    voids,\n  })\n\n  return previous\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { RangeRef } from '../interfaces/range-ref'\n\nexport const rangeRef: EditorInterface['rangeRef'] = (\n  editor,\n  range,\n  options = {}\n) => {\n  const { affinity = 'forward' } = options\n  const ref: RangeRef = {\n    current: range,\n    affinity,\n    unref() {\n      const { current } = ref\n      const rangeRefs = Editor.rangeRefs(editor)\n      rangeRefs.delete(ref)\n      ref.current = null\n      return current\n    },\n  }\n\n  const refs = Editor.rangeRefs(editor)\n  refs.add(ref)\n  return ref\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { RANGE_REFS } from '../utils/weak-maps'\n\nexport const rangeRefs: EditorInterface['rangeRefs'] = editor => {\n  let refs = RANGE_REFS.get(editor)\n\n  if (!refs) {\n    refs = new Set()\n    RANGE_REFS.set(editor, refs)\n  }\n\n  return refs\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\n\nexport const range: EditorInterface['range'] = (editor, at, to) => {\n  if (Range.isRange(at) && !to) {\n    return at\n  }\n\n  const start = Editor.start(editor, at)\n  const end = Editor.end(editor, to || at)\n  return { anchor: start, focus: end }\n}\n", "import { Node } from '../interfaces/node'\nimport { Path } from '../interfaces/path'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { FLUSHING } from '../utils/weak-maps'\nimport { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const removeMark: EditorInterface['removeMark'] = (editor, key) => {\n  const { selection } = editor\n\n  if (selection) {\n    const match = (node: Node, path: Path) => {\n      if (!Text.isText(node)) {\n        return false // marks can only be applied to text\n      }\n      const [parentNode, parentPath] = Editor.parent(editor, path)\n      return !editor.isVoid(parentNode) || editor.markableVoid(parentNode)\n    }\n    const expandedSelection = Range.isExpanded(selection)\n    let markAcceptingVoidSelected = false\n    if (!expandedSelection) {\n      const [selectedNode, selectedPath] = Editor.node(editor, selection)\n      if (selectedNode && match(selectedNode, selectedPath)) {\n        const [parentNode] = Editor.parent(editor, selectedPath)\n        markAcceptingVoidSelected =\n          parentNode && editor.markableVoid(parentNode)\n      }\n    }\n    if (expandedSelection || markAcceptingVoidSelected) {\n      Transforms.unsetNodes(editor, key, {\n        match,\n        split: true,\n        voids: true,\n      })\n    } else {\n      const marks = { ...(Editor.marks(editor) || {}) }\n      delete marks[<keyof Node>key]\n      editor.marks = marks\n      if (!FLUSHING.get(editor)) {\n        editor.onChange()\n      }\n    }\n  }\n}\n", "import { EditorInterface } from '../interfaces/editor'\nimport { NORMALIZING } from '../utils/weak-maps'\n\nexport const setNormalizing: EditorInterface['setNormalizing'] = (\n  editor,\n  isNormalizing\n) => {\n  NORMALIZING.set(editor, isNormalizing)\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const start: EditorInterface['start'] = (editor, at) => {\n  return Editor.point(editor, at, { edge: 'start' })\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Text } from '../interfaces/text'\nimport { Path } from '../interfaces/path'\n\nexport const string: EditorInterface['string'] = (editor, at, options = {}) => {\n  const { voids = false } = options\n  const range = Editor.range(editor, at)\n  const [start, end] = Range.edges(range)\n  let text = ''\n\n  for (const [node, path] of Editor.nodes(editor, {\n    at: range,\n    match: Text.isText,\n    voids,\n  })) {\n    let t = node.text\n\n    if (Path.equals(path, end.path)) {\n      t = t.slice(0, end.offset)\n    }\n\n    if (Path.equals(path, start.path)) {\n      t = t.slice(start.offset)\n    }\n\n    text += t\n  }\n\n  return text\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Text } from '../interfaces/text'\n\nexport const unhangRange: EditorInterface['unhangRange'] = (\n  editor,\n  range,\n  options = {}\n) => {\n  const { voids = false } = options\n  let [start, end] = Range.edges(range)\n\n  // PERF: exit early if we can guarantee that the range isn't hanging.\n  if (\n    start.offset !== 0 ||\n    end.offset !== 0 ||\n    Range.isCollapsed(range) ||\n    Path.hasPrevious(end.path)\n  ) {\n    return range\n  }\n\n  const endBlock = Editor.above(editor, {\n    at: end,\n    match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n    voids,\n  })\n  const blockPath = endBlock ? endBlock[1] : []\n  const first = Editor.start(editor, start)\n  const before = { anchor: first, focus: end }\n  let skip = true\n\n  for (const [node, path] of Editor.nodes(editor, {\n    at: before,\n    match: Text.isText,\n    reverse: true,\n    voids,\n  })) {\n    if (skip) {\n      skip = false\n      continue\n    }\n\n    if (node.text !== '' || Path.isBefore(path, blockPath)) {\n      end = { path, offset: node.text.length }\n      break\n    }\n  }\n\n  return { anchor: start, focus: end }\n}\n", "import { Editor, EditorInterface } from '../interfaces/editor'\n\nexport const withoutNormalizing: EditorInterface['withoutNormalizing'] = (\n  editor,\n  fn\n) => {\n  const value = Editor.isNormalizing(editor)\n  Editor.setNormalizing(editor, false)\n  try {\n    fn()\n  } finally {\n    Editor.setNormalizing(editor, value)\n  }\n  Editor.normalize(editor)\n}\n", "import { EditorInterface, Element, Editor, Text } from '../interfaces'\n\nexport const shouldMergeNodesRemovePrevNode: EditorInterface['shouldMergeNodesRemovePrevNode'] =\n  (editor, [prevNode, prevPath], [curNode, curNodePath]) => {\n    // If the target node that we're merging with is empty, remove it instead\n    // of merging the two. This is a common rich text editor behavior to\n    // prevent losing formatting when deleting entire nodes when you have a\n    // hanging selection.\n    // if prevNode is first child in parent,don't remove it.\n\n    return (\n      (Element.isElement(prevNode) && Editor.isEmpty(editor, prevNode)) ||\n      (Text.isText(prevNode) &&\n        prevNode.text === '' &&\n        prevPath[prevPath.length - 1] !== 0)\n    )\n  }\n", "import { TextTransforms } from '../interfaces/transforms/text'\nimport { Editor } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Point } from '../interfaces/point'\nimport { Path } from '../interfaces/path'\nimport { Transforms } from '../interfaces/transforms'\nimport { Element } from '../interfaces/element'\nimport { NodeEntry } from '../interfaces/node'\n\nexport const deleteText: TextTransforms['delete'] = (editor, options = {}) => {\n  Editor.withoutNormalizing(editor, () => {\n    const {\n      reverse = false,\n      unit = 'character',\n      distance = 1,\n      voids = false,\n    } = options\n    let { at = editor.selection, hanging = false } = options\n\n    if (!at) {\n      return\n    }\n\n    let isCollapsed = false\n    if (Range.isRange(at) && Range.isCollapsed(at)) {\n      isCollapsed = true\n      at = at.anchor\n    }\n\n    if (Point.isPoint(at)) {\n      const furthestVoid = Editor.void(editor, { at, mode: 'highest' })\n\n      if (!voids && furthestVoid) {\n        const [, voidPath] = furthestVoid\n        at = voidPath\n      } else {\n        const opts = { unit, distance }\n        const target = reverse\n          ? Editor.before(editor, at, opts) || Editor.start(editor, [])\n          : Editor.after(editor, at, opts) || Editor.end(editor, [])\n        at = { anchor: at, focus: target }\n        hanging = true\n      }\n    }\n\n    if (Path.isPath(at)) {\n      Transforms.removeNodes(editor, { at, voids })\n      return\n    }\n\n    if (Range.isCollapsed(at)) {\n      return\n    }\n\n    if (!hanging) {\n      const [, end] = Range.edges(at)\n      const endOfDoc = Editor.end(editor, [])\n\n      if (!Point.equals(end, endOfDoc)) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n    }\n\n    let [start, end] = Range.edges(at)\n    const startBlock = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at: start,\n      voids,\n    })\n    const endBlock = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at: end,\n      voids,\n    })\n    const isAcrossBlocks =\n      startBlock && endBlock && !Path.equals(startBlock[1], endBlock[1])\n    const isSingleText = Path.equals(start.path, end.path)\n    const startNonEditable = voids\n      ? null\n      : Editor.void(editor, { at: start, mode: 'highest' }) ??\n        Editor.elementReadOnly(editor, { at: start, mode: 'highest' })\n    const endNonEditable = voids\n      ? null\n      : Editor.void(editor, { at: end, mode: 'highest' }) ??\n        Editor.elementReadOnly(editor, { at: end, mode: 'highest' })\n\n    // If the start or end points are inside an inline void, nudge them out.\n    if (startNonEditable) {\n      const before = Editor.before(editor, start)\n\n      if (before && startBlock && Path.isAncestor(startBlock[1], before.path)) {\n        start = before\n      }\n    }\n\n    if (endNonEditable) {\n      const after = Editor.after(editor, end)\n\n      if (after && endBlock && Path.isAncestor(endBlock[1], after.path)) {\n        end = after\n      }\n    }\n\n    // Get the highest nodes that are completely inside the range, as well as\n    // the start and end nodes.\n    const matches: NodeEntry[] = []\n    let lastPath: Path | undefined\n\n    for (const entry of Editor.nodes(editor, { at, voids })) {\n      const [node, path] = entry\n\n      if (lastPath && Path.compare(path, lastPath) === 0) {\n        continue\n      }\n\n      if (\n        (!voids &&\n          Element.isElement(node) &&\n          (Editor.isVoid(editor, node) ||\n            Editor.isElementReadOnly(editor, node))) ||\n        (!Path.isCommon(path, start.path) && !Path.isCommon(path, end.path))\n      ) {\n        matches.push(entry)\n        lastPath = path\n      }\n    }\n\n    const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n    const startRef = Editor.pointRef(editor, start)\n    const endRef = Editor.pointRef(editor, end)\n\n    let removedText = ''\n\n    if (!isSingleText && !startNonEditable) {\n      const point = startRef.current!\n      const [node] = Editor.leaf(editor, point)\n      const { path } = point\n      const { offset } = start\n      const text = node.text.slice(offset)\n      if (text.length > 0) {\n        editor.apply({ type: 'remove_text', path, offset, text })\n        removedText = text\n      }\n    }\n\n    pathRefs\n      .reverse()\n      .map(r => r.unref())\n      .filter((r): r is Path => r !== null)\n      .forEach(p => Transforms.removeNodes(editor, { at: p, voids }))\n\n    if (!endNonEditable) {\n      const point = endRef.current!\n      const [node] = Editor.leaf(editor, point)\n      const { path } = point\n      const offset = isSingleText ? start.offset : 0\n      const text = node.text.slice(offset, end.offset)\n      if (text.length > 0) {\n        editor.apply({ type: 'remove_text', path, offset, text })\n        removedText = text\n      }\n    }\n\n    if (!isSingleText && isAcrossBlocks && endRef.current && startRef.current) {\n      Transforms.mergeNodes(editor, {\n        at: endRef.current,\n        hanging: true,\n        voids,\n      })\n    }\n\n    // For certain scripts, deleting N character(s) backward should delete\n    // N code point(s) instead of an entire grapheme cluster.\n    // Therefore, the remaining code points should be inserted back.\n    // Bengali: \\u0980-\\u09FF\n    // Thai: \\u0E00-\\u0E7F\n    if (\n      isCollapsed &&\n      reverse &&\n      unit === 'character' &&\n      removedText.length > 1 &&\n      removedText.match(/[\\u0980-\\u09FF\\u0E00-\\u0E7F]+/)\n    ) {\n      Transforms.insertText(\n        editor,\n        removedText.slice(0, removedText.length - distance)\n      )\n    }\n\n    const startUnref = startRef.unref()\n    const endUnref = endRef.unref()\n    const point = reverse ? startUnref || endUnref : endUnref || startUnref\n\n    if (options.at == null && point) {\n      Transforms.select(editor, point)\n    }\n  })\n}\n", "import { Transforms } from '../interfaces/transforms'\nimport { Editor } from '../interfaces/editor'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Descendant, Node, NodeEntry } from '../interfaces/node'\nimport { Text } from '../interfaces/text'\nimport { TextTransforms } from '../interfaces/transforms/text'\nimport { getDefaultInsertLocation } from '../utils'\n\nexport const insertFragment: TextTransforms['insertFragment'] = (\n  editor,\n  fragment,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { hanging = false, voids = false } = options\n    let { at = getDefaultInsertLocation(editor), batchDirty = true } = options\n\n    if (!fragment.length) {\n      return\n    }\n\n    if (Range.isRange(at)) {\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n\n        if (!voids && Editor.void(editor, { at: end })) {\n          return\n        }\n\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n      }\n    } else if (Path.isPath(at)) {\n      at = Editor.start(editor, at)\n    }\n\n    if (!voids && Editor.void(editor, { at })) {\n      return\n    }\n\n    // If the insert point is at the edge of an inline node, move it outside\n    // instead since it will need to be split otherwise.\n    const inlineElementMatch = Editor.above(editor, {\n      at,\n      match: n => Element.isElement(n) && Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n    })\n\n    if (inlineElementMatch) {\n      const [, inlinePath] = inlineElementMatch\n\n      if (Editor.isEnd(editor, at, inlinePath)) {\n        const after = Editor.after(editor, inlinePath)!\n        at = after\n      } else if (Editor.isStart(editor, at, inlinePath)) {\n        const before = Editor.before(editor, inlinePath)!\n        at = before\n      }\n    }\n\n    const blockMatch = Editor.above(editor, {\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      at,\n      voids,\n    })!\n    const [, blockPath] = blockMatch\n    const isBlockStart = Editor.isStart(editor, at, blockPath)\n    const isBlockEnd = Editor.isEnd(editor, at, blockPath)\n    const isBlockEmpty = isBlockStart && isBlockEnd\n    const [, firstLeafPath] = Node.first({ children: fragment }, [])\n    const [, lastLeafPath] = Node.last({ children: fragment }, [])\n\n    // For each node in the fragment, determine what level of wrapping should\n    // be kept. At minimum, all text nodes will be inserted, but if\n    // `shouldInsert` returns true for some ancestor of a particular text node,\n    // then the entire ancestor will be inserted rather than inserting the text\n    // nodes individually.\n    const shouldInsert = ([n, p]: NodeEntry) => {\n      const isRoot = p.length === 0\n      if (isRoot) {\n        return false\n      }\n\n      // If the destination block is empty, insert all top-level blocks of the\n      // fragment.\n      if (isBlockEmpty) {\n        return true\n      }\n\n      // Unless we're at the start of the destination block, unwrap any\n      // non-void blocks that contain the first leaf node in the fragment.\n      if (\n        !isBlockStart &&\n        Path.isAncestor(p, firstLeafPath) &&\n        Element.isElement(n) &&\n        !editor.isVoid(n) &&\n        !editor.isInline(n)\n      ) {\n        return false\n      }\n\n      // Unless we're at the end of the destination block, unwrap any non-void\n      // blocks that contain the last leaf node in the fragment.\n      if (\n        !isBlockEnd &&\n        Path.isAncestor(p, lastLeafPath) &&\n        Element.isElement(n) &&\n        !editor.isVoid(n) &&\n        !editor.isInline(n)\n      ) {\n        return false\n      }\n\n      // Always insert void nodes, inline elements and text nodes.\n      return true\n    }\n\n    // Whether the current node is in the first block of the fragment.\n    let starting = true\n\n    // Inline nodes in the first block of the fragment, to be merged with the\n    // destination block.\n    const starts: Descendant[] = []\n\n    // Blocks in the middle of the fragment.\n    const middles: Element[] = []\n\n    // Inline nodes in the last block of the fragment, to be merged with the\n    // destination block. If the fragment contains only one block, this will be\n    // empty.\n    const ends: Descendant[] = []\n\n    for (const entry of Node.nodes(\n      { children: fragment },\n      { pass: shouldInsert }\n    )) {\n      const [node, path] = entry\n\n      // If we encounter a block that does not contain the first leaf, we're no\n      // longer in the first block of the fragment.\n      if (\n        starting &&\n        Element.isElement(node) &&\n        !editor.isInline(node) &&\n        !Path.isAncestor(path, firstLeafPath)\n      ) {\n        starting = false\n      }\n\n      if (shouldInsert(entry)) {\n        if (Element.isElement(node) && !editor.isInline(node)) {\n          starting = false\n          middles.push(node)\n        } else if (starting) {\n          starts.push(node)\n        } else {\n          ends.push(node)\n        }\n      }\n    }\n\n    const [inlineMatch] = Editor.nodes(editor, {\n      at,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n    })!\n\n    const [, inlinePath] = inlineMatch\n    const isInlineStart = Editor.isStart(editor, at, inlinePath)\n    const isInlineEnd = Editor.isEnd(editor, at, inlinePath)\n\n    const middleRef = Editor.pathRef(\n      editor,\n      isBlockEnd && !ends.length ? Path.next(blockPath) : blockPath\n    )\n\n    const endRef = Editor.pathRef(\n      editor,\n      isInlineEnd ? Path.next(inlinePath) : inlinePath\n    )\n\n    // If the fragment contains inlines in multiple distinct blocks, split the\n    // destination block.\n    const splitBlock = ends.length > 0\n\n    Transforms.splitNodes(editor, {\n      at,\n      match: n =>\n        splitBlock\n          ? Element.isElement(n) && Editor.isBlock(editor, n)\n          : Text.isText(n) || Editor.isInline(editor, n),\n      mode: splitBlock ? 'lowest' : 'highest',\n      always:\n        splitBlock &&\n        (!isBlockStart || starts.length > 0) &&\n        (!isBlockEnd || ends.length > 0),\n      voids,\n    })\n\n    const startRef = Editor.pathRef(\n      editor,\n      !isInlineStart || (isInlineStart && isInlineEnd)\n        ? Path.next(inlinePath)\n        : inlinePath\n    )\n\n    Transforms.insertNodes(editor, starts, {\n      at: startRef.current!,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n      batchDirty,\n    })\n\n    if (isBlockEmpty && !starts.length && middles.length && !ends.length) {\n      Transforms.delete(editor, { at: blockPath, voids })\n    }\n\n    Transforms.insertNodes(editor, middles, {\n      at: middleRef.current!,\n      match: n => Element.isElement(n) && Editor.isBlock(editor, n),\n      mode: 'lowest',\n      voids,\n      batchDirty,\n    })\n\n    Transforms.insertNodes(editor, ends, {\n      at: endRef.current!,\n      match: n => Text.isText(n) || Editor.isInline(editor, n),\n      mode: 'highest',\n      voids,\n      batchDirty,\n    })\n\n    if (!options.at) {\n      let path\n\n      if (ends.length > 0 && endRef.current) {\n        path = Path.previous(endRef.current)\n      } else if (middles.length > 0 && middleRef.current) {\n        path = Path.previous(middleRef.current)\n      } else if (startRef.current) {\n        path = Path.previous(startRef.current)\n      }\n\n      if (path) {\n        const end = Editor.end(editor, path)\n        Transforms.select(editor, end)\n      }\n    }\n\n    startRef.unref()\n    middleRef.unref()\n    endRef.unref()\n  })\n}\n", "import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\n\nexport const collapse: SelectionTransforms['collapse'] = (\n  editor,\n  options = {}\n) => {\n  const { edge = 'anchor' } = options\n  const { selection } = editor\n\n  if (!selection) {\n    return\n  } else if (edge === 'anchor') {\n    Transforms.select(editor, selection.anchor)\n  } else if (edge === 'focus') {\n    Transforms.select(editor, selection.focus)\n  } else if (edge === 'start') {\n    const [start] = Range.edges(selection)\n    Transforms.select(editor, start)\n  } else if (edge === 'end') {\n    const [, end] = Range.edges(selection)\n    Transforms.select(editor, end)\n  }\n}\n", "import { SelectionTransforms } from '../interfaces/transforms/selection'\n\nexport const deselect: SelectionTransforms['deselect'] = editor => {\n  const { selection } = editor\n\n  if (selection) {\n    editor.apply({\n      type: 'set_selection',\n      properties: selection,\n      newProperties: null,\n    })\n  }\n}\n", "import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const move: SelectionTransforms['move'] = (editor, options = {}) => {\n  const { selection } = editor\n  const { distance = 1, unit = 'character', reverse = false } = options\n  let { edge = null } = options\n\n  if (!selection) {\n    return\n  }\n\n  if (edge === 'start') {\n    edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n  }\n\n  if (edge === 'end') {\n    edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n  }\n\n  const { anchor, focus } = selection\n  const opts = { distance, unit, ignoreNonSelectable: true }\n  const props: Partial<Range> = {}\n\n  if (edge == null || edge === 'anchor') {\n    const point = reverse\n      ? Editor.before(editor, anchor, opts)\n      : Editor.after(editor, anchor, opts)\n\n    if (point) {\n      props.anchor = point\n    }\n  }\n\n  if (edge == null || edge === 'focus') {\n    const point = reverse\n      ? Editor.before(editor, focus, opts)\n      : Editor.after(editor, focus, opts)\n\n    if (point) {\n      props.focus = point\n    }\n  }\n\n  Transforms.setSelection(editor, props)\n}\n", "import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Editor } from '../interfaces/editor'\nimport { Transforms } from '../interfaces/transforms'\nimport { Range } from '../interfaces/range'\nimport { Scrubber } from '../interfaces/scrubber'\n\nexport const select: SelectionTransforms['select'] = (editor, target) => {\n  const { selection } = editor\n  target = Editor.range(editor, target)\n\n  if (selection) {\n    Transforms.setSelection(editor, target)\n    return\n  }\n\n  if (!Range.isRange(target)) {\n    throw new Error(\n      `When setting the selection and the current selection is \\`null\\` you must provide at least an \\`anchor\\` and \\`focus\\`, but you passed: ${Scrubber.stringify(\n        target\n      )}`\n    )\n  }\n\n  editor.apply({\n    type: 'set_selection',\n    properties: selection,\n    newProperties: target,\n  })\n}\n", "import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const setPoint: SelectionTransforms['setPoint'] = (\n  editor,\n  props,\n  options = {}\n) => {\n  const { selection } = editor\n  let { edge = 'both' } = options\n\n  if (!selection) {\n    return\n  }\n\n  if (edge === 'start') {\n    edge = Range.isBackward(selection) ? 'focus' : 'anchor'\n  }\n\n  if (edge === 'end') {\n    edge = Range.isBackward(selection) ? 'anchor' : 'focus'\n  }\n\n  const { anchor, focus } = selection\n  const point = edge === 'anchor' ? anchor : focus\n\n  Transforms.setSelection(editor, {\n    [edge === 'anchor' ? 'anchor' : 'focus']: { ...point, ...props },\n  })\n}\n", "import { SelectionTransforms } from '../interfaces/transforms/selection'\nimport { Range } from '../interfaces/range'\nimport { Point } from '../interfaces/point'\n\nexport const setSelection: SelectionTransforms['setSelection'] = (\n  editor,\n  props\n) => {\n  const { selection } = editor\n  const oldProps: Partial<Range> | null = {}\n  const newProps: Partial<Range> = {}\n\n  if (!selection) {\n    return\n  }\n\n  for (const k in props) {\n    if (\n      (k === 'anchor' &&\n        props.anchor != null &&\n        !Point.equals(props.anchor, selection.anchor)) ||\n      (k === 'focus' &&\n        props.focus != null &&\n        !Point.equals(props.focus, selection.focus)) ||\n      (k !== 'anchor' &&\n        k !== 'focus' &&\n        props[<keyof Range>k] !== selection[<keyof Range>k])\n    ) {\n      oldProps[<keyof Range>k] = selection[<keyof Range>k]\n      newProps[<keyof Range>k] = props[<keyof Range>k]\n    }\n  }\n\n  if (Object.keys(oldProps).length > 0) {\n    editor.apply({\n      type: 'set_selection',\n      properties: oldProps,\n      newProperties: newProps,\n    })\n  }\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Node } from '../interfaces/node'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Point } from '../interfaces/point'\nimport { Text } from '../interfaces/text'\nimport { Element } from '../interfaces/element'\nimport { Path } from '../interfaces/path'\nimport { getDefaultInsertLocation } from '../utils'\nimport { batchDirtyPaths } from '../core/batch-dirty-paths'\nimport { BaseInsertNodeOperation } from '../interfaces'\nimport { updateDirtyPaths } from '../core/update-dirty-paths'\n\nexport const insertNodes: NodeTransforms['insertNodes'] = (\n  editor,\n  nodes,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const {\n      hanging = false,\n      voids = false,\n      mode = 'lowest',\n      batchDirty = true,\n    } = options\n    let { at, match, select } = options\n\n    if (Node.isNode(nodes)) {\n      nodes = [nodes]\n    }\n\n    if (nodes.length === 0) {\n      return\n    }\n\n    const [node] = nodes\n\n    if (!at) {\n      at = getDefaultInsertLocation(editor)\n      if (select !== false) {\n        select = true\n      }\n    }\n\n    if (select == null) {\n      select = false\n    }\n\n    if (Range.isRange(at)) {\n      if (!hanging) {\n        at = Editor.unhangRange(editor, at, { voids })\n      }\n\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n      }\n    }\n\n    if (Point.isPoint(at)) {\n      if (match == null) {\n        if (Text.isText(node)) {\n          match = n => Text.isText(n)\n        } else if (editor.isInline(node)) {\n          match = n => Text.isText(n) || Editor.isInline(editor, n)\n        } else {\n          match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n        }\n      }\n\n      const [entry] = Editor.nodes(editor, {\n        at: at.path,\n        match,\n        mode,\n        voids,\n      })\n\n      if (entry) {\n        const [, matchPath] = entry\n        const pathRef = Editor.pathRef(editor, matchPath)\n        const isAtEnd = Editor.isEnd(editor, at, matchPath)\n        Transforms.splitNodes(editor, { at, match, mode, voids })\n        const path = pathRef.unref()!\n        at = isAtEnd ? Path.next(path) : path\n      } else {\n        return\n      }\n    }\n\n    const parentPath = Path.parent(at)\n    let index = at[at.length - 1]\n\n    if (!voids && Editor.void(editor, { at: parentPath })) {\n      return\n    }\n\n    if (batchDirty) {\n      // PERF: batch update dirty paths\n      // batched ops used to transform existing dirty paths\n      const batchedOps: BaseInsertNodeOperation[] = []\n      const newDirtyPaths: Path[] = Path.levels(parentPath)\n      batchDirtyPaths(\n        editor,\n        () => {\n          for (const node of nodes as Node[]) {\n            const path = parentPath.concat(index)\n            index++\n\n            const op: BaseInsertNodeOperation = {\n              type: 'insert_node',\n              path,\n              node,\n            }\n            editor.apply(op)\n            at = Path.next(at as Path)\n\n            batchedOps.push(op)\n            if (Text.isText(node)) {\n              newDirtyPaths.push(path)\n            } else {\n              newDirtyPaths.push(\n                ...Array.from(Node.nodes(node), ([, p]) => path.concat(p))\n              )\n            }\n          }\n        },\n        () => {\n          updateDirtyPaths(editor, newDirtyPaths, p => {\n            let newPath: Path | null = p\n            for (const op of batchedOps) {\n              if (Path.operationCanTransformPath(op)) {\n                newPath = Path.transform(newPath, op)\n                if (!newPath) {\n                  return null\n                }\n              }\n            }\n            return newPath\n          })\n        }\n      )\n    } else {\n      for (const node of nodes as Node[]) {\n        const path = parentPath.concat(index)\n        index++\n\n        editor.apply({ type: 'insert_node', path, node })\n        at = Path.next(at as Path)\n      }\n    }\n\n    at = Path.previous(at)\n\n    if (select) {\n      const point = Editor.end(editor, at)\n\n      if (point) {\n        Transforms.select(editor, point)\n      }\n    }\n  })\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Ancestor, NodeEntry } from '../interfaces/node'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const liftNodes: NodeTransforms['liftNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { at = editor.selection, mode = 'lowest', voids = false } = options\n    let { match } = options\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!at) {\n      return\n    }\n\n    const matches = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(matches, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n\n      if (path.length < 2) {\n        throw new Error(\n          `Cannot lift node at a path [${path}] because it has a depth of less than \\`2\\`.`\n        )\n      }\n\n      const parentNodeEntry = Editor.node(editor, Path.parent(path))\n      const [parent, parentPath] = parentNodeEntry as NodeEntry<Ancestor>\n      const index = path[path.length - 1]\n      const { length } = parent.children\n\n      if (length === 1) {\n        const toPath = Path.next(parentPath)\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n        Transforms.removeNodes(editor, { at: parentPath, voids })\n      } else if (index === 0) {\n        Transforms.moveNodes(editor, { at: path, to: parentPath, voids })\n      } else if (index === length - 1) {\n        const toPath = Path.next(parentPath)\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n      } else {\n        const splitPath = Path.next(path)\n        const toPath = Path.next(parentPath)\n        Transforms.splitNodes(editor, { at: splitPath, voids })\n        Transforms.moveNodes(editor, { at: path, to: toPath, voids })\n      }\n    }\n  })\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Text } from '../interfaces/text'\nimport { Scrubber } from '../interfaces/scrubber'\nimport { Node } from '../interfaces/node'\n\nconst hasSingleChildNest = (editor: Editor, node: Node): boolean => {\n  if (Element.isElement(node)) {\n    const element = node as Element\n    if (Editor.isVoid(editor, node)) {\n      return true\n    } else if (element.children.length === 1) {\n      return hasSingleChildNest(editor, element.children[0])\n    } else {\n      return false\n    }\n  } else if (Editor.isEditor(node)) {\n    return false\n  } else {\n    return true\n  }\n}\n\nexport const mergeNodes: NodeTransforms['mergeNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    let { match, at = editor.selection } = options\n    const { hanging = false, voids = false, mode = 'lowest' } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        const [parent] = Editor.parent(editor, at)\n        match = n => parent.children.includes(n)\n      } else {\n        match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n      }\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    if (Range.isRange(at)) {\n      if (Range.isCollapsed(at)) {\n        at = at.anchor\n      } else {\n        const [, end] = Range.edges(at)\n        const pointRef = Editor.pointRef(editor, end)\n        Transforms.delete(editor, { at })\n        at = pointRef.unref()!\n\n        if (options.at == null) {\n          Transforms.select(editor, at)\n        }\n      }\n    }\n\n    const [current] = Editor.nodes(editor, { at, match, voids, mode })\n    const prev = Editor.previous(editor, { at, match, voids, mode })\n\n    if (!current || !prev) {\n      return\n    }\n\n    const [node, path] = current\n    const [prevNode, prevPath] = prev\n\n    if (path.length === 0 || prevPath.length === 0) {\n      return\n    }\n\n    const newPath = Path.next(prevPath)\n    const commonPath = Path.common(path, prevPath)\n    const isPreviousSibling = Path.isSibling(path, prevPath)\n    const levels = Array.from(Editor.levels(editor, { at: path }), ([n]) => n)\n      .slice(commonPath.length)\n      .slice(0, -1)\n\n    // Determine if the merge will leave an ancestor of the path empty as a\n    // result, in which case we'll want to remove it after merging.\n    const emptyAncestor = Editor.above(editor, {\n      at: path,\n      mode: 'highest',\n      match: n => levels.includes(n) && hasSingleChildNest(editor, n),\n    })\n\n    const emptyRef = emptyAncestor && Editor.pathRef(editor, emptyAncestor[1])\n    let properties\n    let position\n\n    // Ensure that the nodes are equivalent, and figure out what the position\n    // and extra properties of the merge will be.\n    if (Text.isText(node) && Text.isText(prevNode)) {\n      const { text, ...rest } = node\n      position = prevNode.text.length\n      properties = rest as Partial<Text>\n    } else if (Element.isElement(node) && Element.isElement(prevNode)) {\n      const { children, ...rest } = node\n      position = prevNode.children.length\n      properties = rest as Partial<Element>\n    } else {\n      throw new Error(\n        `Cannot merge the node at path [${path}] with the previous sibling because it is not the same kind: ${Scrubber.stringify(\n          node\n        )} ${Scrubber.stringify(prevNode)}`\n      )\n    }\n\n    // If the node isn't already the next sibling of the previous node, move\n    // it so that it is before merging.\n    if (!isPreviousSibling) {\n      Transforms.moveNodes(editor, { at: path, to: newPath, voids })\n    }\n\n    // If there was going to be an empty ancestor of the node that was merged,\n    // we remove it from the tree.\n    if (emptyRef) {\n      Transforms.removeNodes(editor, { at: emptyRef.current!, voids })\n    }\n\n    if (Editor.shouldMergeNodesRemovePrevNode(editor, prev, current)) {\n      Transforms.removeNodes(editor, { at: prevPath, voids })\n    } else {\n      editor.apply({\n        type: 'merge_node',\n        path: newPath,\n        position,\n        properties,\n      })\n    }\n\n    if (emptyRef) {\n      emptyRef.unref()\n    }\n  })\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\n\nexport const moveNodes: NodeTransforms['moveNodes'] = (editor, options) => {\n  Editor.withoutNormalizing(editor, () => {\n    const {\n      to,\n      at = editor.selection,\n      mode = 'lowest',\n      voids = false,\n    } = options\n    let { match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    const toRef = Editor.pathRef(editor, to)\n    const targets = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(targets, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n      const newPath = toRef.current!\n\n      if (path.length !== 0) {\n        editor.apply({ type: 'move_node', path, newPath })\n      }\n\n      if (\n        toRef.current &&\n        Path.isSibling(newPath, path) &&\n        Path.isAfter(newPath, path)\n      ) {\n        // When performing a sibling move to a later index, the path at the destination is shifted\n        // to before the insertion point instead of after. To ensure our group of nodes are inserted\n        // in the correct order we increment toRef to account for that\n        toRef.current = Path.next(toRef.current)\n      }\n    }\n\n    toRef.unref()\n  })\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\n\nexport const removeNodes: NodeTransforms['removeNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { hanging = false, voids = false, mode = 'lowest' } = options\n    let { at = editor.selection, match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    const depths = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(depths, ([, p]) => Editor.pathRef(editor, p))\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n\n      if (path) {\n        const [node] = Editor.node(editor, path)\n        editor.apply({ type: 'remove_node', path, node })\n      }\n    }\n  })\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\nimport { Node } from '../interfaces/node'\n\nexport const setNodes: NodeTransforms['setNodes'] = (\n  editor,\n  props: Partial<Node>,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    let { match, at = editor.selection, compare, merge } = options\n    const {\n      hanging = false,\n      mode = 'lowest',\n      split = false,\n      voids = false,\n    } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (!hanging && Range.isRange(at)) {\n      at = Editor.unhangRange(editor, at, { voids })\n    }\n\n    if (split && Range.isRange(at)) {\n      if (\n        Range.isCollapsed(at) &&\n        Editor.leaf(editor, at.anchor)[0].text.length > 0\n      ) {\n        // If the range is collapsed in a non-empty node and 'split' is true, there's nothing to\n        // set that won't get normalized away\n        return\n      }\n      const rangeRef = Editor.rangeRef(editor, at, { affinity: 'inward' })\n      const [start, end] = Range.edges(at)\n      const splitMode = mode === 'lowest' ? 'lowest' : 'highest'\n      const endAtEndOfNode = Editor.isEnd(editor, end, end.path)\n      Transforms.splitNodes(editor, {\n        at: end,\n        match,\n        mode: splitMode,\n        voids,\n        always: !endAtEndOfNode,\n      })\n      const startAtStartOfNode = Editor.isStart(editor, start, start.path)\n      Transforms.splitNodes(editor, {\n        at: start,\n        match,\n        mode: splitMode,\n        voids,\n        always: !startAtStartOfNode,\n      })\n      at = rangeRef.unref()!\n\n      if (options.at == null) {\n        Transforms.select(editor, at)\n      }\n    }\n\n    if (!compare) {\n      compare = (prop, nodeProp) => prop !== nodeProp\n    }\n\n    for (const [node, path] of Editor.nodes(editor, {\n      at,\n      match,\n      mode,\n      voids,\n    })) {\n      const properties: Partial<Node> = {}\n      // FIXME: is this correct?\n      const newProperties: Partial<Node> & { [key: string]: unknown } = {}\n\n      // You can't set properties on the editor node.\n      if (path.length === 0) {\n        continue\n      }\n\n      let hasChanges = false\n\n      for (const k in props) {\n        if (k === 'children' || k === 'text') {\n          continue\n        }\n\n        if (compare(props[<keyof Node>k], node[<keyof Node>k])) {\n          hasChanges = true\n          // Omit new properties from the old properties list\n          if (node.hasOwnProperty(k))\n            properties[<keyof Node>k] = node[<keyof Node>k]\n          // Omit properties that have been removed from the new properties list\n          if (merge) {\n            if (props[<keyof Node>k] != null)\n              newProperties[<keyof Node>k] = merge(\n                node[<keyof Node>k],\n                props[<keyof Node>k]\n              )\n          } else {\n            if (props[<keyof Node>k] != null)\n              newProperties[<keyof Node>k] = props[<keyof Node>k]\n          }\n        }\n      }\n\n      if (hasChanges) {\n        editor.apply({\n          type: 'set_node',\n          path,\n          properties,\n          newProperties,\n        })\n      }\n    }\n  })\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Path } from '../interfaces/path'\nimport { PointRef } from '../interfaces/point-ref'\nimport { Transforms } from '../interfaces/transforms'\nimport { Node } from '../interfaces/node'\nimport { Point } from '../interfaces/point'\n\n/**\n * Convert a range into a point by deleting it's content.\n */\nconst deleteRange = (editor: Editor, range: Range): Point | null => {\n  if (Range.isCollapsed(range)) {\n    return range.anchor\n  } else {\n    const [, end] = Range.edges(range)\n    const pointRef = Editor.pointRef(editor, end)\n    Transforms.delete(editor, { at: range })\n    return pointRef.unref()\n  }\n}\n\nexport const splitNodes: NodeTransforms['splitNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', voids = false } = options\n    let { match, at = editor.selection, height = 0, always = false } = options\n\n    if (match == null) {\n      match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (Range.isRange(at)) {\n      at = deleteRange(editor, at)\n    }\n\n    // If the target is a path, the default height-skipping and position\n    // counters need to account for us potentially splitting at a non-leaf.\n    if (Path.isPath(at)) {\n      const path = at\n      const point = Editor.point(editor, path)\n      const [parent] = Editor.parent(editor, path)\n      match = n => n === parent\n      height = point.path.length - path.length + 1\n      at = point\n      always = true\n    }\n\n    if (!at) {\n      return\n    }\n\n    const beforeRef = Editor.pointRef(editor, at, {\n      affinity: 'backward',\n    })\n    let afterRef: PointRef | undefined\n    try {\n      const [highest] = Editor.nodes(editor, { at, match, mode, voids })\n\n      if (!highest) {\n        return\n      }\n\n      const voidMatch = Editor.void(editor, { at, mode: 'highest' })\n      const nudge = 0\n\n      if (!voids && voidMatch) {\n        const [voidNode, voidPath] = voidMatch\n\n        if (Element.isElement(voidNode) && editor.isInline(voidNode)) {\n          let after = Editor.after(editor, voidPath)\n\n          if (!after) {\n            const text = { text: '' }\n            const afterPath = Path.next(voidPath)\n            Transforms.insertNodes(editor, text, { at: afterPath, voids })\n            after = Editor.point(editor, afterPath)!\n          }\n\n          at = after\n          always = true\n        }\n\n        const siblingHeight = at.path.length - voidPath.length\n        height = siblingHeight + 1\n        always = true\n      }\n\n      afterRef = Editor.pointRef(editor, at)\n      const depth = at.path.length - height\n      const [, highestPath] = highest\n      const lowestPath = at.path.slice(0, depth)\n      let position = height === 0 ? at.offset : at.path[depth] + nudge\n\n      for (const [node, path] of Editor.levels(editor, {\n        at: lowestPath,\n        reverse: true,\n        voids,\n      })) {\n        let split = false\n\n        if (\n          path.length < highestPath.length ||\n          path.length === 0 ||\n          (!voids && Element.isElement(node) && Editor.isVoid(editor, node))\n        ) {\n          break\n        }\n\n        const point = beforeRef.current!\n        const isEnd = Editor.isEnd(editor, point, path)\n\n        if (always || !beforeRef || !Editor.isEdge(editor, point, path)) {\n          split = true\n          const properties = Node.extractProps(node)\n          editor.apply({\n            type: 'split_node',\n            path,\n            position,\n            properties,\n          })\n        }\n\n        position = path[path.length - 1] + (split || isEnd ? 1 : 0)\n      }\n\n      if (options.at == null) {\n        const point = afterRef.current || Editor.end(editor, [])\n        Transforms.select(editor, point)\n      }\n    } finally {\n      beforeRef.unref()\n      afterRef?.unref()\n    }\n  })\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const unsetNodes: NodeTransforms['unsetNodes'] = (\n  editor,\n  props,\n  options = {}\n) => {\n  if (!Array.isArray(props)) {\n    props = [props]\n  }\n\n  const obj: any = {}\n\n  for (const key of props) {\n    obj[key] = null\n  }\n\n  Transforms.setNodes(editor, obj, options)\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const unwrapNodes: NodeTransforms['unwrapNodes'] = (\n  editor,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', split = false, voids = false } = options\n    let { at = editor.selection, match } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      match = Path.isPath(at)\n        ? matchPath(editor, at)\n        : n => Element.isElement(n) && Editor.isBlock(editor, n)\n    }\n\n    if (Path.isPath(at)) {\n      at = Editor.range(editor, at)\n    }\n\n    const rangeRef = Range.isRange(at) ? Editor.rangeRef(editor, at) : null\n    const matches = Editor.nodes(editor, { at, match, mode, voids })\n    const pathRefs = Array.from(\n      matches,\n      ([, p]) => Editor.pathRef(editor, p)\n      // unwrapNode will call liftNode which does not support splitting the node when nested.\n      // If we do not reverse the order and call it from top to the bottom, it will remove all blocks\n      // that wrap target node. So we reverse the order.\n    ).reverse()\n\n    for (const pathRef of pathRefs) {\n      const path = pathRef.unref()!\n      const [node] = Editor.node(editor, path)\n      let range = Editor.range(editor, path)\n\n      if (split && rangeRef) {\n        range = Range.intersection(rangeRef.current!, range)!\n      }\n\n      Transforms.liftNodes(editor, {\n        at: range,\n        match: n => Element.isAncestor(node) && node.children.includes(n),\n        voids,\n      })\n    }\n\n    if (rangeRef) {\n      rangeRef.unref()\n    }\n  })\n}\n", "import { NodeTransforms } from '../interfaces/transforms/node'\nimport { Editor } from '../interfaces/editor'\nimport { Path } from '../interfaces/path'\nimport { matchPath } from '../utils/match-path'\nimport { Element } from '../interfaces/element'\nimport { Text } from '../interfaces/text'\nimport { Range } from '../interfaces/range'\nimport { Transforms } from '../interfaces/transforms'\n\nexport const wrapNodes: NodeTransforms['wrapNodes'] = (\n  editor,\n  element,\n  options = {}\n) => {\n  Editor.withoutNormalizing(editor, () => {\n    const { mode = 'lowest', split = false, voids = false } = options\n    let { match, at = editor.selection } = options\n\n    if (!at) {\n      return\n    }\n\n    if (match == null) {\n      if (Path.isPath(at)) {\n        match = matchPath(editor, at)\n      } else if (editor.isInline(element)) {\n        match = n =>\n          (Element.isElement(n) && Editor.isInline(editor, n)) || Text.isText(n)\n      } else {\n        match = n => Element.isElement(n) && Editor.isBlock(editor, n)\n      }\n    }\n\n    if (split && Range.isRange(at)) {\n      const [start, end] = Range.edges(at)\n      const rangeRef = Editor.rangeRef(editor, at, {\n        affinity: 'inward',\n      })\n      Transforms.splitNodes(editor, { at: end, match, voids })\n      Transforms.splitNodes(editor, { at: start, match, voids })\n      at = rangeRef.unref()!\n\n      if (options.at == null) {\n        Transforms.select(editor, at)\n      }\n    }\n\n    const roots = Array.from(\n      Editor.nodes(editor, {\n        at,\n        match: editor.isInline(element)\n          ? n => Element.isElement(n) && Editor.isBlock(editor, n)\n          : n => Editor.isEditor(n),\n        mode: 'lowest',\n        voids,\n      })\n    )\n\n    for (const [, rootPath] of roots) {\n      const a = Range.isRange(at)\n        ? Range.intersection(at, Editor.range(editor, rootPath))\n        : at\n\n      if (!a) {\n        continue\n      }\n\n      const matches = Array.from(\n        Editor.nodes(editor, { at: a, match, mode, voids })\n      )\n\n      if (matches.length > 0) {\n        const [first] = matches\n        const last = matches[matches.length - 1]\n        const [, firstPath] = first\n        const [, lastPath] = last\n\n        if (firstPath.length === 0 && lastPath.length === 0) {\n          // if there's no matching parent - usually means the node is an editor - don't do anything\n          continue\n        }\n\n        const commonPath = Path.equals(firstPath, lastPath)\n          ? Path.parent(firstPath)\n          : Path.common(firstPath, lastPath)\n\n        const range = Editor.range(editor, firstPath, lastPath)\n        const commonNodeEntry = Editor.node(editor, commonPath)\n        const [commonNode] = commonNodeEntry\n        const depth = commonPath.length + 1\n        const wrapperPath = Path.next(lastPath.slice(0, depth))\n        const wrapper = { ...element, children: [] }\n        Transforms.insertNodes(editor, wrapper, { at: wrapperPath, voids })\n\n        Transforms.moveNodes(editor, {\n          at: range,\n          match: n =>\n            Element.isAncestor(commonNode) && commonNode.children.includes(n),\n          to: wrapperPath.concat(0),\n          voids,\n        })\n      }\n    }\n  })\n}\n", "import {\n  addMark,\n  deleteFragment,\n  Editor,\n  getDirtyPaths,\n  getFragment,\n  insertBreak,\n  insertFragment,\n  insertNode,\n  insertSoftBreak,\n  insertText,\n  normalizeNode,\n  removeMark,\n  shouldNormalize,\n} from './'\nimport { apply } from './core'\nimport {\n  above,\n  after,\n  before,\n  deleteBackward,\n  deleteForward,\n  edges,\n  elementReadOnly,\n  end,\n  first,\n  fragment,\n  getVoid,\n  hasBlocks,\n  hasInlines,\n  hasPath,\n  hasTexts,\n  isBlock,\n  isEdge,\n  isEmpty,\n  isEnd,\n  isNormalizing,\n  isStart,\n  last,\n  leaf,\n  levels,\n  marks,\n  next,\n  node,\n  nodes,\n  normalize,\n  parent,\n  path,\n  pathRef,\n  pathRefs,\n  point,\n  pointRef,\n  pointRefs,\n  positions,\n  previous,\n  range,\n  rangeRef,\n  rangeRefs,\n  setNormalizing,\n  shouldMergeNodesRemovePrevNode,\n  start,\n  string,\n  unhangRange,\n  withoutNormalizing,\n} from './editor'\nimport { deleteText } from './transforms-text'\nimport {\n  collapse,\n  deselect,\n  move,\n  select,\n  setPoint,\n  setSelection,\n} from './transforms-selection'\nimport {\n  insertNodes,\n  liftNodes,\n  mergeNodes,\n  moveNodes,\n  removeNodes,\n  setNodes,\n  splitNodes,\n  unsetNodes,\n  unwrapNodes,\n  wrapNodes,\n} from './transforms-node'\n\n/**\n * Create a new Slate `Editor` object.\n */\nexport const createEditor = (): Editor => {\n  const editor: Editor = {\n    children: [],\n    operations: [],\n    selection: null,\n    marks: null,\n    isElementReadOnly: () => false,\n    isInline: () => false,\n    isSelectable: () => true,\n    isVoid: () => false,\n    markableVoid: () => false,\n    onChange: () => {},\n\n    // Core\n    apply: (...args) => apply(editor, ...args),\n\n    // Editor\n    addMark: (...args) => addMark(editor, ...args),\n    deleteBackward: (...args) => deleteBackward(editor, ...args),\n    deleteForward: (...args) => deleteForward(editor, ...args),\n    deleteFragment: (...args) => deleteFragment(editor, ...args),\n    getFragment: (...args) => getFragment(editor, ...args),\n    insertBreak: (...args) => insertBreak(editor, ...args),\n    insertSoftBreak: (...args) => insertSoftBreak(editor, ...args),\n    insertFragment: (...args) => insertFragment(editor, ...args),\n    insertNode: (...args) => insertNode(editor, ...args),\n    insertText: (...args) => insertText(editor, ...args),\n    normalizeNode: (...args) => normalizeNode(editor, ...args),\n    removeMark: (...args) => removeMark(editor, ...args),\n    getDirtyPaths: (...args) => getDirtyPaths(editor, ...args),\n    shouldNormalize: (...args) => shouldNormalize(editor, ...args),\n\n    // Editor interface\n    above: (...args) => above(editor, ...args),\n    after: (...args) => after(editor, ...args),\n    before: (...args) => before(editor, ...args),\n    collapse: (...args) => collapse(editor, ...args),\n    delete: (...args) => deleteText(editor, ...args),\n    deselect: (...args) => deselect(editor, ...args),\n    edges: (...args) => edges(editor, ...args),\n    elementReadOnly: (...args) => elementReadOnly(editor, ...args),\n    end: (...args) => end(editor, ...args),\n    first: (...args) => first(editor, ...args),\n    fragment: (...args) => fragment(editor, ...args),\n    getMarks: (...args) => marks(editor, ...args),\n    hasBlocks: (...args) => hasBlocks(editor, ...args),\n    hasInlines: (...args) => hasInlines(editor, ...args),\n    hasPath: (...args) => hasPath(editor, ...args),\n    hasTexts: (...args) => hasTexts(editor, ...args),\n    insertNodes: (...args) => insertNodes(editor, ...args),\n    isBlock: (...args) => isBlock(editor, ...args),\n    isEdge: (...args) => isEdge(editor, ...args),\n    isEmpty: (...args) => isEmpty(editor, ...args),\n    isEnd: (...args) => isEnd(editor, ...args),\n    isNormalizing: (...args) => isNormalizing(editor, ...args),\n    isStart: (...args) => isStart(editor, ...args),\n    last: (...args) => last(editor, ...args),\n    leaf: (...args) => leaf(editor, ...args),\n    levels: (...args) => levels(editor, ...args),\n    liftNodes: (...args) => liftNodes(editor, ...args),\n    mergeNodes: (...args) => mergeNodes(editor, ...args),\n    move: (...args) => move(editor, ...args),\n    moveNodes: (...args) => moveNodes(editor, ...args),\n    next: (...args) => next(editor, ...args),\n    node: (...args) => node(editor, ...args),\n    nodes: (...args) => nodes(editor, ...args),\n    normalize: (...args) => normalize(editor, ...args),\n    parent: (...args) => parent(editor, ...args),\n    path: (...args) => path(editor, ...args),\n    pathRef: (...args) => pathRef(editor, ...args),\n    pathRefs: (...args) => pathRefs(editor, ...args),\n    point: (...args) => point(editor, ...args),\n    pointRef: (...args) => pointRef(editor, ...args),\n    pointRefs: (...args) => pointRefs(editor, ...args),\n    positions: (...args) => positions(editor, ...args),\n    previous: (...args) => previous(editor, ...args),\n    range: (...args) => range(editor, ...args),\n    rangeRef: (...args) => rangeRef(editor, ...args),\n    rangeRefs: (...args) => rangeRefs(editor, ...args),\n    removeNodes: (...args) => removeNodes(editor, ...args),\n    select: (...args) => select(editor, ...args),\n    setNodes: (...args) => setNodes(editor, ...args),\n    setNormalizing: (...args) => setNormalizing(editor, ...args),\n    setPoint: (...args) => setPoint(editor, ...args),\n    setSelection: (...args) => setSelection(editor, ...args),\n    splitNodes: (...args) => splitNodes(editor, ...args),\n    start: (...args) => start(editor, ...args),\n    string: (...args) => string(editor, ...args),\n    unhangRange: (...args) => unhangRange(editor, ...args),\n    unsetNodes: (...args) => unsetNodes(editor, ...args),\n    unwrapNodes: (...args) => unwrapNodes(editor, ...args),\n    void: (...args) => getVoid(editor, ...args),\n    withoutNormalizing: (...args) => withoutNormalizing(editor, ...args),\n    wrapNodes: (...args) => wrapNodes(editor, ...args),\n    shouldMergeNodesRemovePrevNode: (...args) =>\n      shouldMergeNodesRemovePrevNode(editor, ...args),\n  }\n\n  return editor\n}\n"],
  "mappings": "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",
  "names": ["PathRef", "transform", "ref", "op", "current", "affinity", "path", "Path", "unref", "PointRef", "point", "Point", "RangeRef", "Range", "DIRTY_PATHS", "WeakMap", "DIRTY_PATH_KEYS", "FLUSHING", "NORMALIZING", "PATH_REFS", "POINT_REFS", "RANGE_REFS", "ancestors", "options", "arguments", "length", "undefined", "reverse", "paths", "levels", "slice", "common", "another", "i", "av", "bv", "push", "compare", "min", "Math", "endsAfter", "as", "bs", "equals", "endsAt", "endsBefore", "every", "n", "hasPrevious", "isAfter", "isAncestor", "isBefore", "isChild", "isCommon", "isDescendant", "isParent", "isPath", "value", "Array", "isArray", "isSibling", "al", "bl", "list", "next", "Error", "concat", "last", "operationCanTransformPath", "operation", "type", "parent", "previous", "relative", "ancestor", "p", "position", "newPath", "onp", "copy", "o", "toPrimitive", "toPropertyKey", "insertChildren", "xs", "index", "_len", "newValues", "_key", "replaceChildren", "removeCount", "_len2", "_key2", "removeChildren", "modifyDescendant", "editor", "f", "node", "Node", "get", "slicedPath", "modifiedNode", "pop", "ancestorNode", "_objectSpread", "children", "modifyChildren", "Text", "isText", "Scrubber", "stringify", "modifyLeaf", "GeneralTransforms", "transformSelection", "offset", "text", "before", "after", "prevPath", "prevIndex", "prev", "newNode", "truePath", "newIndex", "selection", "key", "points", "result", "texts", "preferNext", "properties", "newProperties", "hasOwnProperty", "isRange", "nextNode", "NodeTransforms", "insertNodes", "nodes", "liftNodes", "mergeNodes", "moveNodes", "removeNodes", "setNodes", "props", "splitNodes", "unsetNodes", "unwrapNodes", "wrapNodes", "element", "SelectionTransforms", "collapse", "deselect", "move", "select", "target", "setPoint", "setSelection", "isObject", "isDeepEqual", "a", "b", "objectWithoutPropertiesLoose", "edges", "range", "anchor", "focus", "isBackward", "end", "surrounds", "intersectionRange", "intersection", "includes", "rs", "re", "ts", "te", "start", "isAfterStart", "isBeforeEnd", "isPoint", "rest", "_objectWithoutProperties", "_excluded", "s1", "e1", "s2", "e2", "isCollapsed", "isExpanded", "isForward", "affinityAnchor", "affinityFocus", "isElement", "deep", "isEditor", "apply", "isChildrenValid", "isNodeList", "Element", "isElementList", "val", "isElementProps", "isElementType", "elementVal", "elementKey", "matches", "root", "entry", "child", "c", "childPath", "descendant", "Editor", "descendants", "elements", "extractProps", "_excluded2", "first", "fragment", "newRoot", "produce", "r", "nodeEntries", "pass", "_ref", "splice", "leaf", "getIf", "has", "isNode", "isTextProps", "from", "to", "visited", "Set", "add", "nextIndex", "parentPath", "string", "map", "join", "Operation", "isNodeOperation", "isOperation", "endsWith", "isOperationList", "isSelectionOperation", "isTextOperation", "inverse", "inversePath", "inverseNewPath", "addMark", "deleteFragment", "insertBreak", "insertSoftBreak", "insertFragment", "insertNode", "insertText", "isElementReadOnly", "isInline", "isSelectable", "isVoid", "normalizeNode", "onChange", "removeMark", "getDirtyPaths", "marks", "operations", "above", "at", "deleteBackward", "unit", "deleteForward", "elementReadOnly", "hasBlocks", "hasInlines", "hasPath", "hasTexts", "isBlock", "isEdge", "isEmpty", "isEnd", "isNormalizing", "isStart", "getMarks", "normalize", "pathRef", "pathRefs", "pointRef", "pointRefs", "positions", "rangeRef", "rangeRefs", "setNormalizing", "unhangRange", "void", "withoutNormalizing", "fn", "shouldMergeNodesRemovePrevNode", "prevNode", "curNode", "Location", "isLocation", "Span", "isSpan", "_scrubber", "setScrubber", "scrubber", "JSON", "loose", "omitText", "obj", "isTextList", "decorations", "leaves", "dec", "merge", "mergeDecoration", "leafEnd", "decorationStart", "decorationEnd", "Object", "assign", "leafStart", "middle", "off", "currentOffset", "item", "entries", "isFirst", "isLast", "getDefaultInsertLocation", "matchPath", "getCharacterDistance", "str", "isRTL", "isLTR", "codepoints", "codepointsIteratorRTL", "left", "CodepointType", "None", "right", "distance", "gb11", "gb12Or13", "char", "code", "codePointAt", "getCodepointType", "intersects", "ZWJ", "ExtPict", "endsWithEmojiZWJ", "substring", "RI", "endsWithOddNumberOfRIs", "isBoundaryPair", "SPACE", "PUNCTUATION", "CHAMELEON", "getWordDistance", "dist", "started", "charDist", "remaining", "splitByCharacterDistance", "isWordCharacter", "test", "nextChar", "nextRemaining", "char1", "charAt", "isLowSurrogate", "charCodeAt", "char2", "isHighSurrogate", "charCode", "reExtend", "rePrepend", "reSpacingMark", "reL", "reV", "reT", "reLV", "reLVT", "reExtPict", "Any", "search", "Extend", "Prepend", "SpacingMark", "L", "V", "T", "LV", "LVT", "x", "y", "NonBoundaryPairs", "findIndex", "endingEmojiZWJ", "endingRIs", "match", "numRIs", "TextTransforms", "delete", "voids", "startRef", "endRef", "Transforms", "startPoint", "endPoint", "BATCHING_DIRTY_PATHS", "isBatchingDirtyPaths", "batchDirtyPaths", "update", "set", "updateDirtyPaths", "newDirtyPaths", "oldDirtyPaths", "oldDirtyPathKeys", "dirtyPaths", "dirtyPathKeys", "Promise", "resolve", "then", "previousPath", "oldAncestors", "newAncestors", "newParent", "resultPath", "nextPath", "getFragment", "shouldHaveInlines", "currentNode", "isInlineOrText", "fallbackElement", "newChild", "elementChild", "shouldNormalize", "iteration", "initialDirtyPathsLength", "maxIterations", "mode", "firstMatch", "parentNode", "markableVoid", "expandedSelection", "markAcceptingVoidSelected", "selectedNode", "selectedPath", "split", "edge", "d", "direction", "getVoid", "some", "always", "markedVoid", "block", "blockPath", "pointAfterLocation", "span", "universal", "ignoreNonSelectable", "hit", "isLower", "emit", "force", "getDirtyPathKeys", "popDirtyPath", "allPaths", "allPathKeys", "dirtyPath", "_", "refs", "depth", "firstPath", "lastPath", "isNewBlock", "blockText", "leafTextRemaining", "leafTextOffset", "e", "s", "calcDistance", "pointBeforeLocation", "t", "endBlock", "skip", "_ref2", "deleteText", "_Editor$void", "_Editor$void2", "hanging", "furthestVoid", "voidPath", "opts", "endOfDoc", "startBlock", "isAcrossBlocks", "isSingleText", "startNonEditable", "endNonEditable", "removedText", "filter", "forEach", "startUnref", "endUnref", "batchDirty", "inlineElementMatch", "inlinePath", "blockMatch", "isBlockStart", "isBlockEnd", "isBlockEmpty", "firstLeafPath", "lastLeafPath", "shouldInsert", "isRoot", "starting", "starts", "middles", "ends", "inlineMatch", "isInlineStart", "isInlineEnd", "middleRef", "splitBlock", "oldProps", "newProps", "k", "keys", "isAtEnd", "batchedOps", "_loop", "parentNodeEntry", "toPath", "splitPath", "hasSingleChildNest", "commonPath", "isPreviousSibling", "emptyAncestor", "emptyRef", "toRef", "targets", "depths", "splitMode", "endAtEndOfNode", "startAtStartOfNode", "prop", "nodeProp", "hasChanges", "deleteRange", "height", "beforeRef", "afterRef", "highest", "voidMatch", "nudge", "voidNode", "afterPath", "siblingHeight", "highestPath", "lowestPath", "_afterRef", "roots", "rootPath", "commonNodeEntry", "commonNode", "wrapperPath", "wrapper", "_ret", "createEditor", "args", "_len3", "_key3", "_len4", "_key4", "_len5", "_key5", "_len6", "_key6", "_len7", "_key7", "_len8", "_key8", "_len9", "_key9", "_len10", "_key10", "_len11", "_key11", "_len12", "_key12", "_len13", "_key13", "_len14", "_key14", "_len15", "_key15", "_len16", "_key16", "_len17", "_key17", "_len18", "_key18", "_len19", "_key19", "_delete", "_len20", "_key20", "_len21", "_key21", "_len22", "_key22", "_len23", "_key23", "_len24", "_key24", "_len25", "_key25", "_len26", "_key26", "_len27", "_key27", "_len28", "_key28", "_len29", "_key29", "_len30", "_key30", "_len31", "_key31", "_len32", "_key32", "_len33", "_key33", "_len34", "_key34", "_len35", "_key35", "_len36", "_key36", "_len37", "_key37", "_len38", "_key38", "_len39", "_key39", "_len40", "_key40", "_len41", "_key41", "_len42", "_key42", "_len43", "_key43", "_len44", "_key44", "_len45", "_key45", "_len46", "_key46", "_len47", "_key47", "_len48", "_key48", "_len49", "_key49", "_len50", "_key50", "_len51", "_key51", "_len52", "_key52", "_len53", "_key53", "_len54", "_key54", "_len55", "_key55", "_len56", "_key56", "_len57", "_key57", "_len58", "_key58", "_len59", "_key59", "_len60", "_key60", "_len61", "_key61", "_len62", "_key62", "_len63", "_key63", "_len64", "_key64", "_len65", "_key65", "_len66", "_key66", "_len67", "_key67", "_len68", "_key68", "_len69", "_key69", "_len70", "_key70", "_len71", "_key71", "_len72", "_key72", "_len73", "_key73", "_void", "_len74", "_key74", "_len75", "_key75", "_len76", "_key76", "_len77", "_key77"]
}
