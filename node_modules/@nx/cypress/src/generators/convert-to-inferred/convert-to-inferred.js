"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertToInferred = void 0;
const devkit_1 = require("@nx/devkit");
const executor_to_plugin_migrator_1 = require("@nx/devkit/src/generators/plugin-migrations/executor-to-plugin-migrator");
const plugin_1 = require("../../plugins/plugin");
const target_options_map_1 = require("./lib/target-options-map");
const upsert_baseUrl_1 = require("./lib/upsert-baseUrl");
const add_dev_server_target_to_config_1 = require("./lib/add-dev-server-target-to-config");
const add_exclude_spec_pattern_1 = require("./lib/add-exclude-spec-pattern");
async function convertToInferred(tree, options) {
    const projectGraph = await (0, devkit_1.createProjectGraphAsync)();
    const migratedProjectsModern = await (0, executor_to_plugin_migrator_1.migrateExecutorToPlugin)(tree, projectGraph, '@nx/cypress:cypress', '@nx/cypress/plugin', (targetName) => ({
        targetName,
        ciTargetName: 'e2e-ci',
    }), postTargetTransformer, plugin_1.createNodesV2, options.project);
    const migratedProjectsLegacy = await (0, executor_to_plugin_migrator_1.migrateExecutorToPlugin)(tree, projectGraph, '@nrwl/cypress:cypress', '@nx/cypress/plugin', (targetName) => ({
        targetName,
        ciTargetName: 'e2e-ci',
    }), postTargetTransformer, plugin_1.createNodesV2, options.project);
    const migratedProjects = migratedProjectsModern.size + migratedProjectsLegacy.size;
    if (migratedProjects === 0) {
        throw new Error('Could not find any targets to migrate.');
    }
    if (!options.skipFormat) {
        await (0, devkit_1.formatFiles)(tree);
    }
}
exports.convertToInferred = convertToInferred;
function postTargetTransformer(target, tree) {
    if (target.options) {
        const configFilePath = target.options.cypressConfig;
        delete target.options.cypressConfig;
        delete target.options.copyFiles;
        delete target.options.skipServe;
        for (const key in target_options_map_1.targetOptionsToCliMap) {
            if (target.options[key]) {
                target.options[target_options_map_1.targetOptionsToCliMap[key]] = target.options[key];
                delete target.options[key];
            }
        }
        if ('exit' in target.options && !target.options.exit) {
            delete target.options.exit;
            target.options['no-exit'] = true;
        }
        if (target.options.testingType) {
            delete target.options.testingType;
        }
        if (target.options.watch) {
            target.options.headed = true;
            target.options['no-exit'] = true;
            delete target.options.watch;
        }
        if (target.options.baseUrl) {
            (0, upsert_baseUrl_1.upsertBaseUrl)(tree, configFilePath, target.options.baseUrl);
            delete target.options.baseUrl;
        }
        if (target.options.devServerTarget) {
            const webServerCommands = {
                default: `npx nx run ${target.options.devServerTarget}`,
            };
            delete target.options.devServerTarget;
            if (target.configurations) {
                for (const configuration in target.configurations) {
                    if (target.configurations[configuration]?.devServerTarget) {
                        webServerCommands[configuration] = `npx nx run ${target.configurations[configuration].devServerTarget}`;
                        delete target.configurations[configuration].devServerTarget;
                    }
                }
            }
            (0, add_dev_server_target_to_config_1.addDevServerTargetToConfig)(tree, configFilePath, webServerCommands, webServerCommands?.['ci']);
        }
        if (target.options.ignoreTestFiles) {
            (0, add_exclude_spec_pattern_1.addExcludeSpecPattern)(tree, configFilePath, target.options.ignoreTestFiles);
            delete target.options.ignoreTestFiles;
        }
        if (Object.keys(target.options).length === 0) {
            delete target.options;
        }
        if (target.configurations &&
            Object.keys(target.configurations).length !== 0) {
            for (const configuration in target.configurations) {
                if (Object.keys(target.configurations[configuration]).length === 0) {
                    delete target.configurations[configuration];
                }
            }
            if (Object.keys(target.configurations).length === 0) {
                delete target.configurations;
            }
        }
    }
    return target;
}
exports.default = convertToInferred;
