import { default as React, ReactNode } from 'react';
export type Language = 'zh' | 'en';
export interface Translations {
    'toolbar.hand': string;
    'toolbar.selection': string;
    'toolbar.mind': string;
    'toolbar.text': string;
    'toolbar.pen': string;
    'toolbar.eraser': string;
    'toolbar.arrow': string;
    'toolbar.shape': string;
    'toolbar.image': string;
    'toolbar.extraTools': string;
    'zoom.in': string;
    'zoom.out': string;
    'zoom.fit': string;
    'zoom.100': string;
    'theme.default': string;
    'theme.colorful': string;
    'theme.soft': string;
    'theme.retro': string;
    'theme.dark': string;
    'theme.starry': string;
    'general.undo': string;
    'general.redo': string;
    'general.menu': string;
    'general.duplicate': string;
    'general.delete': string;
    'language.switcher': string;
    'language.chinese': string;
    'language.english': string;
    'menu.open': string;
    'menu.saveFile': string;
    'menu.exportImage': string;
    'menu.exportImage.png': string;
    'menu.exportImage.jpg': string;
    'menu.cleanBoard': string;
    'menu.github': string;
    'dialog.mermaid.title': string;
    'dialog.mermaid.description': string;
    'dialog.mermaid.flowchart': string;
    'dialog.mermaid.sequence': string;
    'dialog.mermaid.class': string;
    'dialog.mermaid.otherTypes': string;
    'dialog.mermaid.syntax': string;
    'dialog.mermaid.placeholder': string;
    'dialog.mermaid.preview': string;
    'dialog.mermaid.insert': string;
    'dialog.markdown.description': string;
    'dialog.markdown.syntax': string;
    'dialog.markdown.placeholder': string;
    'dialog.markdown.preview': string;
    'dialog.markdown.insert': string;
    'dialog.error.loadMermaid': string;
    'extraTools.mermaidToDrawnix': string;
    'extraTools.markdownToDrawnix': string;
    'cleanConfirm.title': string;
    'cleanConfirm.description': string;
    'cleanConfirm.cancel': string;
    'cleanConfirm.ok': string;
    'popupToolbar.fontColor': string;
    'popupToolbar.stroke': string;
    'popupToolbar.fillColor': string;
    'popupToolbar.link': string;
    'line.source': string;
    'line.target': string;
    'line.arrow': string;
    'line.none': string;
}
interface I18nContextType {
    language: Language;
    setLanguage: (language: Language) => void;
    t: (key: keyof Translations) => string;
}
interface I18nProviderProps {
    children: ReactNode;
    defaultLanguage?: Language;
}
export declare const I18nProvider: React.FC<I18nProviderProps>;
export declare const useI18n: () => I18nContextType;
export type { I18nContextType };
